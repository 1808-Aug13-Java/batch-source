<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spring</title>
  <link rel="alternate" href="https://spring.io/blog" />
  <link rel="self" href="https://spring.io/blog.atom" />
  <id>http://spring.io/blog.atom</id>
  <icon>https://spring.io/favicon.ico</icon>
  <updated>2018-09-13T19:03:16Z</updated>
  <entry>
    <title>Spring IO Platform Cairo SR4</title>
    <link rel="alternate" href="https://spring.io/blog/2018/09/13/spring-io-platform-cairo-sr4" />
    <category term="releases" label="Releases" />
    <author>
      <name>Andy Wilkinson</name>
    </author>
    <id>tag:spring.io,2018-09-13:3395</id>
    <updated>2018-09-13T19:03:16Z</updated>
    <content type="html">&lt;p&gt;I am pleased to announce that &lt;a href="http://platform.spring.io/platform"&gt;Spring IO Platform&lt;/a&gt; Cairo-SR4 is now available from both &lt;a href="https://repo.spring.io/release"&gt;repo.spring.io&lt;/a&gt; and Maven Central. &lt;/p&gt;
&lt;p&gt;This maintenance release upgrades the versions of a number of the projects in the Platform:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring AMQP 2.0.6&lt;/li&gt;
  &lt;li&gt;Spring Boot 2.0.6&lt;/li&gt;
  &lt;li&gt;Spring Cloud Connectors 2.0.3&lt;/li&gt;
  &lt;li&gt;Spring Data Kay SR10&lt;/li&gt;
  &lt;li&gt;Spring Framework 5.0.9&lt;/li&gt;
  &lt;li&gt;Spring Integration 5.0.8&lt;/li&gt;
  &lt;li&gt;Spring Kafka 2.1.10&lt;/li&gt;
  &lt;li&gt;Spring Security 5.0.8&lt;/li&gt;
  &lt;li&gt;Spring Session Apple SR5&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The versions of a number of third-party dependencies have also been updated.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://platform.spring.io/platform"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-io/platform"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-io/platform/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://docs.spring.io/platform/docs/Cairo-SR4/reference/htmlsingle"&gt;Documentation&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring IO Platform Brussels SR13</title>
    <link rel="alternate" href="https://spring.io/blog/2018/09/13/spring-io-platform-brussels-sr13" />
    <category term="releases" label="Releases" />
    <author>
      <name>Andy Wilkinson</name>
    </author>
    <id>tag:spring.io,2018-09-13:3394</id>
    <updated>2018-09-13T15:23:58Z</updated>
    <content type="html">&lt;p&gt;I am pleased to announce that &lt;a href="http://platform.spring.io/platform"&gt;Spring IO Platform&lt;/a&gt; Brussels-SR13 is now available from both &lt;a href="https://repo.spring.io/release"&gt;repo.spring.io&lt;/a&gt; and Maven Central. &lt;/p&gt;
&lt;p&gt;This maintenance release upgrades the versions of a number of the projects in the Platform:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring AMQP 1.7.10&lt;/li&gt;
  &lt;li&gt;Spring Boot 1.5.16&lt;/li&gt;
  &lt;li&gt;Spring Data Ingalls SR15&lt;/li&gt;
  &lt;li&gt;Spring Framework 4.3.19&lt;/li&gt;
  &lt;li&gt;Spring Security 4.2.8&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The versions of a number of third-party dependencies have also been updated.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://platform.spring.io/platform"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-io/platform"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-io/platform/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://docs.spring.io/platform/docs/Brussels-SR13/reference/htmlsingle"&gt;Documentation&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Boot 2.1 M3 available now</title>
    <link rel="alternate" href="https://spring.io/blog/2018/09/13/spring-boot-2-1-m3-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>Phil Webb</name>
    </author>
    <id>tag:spring.io,2018-09-13:3393</id>
    <updated>2018-09-13T06:01:00Z</updated>
    <content type="html">&lt;p&gt;On behalf of the team and everyone that contributed, I am pleased to announce that the third milestone of Spring Boot 2.1 has been released and is available from &lt;a href="http://repo.spring.io/milestone/"&gt;our milestone repository&lt;/a&gt;. This release closes &lt;a href="https://github.com/spring-projects/spring-boot/releases/tag/v2.1.0.M3"&gt;117 issues and pull requests&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;This third milestone aligns with &lt;a href="https://spring.io/blog/2018/09/07/spring-framework-5-1-rc3-5-0-9-and-4-3-19-available-now"&gt;Spring Framework 5.1.RC3&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Highlights in this release include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Kafka Streams support&lt;/li&gt;
  &lt;li&gt;Support for non-web OAuth applications&lt;/li&gt;
  &lt;li&gt;Improved conversion service integration&lt;/li&gt;
  &lt;li&gt;Support for logging groups&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For a complete list of changes and upgrade instructions, please see the &lt;a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.1.0-M3-Release-Notes"&gt;Spring Boot 2.1 Release Notes&lt;/a&gt; on the wiki and the &lt;a href="http://docs.spring.io/spring-boot/docs/2.1.0.M3/reference/htmlsingle/"&gt;updated reference documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to get started with 2.1 and try out the new features, you can bootstrap a new project on &lt;a href="https://start.spring.io"&gt;https://start.spring.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We hope to release an M4 just in time for &lt;a href="https://springoneplatform.io/"&gt;Spring One Platform 2018&lt;/a&gt; and the 2.1 GA towards the end of October.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-boot/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-boot/docs/2.1.0.M3/reference/htmlsingle"&gt;Documentation&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-boot"&gt;Stack Overflow&lt;/a&gt; | &lt;a href="https://gitter.im/spring-projects/spring-boot"&gt;Gitter&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Bootiful GCP: To Production! (8/8)</title>
    <link rel="alternate" href="https://spring.io/blog/2018/09/13/bootiful-gcp-to-production-8-8" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2018-08-18:3370</id>
    <updated>2018-09-13T00:00:00Z</updated>
    <content type="html">&lt;blockquote&gt;
  &lt;p&gt;Hi Spring fans! In this brief 8 part series we’re going to look at the Spring Cloud integration for Google Cloud Platform, called Spring Cloud GCP. &lt;a href="https://cloud.spring.io/spring-cloud-gcp/"&gt;Spring Cloud GCP&lt;/a&gt; represents a joint effort between Google and Pivotal that endeavors to provide a first class experience for Spring Cloud developers when using the Google Cloud Platform. Pivotal Cloud Foundry users will enjoy an even &lt;a href="https://docs.pivotal.io/partners/gcp-sb/index.html"&gt;easier integration with the GCP service broker&lt;/a&gt;. I wrote these installments with input from Google Cloud Developer Advocate, and my buddy, &lt;a href="http://twitter.com/saturnism"&gt;Ray Tsang&lt;/a&gt;. You can also catch a walkthrough of Spring Cloud GCP in our Google Next 2018 session, &lt;a href="https://www.youtube.com/watch?v=2Jo3vy7iQf8"&gt;Bootiful Google Cloud Platform&lt;/a&gt;. Thanks buddy! As always, &lt;a href="http://twitter.com/starbuxman"&gt;I&amp;rsquo;d love to hear from you if you have feedback&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As we’ve worked through these examples we’ve relied on the default authentication of the Google Cloud SDKs and Spring Cloud GCP working with a local installation of the Google Cloud SDK and the &lt;code&gt;gcloud&lt;/code&gt; CLI. Spring Cloud GCP’s auto-configuration configures a &lt;code&gt;DefaultCredentialsProvider&lt;/code&gt; that looks for &lt;em&gt;some&lt;/em&gt; way to authenticate. Everything’s worked fine on our local machine so far because we ran the interactive authentication prompt and confirmed on the Google Cloud website the linking of our authorities to this application. But what if you want to run tests in a CI environment or deploy the application to a cloud platform?&lt;/p&gt;
&lt;p&gt;We need a way to convey our authorization when running in these environments. We can do this on Google Cloud using &lt;em&gt;service accounts&lt;/em&gt;. The &lt;a href="https://cloud.google.com/docs/authentication/production#auth-cloud-implicit-java"&gt;process is explained here&lt;/a&gt;. The gist is that you will need to describe, as narrowly as possible, the privileges your application can have using a Google Cloud service account and then render those credentials into a file which we will feed to the application.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint shell"&gt;PROJECT_ID=$(gcloud config list --format &amp;#39;value(core.project)&amp;#39;)&#xD;
&#xD;
&#xD;
NAME=gcp-service-app&#xD;
&#xD;
&#xD;
gcloud iam service-accounts create $NAME&#xD;
&#xD;
&#xD;
gcloud projects add-iam-policy-binding $PROJECT_ID  --member &amp;quot;serviceAccount:${NAME}@${PROJECT_ID}.iam.gserviceaccount.com&amp;quot; --role &amp;quot;roles/owner&amp;quot;&#xD;
&#xD;
&#xD;
gcloud iam service-accounts keys create ${NAME}.json --iam-account ${NAME}@${PROJECT_ID}.iam.gserviceaccount.com
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;
  &lt;p&gt;the name is arbitrary. You might use a name that reflects the nature of your application.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;create the service account giving it a name&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;add a role - &lt;code&gt;roles/owner&lt;/code&gt; - to our service binding. You would do well to be more granular in assignment of your roles.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;generate a file, &lt;code&gt;gcp-service-app.json&lt;/code&gt;, that contains the key.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The result of this process should be a &lt;code&gt;.json&lt;/code&gt; file, &lt;code&gt;gcp-service-app.json&lt;/code&gt;, on your local machine.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;&lt;/p&gt;
  &lt;p&gt;That &lt;code&gt;.json&lt;/code&gt; file is a secret! Do &lt;em&gt;not&lt;/em&gt; share or lose track of it!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You need to tell the Spring Cloud application where to find this credential. You can pass it to Spring Cloud GCP as a file location or a Base 64-encoded &lt;code&gt;String&lt;/code&gt;. Let’s do the latter. We can use the &lt;code&gt;spring.cloud.gcp.credentials.encoded-key&lt;/code&gt; to convey the Base64-encoded contents of the file we just generated.&lt;/p&gt;
&lt;p&gt;This is a secret value, and it will differ from one environment to another. We don’t want it checked into version control, in &lt;code&gt;src/main/resources/application.properties&lt;/code&gt;, and even if we did we’d still need to maintain different environment-specific values. Spring Boot lets us provide overrides when running the application. We could use &lt;code&gt;application.properties&lt;/code&gt; or &lt;code&gt;application.yml&lt;/code&gt; files. We could stash thm in environment-specific Runtime Config. We could provide them as &lt;code&gt;-D&lt;/code&gt; arguments or environment variables when running the application. So could easily say &lt;code&gt;java -Dspring.cloud.gcp.credentials.encoded-key=…? -jar ..&lt;/code&gt; to provide a value that either contributes a new value to the application or overrides the existing value in &lt;code&gt;src/main/resources/application.properties&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Environment variables are a more natural fit for platforms like Cloud Foundry or Heroku where we don’t necessarily want to have control over &lt;em&gt;how&lt;/em&gt; an application is run, over its &lt;code&gt;java&lt;/code&gt; incantation. The platform Buildpack does that for us. Let’s look at how we could run the application locally.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;run.sh.&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint shell"&gt;#!/bin/bash&#xD;
&#xD;
&#xD;
export SPRING_CLOUD_GCP_CREDENTIALS_ENCODED_KEY=$( cat $GCP_SERVICE_ACCOUNT_KEY_FILE | base64 -w0  )&#xD;
export SPRING_CLOUD_GCP_PROJECT_ID=$(gcloud config list --format &amp;#39;value(core.project)&amp;#39;)&#xD;
&#xD;
mvn clean spring-boot:run
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;when you run this script, set the environment variable &lt;code&gt;SPRING_CLOUD_GCP_CREDENTIALS_ENCODED_KEY&lt;/code&gt; before running the application to point to the location of your service account &lt;code&gt;.json&lt;/code&gt; file.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;On my machine, I was able to run that script like this: &lt;code&gt;GCP_SERVICE_ACCOUNT_KEY_FILE=/home/jlong/keys/gcp-service-account.json ./run.sh&lt;/code&gt;. Your local path for the &lt;code&gt;.json&lt;/code&gt; file will most likely vary.&lt;/p&gt;
&lt;p&gt;You can translate those environment variables as needed for your particular CI environment. Once your application has been tested and integrated, it’s off to production! For me, production is Cloud Foundry (running on top of Google Cloud, no less). Here’s a script that deploys the application to the Cloud Foundry instance in which I’m authenticated.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;deploy.sh.&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint shell"&gt;#!/usr/bin/env bash&#xD;
&#xD;
mvn -DskipTests=true clean package&#xD;
&#xD;
&#xD;
cf d -f $APP_NAME&#xD;
&#xD;
&#xD;
cf push --no-start --random-route -p $JAR $APP_NAME&#xD;
cf set-env $APP_NAME SPRING_CLOUD_GCP_CREDENTIALS_ENCODED_KEY &amp;quot;$( cat $GCP_SERVICE_ACCOUNT_KEY_FILE | base64 -w0 )&amp;quot;&#xD;
cf set-env $APP_NAME SPRING_CLOUD_GCP_PROJECT_ID $(gcloud config list --format &amp;#39;value(core.project)&amp;#39;)&#xD;
&#xD;
&#xD;
cf restart $APP_NAME
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;
  &lt;p&gt;warning! this script &lt;strong&gt;deletes&lt;/strong&gt; the existing application. You don’t need to, but it ensures things are cleanly reset :)&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;here we push the application, giving it a random route, and tell Cloud Foundry to &lt;em&gt;not&lt;/em&gt; start it. Then, we specify environment variables for the application.&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;finally, we start the application now that we’re done securing it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;&lt;/p&gt;
  &lt;p&gt;In both &lt;code&gt;run.sh&lt;/code&gt; and &lt;code&gt;deploy.sh&lt;/code&gt; we used &lt;code&gt;base64 -w0&lt;/code&gt; to encode the &lt;code&gt;.json&lt;/code&gt; service account file in Base64. One of us is running on Linux and the other on OS X. The &lt;code&gt;-w0&lt;/code&gt; operand ensures that the Base64 encoded file isn’t hard-wrapped, that it is one contiguous line of text, when running on Linux against the &lt;code&gt;GNU&lt;/code&gt; &lt;code&gt;base64&lt;/code&gt; utility.&lt;/p&gt;
&lt;/blockquote&gt;</content>
  </entry>
  <entry>
    <title>Spring Boot 2.0.5</title>
    <link rel="alternate" href="https://spring.io/blog/2018/09/12/spring-boot-2-0-5" />
    <category term="releases" label="Releases" />
    <author>
      <name>Andy Wilkinson</name>
    </author>
    <id>tag:spring.io,2018-09-12:3392</id>
    <updated>2018-09-12T11:52:00Z</updated>
    <content type="html">&lt;p&gt;It is my pleasure to announce that Spring Boot 2.0.5 has been released and is is now available from &lt;a href="http://repo.spring.io/release"&gt;repo.spring.io&lt;/a&gt; and &lt;a href="http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.springframework.boot%22"&gt;Maven Central&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Spring Boot 2.0.5 includes &lt;a href="https://github.com/spring-projects/spring-boot/releases/tag/v2.0.5.RELEASE"&gt;87 fixes, improvements and dependency updates&lt;/a&gt;. Thanks to all that have contributed with issue reports and pull requests.&lt;/p&gt;&lt;h3&gt;&lt;a href="#how-can-you-help" class="anchor" name="how-can-you-help"&gt;&lt;/a&gt;How can you help?&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;re interested in helping out, check out the &lt;a href="https://github.com/spring-projects/spring-boot/labels/status%3A%20ideal-for-contribution"&gt;&amp;ldquo;ideal for contribution&amp;rdquo; tag&lt;/a&gt; in the issue repository. If you have general questions, please ask on &lt;a href="http://stackoverflow.com"&gt;stackoverflow.com&lt;/a&gt; using the &lt;a href="http://stackoverflow.com/tags/spring-boot"&gt;&lt;code&gt;spring-boot&lt;/code&gt; tag&lt;/a&gt; or chat with the community on &lt;a href="https://gitter.im/spring-projects/spring-boot"&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://spring.io/projects/spring-boot/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-boot/docs/2.0.5.RELEASE/reference/htmlsingle"&gt;Documentation&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-boot"&gt;Stack Overflow&lt;/a&gt; | &lt;a href="https://gitter.im/spring-projects/spring-boot"&gt;Gitter&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Boot 1.5.16</title>
    <link rel="alternate" href="https://spring.io/blog/2018/09/11/spring-boot-1-5-16" />
    <category term="releases" label="Releases" />
    <author>
      <name>Andy Wilkinson</name>
    </author>
    <id>tag:spring.io,2018-09-11:3391</id>
    <updated>2018-09-11T16:43:00Z</updated>
    <content type="html">&lt;p&gt;On behalf of the team, I am pleased to announce that Spring Boot 1.5.16 has been released and is is now available from &lt;a href="http://repo.spring.io/release"&gt;repo.spring.io&lt;/a&gt; and &lt;a href="http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22org.springframework.boot%22"&gt;Maven Central&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Spring Boot 1.5.16 includes &lt;a href="https://github.com/spring-projects/spring-boot/releases/tag/v1.5.16.RELEASE"&gt;27 fixes, improvements and dependency updates&lt;/a&gt;. Thanks to all that have contributed with issue reports and pull requests.&lt;/p&gt;&lt;h3&gt;&lt;a href="#how-can-you-help" class="anchor" name="how-can-you-help"&gt;&lt;/a&gt;How can you help?&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;re interested in helping out, check out the &lt;a href="https://github.com/spring-projects/spring-boot/labels/status%3A%20ideal-for-contribution"&gt;&amp;ldquo;ideal for contribution&amp;rdquo; tag&lt;/a&gt; in the issue repository. If you have general questions, please ask on &lt;a href="http://stackoverflow.com"&gt;stackoverflow.com&lt;/a&gt; using the &lt;a href="http://stackoverflow.com/tags/spring-boot"&gt;&lt;code&gt;spring-boot&lt;/code&gt; tag&lt;/a&gt; or chat with the community on &lt;a href="https://gitter.im/spring-projects/spring-boot"&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://spring.io/projects/spring-boot/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-boot/docs/1.5.16.RELEASE/reference/htmlsingle"&gt;Documentation&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-boot"&gt;Stack Overflow&lt;/a&gt; | &lt;a href="https://gitter.im/spring-projects/spring-boot"&gt;Gitter&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Kotlin Support in Spring Cloud Function</title>
    <link rel="alternate" href="https://spring.io/blog/2018/09/11/kotlin-support-in-spring-cloud-function" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Oleg Zhurakousky</name>
    </author>
    <id>tag:spring.io,2018-09-11:3390</id>
    <updated>2018-09-11T13:46:17Z</updated>
    <content type="html">&lt;p&gt;Rarely we blog about a single feature, but given that &lt;a href="https://github.com/spring-cloud/spring-cloud-function/issues/77"&gt;this one&lt;/a&gt; was one of the most requested ones in &lt;a href="https://cloud.spring.io/spring-cloud-function/"&gt;Spring Cloud Function&lt;/a&gt; (relatively young project), we thought it may be appropriate, so here it is.&lt;/p&gt;
&lt;p&gt;Initial support for &lt;a href="https://kotlinlang.org/"&gt;Kotlin&lt;/a&gt; lambdas has been added to Spring Cloud Function. What it means is that Spring Cloud Function can now recognize Kotlin lambdas that &lt;em&gt;effectively&lt;/em&gt; match to one of Java&amp;rsquo;s &lt;code&gt;Supplier&lt;/code&gt;, &lt;code&gt;Function&lt;/code&gt; or &lt;code&gt;Consumer&lt;/code&gt; and treat them as such.&lt;/p&gt;
&lt;p&gt;That is:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint $kotlin"&gt;@Bean&#xD;
open fun kotlinFunction(): (String) -&amp;gt; String {&#xD;
    return  { it.toUpperCase() }&#xD;
}&#xD;
&#xD;
@Bean&#xD;
open fun kotlinConsumer(): (String) -&amp;gt; Unit {&#xD;
    return  { println(it) }&#xD;
}&#xD;
&#xD;
@Bean&#xD;
open fun kotlinSupplier(): () -&amp;gt; String {&#xD;
    return  { &amp;quot;Hello Kotlin&amp;quot; }&#xD;
}&#xD;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check out the sample project &lt;a href="https://github.com/olegz/demos/tree/master/demo-function-kotlin"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;That is pretty much it. The feature is available in the current snapshot and will be part of Spring Cloud Function 2.0.0.RELEASE. This means that enhancements and modifications are still ongoing so your feedback is quite important.&lt;/p&gt;
&lt;p&gt;For more on Spring Cloud Function see the following:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://spring.io/blog/2017/07/05/introducing-spring-cloud-function"&gt;https://spring.io/blog/2017/07/05/introducing-spring-cloud-function&lt;/a&gt;&lt;br/&gt;&lt;a href="https://www.nurkiewicz.com/2018/04/sneak-peek-at-spring-cloud-function.html"&gt;https://www.nurkiewicz.com/2018/04/sneak-peek-at-spring-cloud-function.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Security 5.0.8 and 4.2.8 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2018/09/11/spring-security-5-0-8-and-4-2-8-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Josh Cummings</name>
    </author>
    <id>tag:spring.io,2018-09-10:3388</id>
    <updated>2018-09-11T13:26:15Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;On behalf of the community, I am pleased to announce that the Spring Security 5.0.8 (&lt;a href="https://github.com/spring-projects/spring-security/milestone/120?closed=1"&gt;changelog&lt;/a&gt;) and 4.2.8 (&lt;a href="https://github.com/spring-projects/spring-security/milestone/118?closed=1"&gt;changelog&lt;/a&gt;) have been released. The releases primarily deliver bug fixes and dependency version updates along with some minor improvements. The releases will be found in the upcoming Spring Boot maintenance releases coming this week.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-security/"&gt;Project Site&lt;/a&gt; |
&lt;a href="http://docs.spring.io/spring-security/site/docs/4.2.x/reference/htmlsingle/"&gt;4.x Reference&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-security/site/docs/5.0.x/reference/htmlsingle/"&gt;5.x Reference&lt;/a&gt;
| &lt;a href="http://stackoverflow.com/questions/tagged/spring-security"&gt;Help&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - September 11th, 2018</title>
    <link rel="alternate" href="https://spring.io/blog/2018/09/11/this-week-in-spring-september-11th-2018" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2018-09-11:3389</id>
    <updated>2018-09-11T12:15:41Z</updated>
    <content type="html">&lt;p&gt;Hi Spring fans! Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! This week I&amp;rsquo;m in Istanbul, Turkey, talking to customers and participating in the epic SpringOne Platform Istanbul event and otherwise generally preparing for &lt;a href="_URL_"&gt;the flagship SpringOne Platform 2018 event in just a few short weeks&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Security lead Josh Cummings just &lt;a href="https://spring.io/blog/2018/09/10/spring-security-5-1-0-rc2-released"&gt;announced Spring Security 5.1.0.RC2&lt;/a&gt;. The new release supports a ton of new stuff including a simplified DSL for OAuth 2, &lt;code&gt;WebClient&lt;/code&gt; extensions, servlet enhancements, improved resource server support, improved &lt;code&gt;RestTemplate&lt;/code&gt; support, support for X.509 and use of environment variables for configuring LDAP.&lt;/li&gt;
  &lt;li&gt;Mark Paluch has just announced the &lt;em&gt;packed&lt;/em&gt; &lt;a href="https://spring.io/blog/2018/09/10/spring-data-ingalls-sr15-and-kay-sr10-released"&gt;Spring Data Ingalls SR15 and Spring Data Kay SR10&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Mark Paluch has just announced Spring Vault 2.0.2, which &lt;a href="https://spring.io/blog/2018/09/10/spring-vault-2-0-2-released"&gt;delivers dependency updates and some minor bug fixes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Mark Paluch just announced &lt;a href="https://spring.io/blog/2018/09/10/spring-vault-2-1-goes-rc"&gt;the Spring Vault 2.1 release candidate&lt;/a&gt;. Spring Vault 2.1 requires JDK 8 or higher and specifically supports JDK 11 as the next long-term support release. This release ships with 15 tickets fixed along with some refinements for Java 9 to 11. The most notable changes are support for Azure authentication with managed service instances on VMs, GCP IAM authentication support on behalf of service accounts, and the release is compatible with Vault versions from 0.5.2 up to 0.11.1.&lt;/li&gt;
  &lt;li&gt;Continuing my eight part series that looks at using Spring Cloud with Google Cloud, &lt;a href="https://spring.io/blog/2018/09/10/bootiful-gcp-use-spring-cloud-gcp-to-connect-to-other-gcp-services-7-8"&gt;this 7th installment looks at using Spring Cloud GCP to connect to other GCP Services&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Stéphane Nicoll just &lt;a href="https://spring.io/blog/2018/09/07/spring-framework-5-1-rc3-5-0-9-and-4-3-19-available-now"&gt;announced Spring Framework 5.1 RC3, 5.0.9 and 4.3.19&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Continuing my eight part series that looks at using Spring Cloud with Google Cloud, &lt;a href="https://spring.io/blog/2018/09/06/bootiful-gcp-supporting-observability-with-spring-cloud-gcp-stackdriver-trace-6-8"&gt;this 6th installment looks at supporting observability with Spring Cloud GCP Stackdriver Trace&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Laís Neves looks at her experience at &lt;a href="https://medium.com/@lasneves/minha-experi%C3%AAncia-no-womakerscode-summit-sergipe-47740abc006f"&gt;the WoMakersCode conference&lt;/a&gt;, where she spoke about making Java fun again with Spring Boot, in this Portuguese-language post.&lt;/li&gt;
  &lt;li&gt;Sajal Chakraborty has a nice post on using &lt;a href="https://howtodoinjava.com/spring5/core/spring-remoting-rmi-hessian/"&gt;Spring&amp;rsquo;s RMI and Hessian service exporters support in a modern Spring Boot context&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This new Packt book, &lt;a href="https://www.packtpub.com/application-development/mastering-architecting-solutions-spring-5"&gt;Software Architecture with Spring 5.0&lt;/a&gt;, looks interesting. I&amp;rsquo;m adding it to my &amp;ldquo;To Read&amp;rdquo; list..&lt;/li&gt;
  &lt;li&gt;This &lt;a href="https://medium.com/@igorkosandyak/spring-boot-with-hazelcast-b04d13927745"&gt;post on using Spring Boot and Hazelcast&lt;/a&gt; is helpful. This is pretty a propos given that I&amp;rsquo;m in Istanbul, Turkey, where Hazelcast debuted!&lt;/li&gt;
  &lt;li&gt;I&amp;rsquo;m honored to be included in this list of &lt;a href="https://www.whizlabs.com/blog/top-java-influencers/"&gt;top 20 Java influencers in this list&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Check out Jakub Pilimon&amp;rsquo;s epic guide &lt;a href="https://github.com/ddd-by-examples/all-things-cqrs"&gt;to a couple of possible ways of doing CQRS with the Spring stack&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Check out this nice post looking at the Graal VM: &lt;a href="https://medium.com/@jponge/the-graalvm-frenzy-f54257f5932c"&gt;&amp;ldquo;The Graal Frenzy&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Alican Akkus did a nice post on &lt;a href="https://medium.com/@caysever/consumer-driven-contract-with-spring-boot-65ab504b529e"&gt;&amp;ldquo;Consumer Driven Contract with Spring Boot&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;JUnit 5.3 is released! It includes &lt;a href="https://junit.org/junit5/docs/5.3.0/release-notes/"&gt;parallel test execution, output capturing, a new &lt;code&gt;TestInstanceFactory&lt;/code&gt; Extension API, and so much more&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Nice post on the 5 Unexpected Journeys for an Ops Teams at &lt;a href="https://www.linkedin.com/pulse/5-unexpected-journeys-ops-teams-springone-platform-john-allwright/"&gt;the epic SpringOne Platform 2018 event coming in just a few short weeks!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Spring Security 5.1.0.RC2 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2018/09/10/spring-security-5-1-0-rc2-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Josh Cummings</name>
    </author>
    <id>tag:spring.io,2018-09-07:3384</id>
    <updated>2018-09-10T15:18:00Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;On behalf of the community I am pleased to announce the release of Spring Security 5.1.0.RC2. This release comes with &lt;a href="https://github.com/spring-projects/spring-security/milestone/121?closed=1"&gt;50+ tickets&lt;/a&gt; closed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;As always we look forward to hearing your &lt;a href="https://github.com/spring-projects/spring-security/issues"&gt;feedback&lt;/a&gt;! You can find the highlights below:&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id="table-of-contents" class="sect0"&gt;&lt;a class="anchor" href="#table-of-contents"&gt;&lt;/a&gt;Table of Contents&lt;/h1&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#simplified-dsl-for-oauth2"&gt;Simplified DSL for OAuth2&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#webclient-extensions"&gt;WebClient Extensions&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#servlet-enhancements"&gt;Servlet Enhancements&lt;/a&gt;&lt;/p&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#oauth2"&gt;OAuth2&lt;/a&gt;&lt;/p&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#token-request-configuration"&gt;Token Request Configuration&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#more-provider-configuration-metadata-available"&gt;More Provider Configuration Metadata Available&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#resource-server-claims-mapping"&gt;Resource Server Claims Mapping&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#restoperations-support"&gt;RestOperations Support&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#other-improvements"&gt;Other Improvements&lt;/a&gt;&lt;/p&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#x-509-principal-extractor"&gt;X.509 Principal Extractor&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#ldap-custom-environment-variables"&gt;LDAP Custom Environment Variables&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#webflux-enhancements"&gt;WebFlux Enhancements&lt;/a&gt;&lt;/p&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#oauth2-resource-server"&gt;OAuth2 Resource Server&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#oauth2-client"&gt;OAuth2 Client&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#redirect-to-https"&gt;Redirect to Https&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="#dependency-updates"&gt;Dependency Updates&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h1 id="simplified-dsl-for-oauth2" class="sect0"&gt;&lt;a class="anchor" href="#simplified-dsl-for-oauth2"&gt;&lt;/a&gt;Simplified DSL for OAuth2&lt;/h1&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;In the beginning, the Spring Security DSL had two oauths:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;http
    .oauth2Login()...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;http
    .oauth2()
        .client()...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;which made some sense, since one was an authentication mechanism, like &lt;code&gt;formLogin&lt;/code&gt; and &lt;code&gt;openidLogin&lt;/code&gt; and the others--&lt;code&gt;client&lt;/code&gt;, &lt;code&gt;resourceServer&lt;/code&gt;, and &lt;code&gt;authorizationServer&lt;/code&gt;--were a bit more like OAuth 2.0 personalities.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;In the end, though, that separation felt like needless extra typing, so we resolved to flatten out the hierarchy, which means that, as of this release, we now have:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;http
    .oauth2Login()...
    .oauth2Client()...
    .oauth2ResourceServer()&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;There are no functionality or feature changes tied to this refactoring of the DSL, just less typing  for you.&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id="webclient-extensions" class="sect0"&gt;&lt;a class="anchor" href="#webclient-extensions"&gt;&lt;/a&gt;WebClient Extensions&lt;/h1&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The team has been hard at work with WebClient, and we are excited to announce some new OAuth 2.0 WebClient extensions for both Servlet and WebFlux applications. These extensions make it easy to transmit OAuth 2.0 authorities seamlessly from machine to machine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Read up on all the details in the &lt;a href="https://github.com/spring-projects/spring-security/issues/4921"&gt;OAuth 2.0 Web Client master ticket&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id="servlet-enhancements" class="sect0"&gt;&lt;a class="anchor" href="#servlet-enhancements"&gt;&lt;/a&gt;Servlet Enhancements&lt;/h1&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="oauth2"&gt;&lt;a class="anchor" href="#oauth2"&gt;&lt;/a&gt;OAuth2&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="token-request-configuration"&gt;&lt;a class="anchor" href="#token-request-configuration"&gt;&lt;/a&gt;Token Request Configuration&lt;/h3&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The first part of the OAuth 2.0 journey was spec compliance. This next release introduces much more support for configuring Spring Security to work with providers that extend or deviate from the spec.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;For example, it&amp;#8217;s now possible to &lt;a href="https://github.com/spring-projects/spring-security/issues/5466"&gt;customize the token request made from a client to the authorization server&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="resource-server-claims-mapping"&gt;&lt;a class="anchor" href="#resource-server-claims-mapping"&gt;&lt;/a&gt;Resource Server Claims Mapping&lt;/h3&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Along those same lines, Resource Server is shipping with support for &lt;a href="https://github.com/spring-projects/spring-security/issues/5223"&gt;customizing the claim set&lt;/a&gt; that is parsed from incoming JWTs. This is handy when the application needs to add or remove a claim or needs to parse a claim in a custom way:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;NimbusJwtDecoderJwkSupport decoder = // ...
decoder.setClaimSetConverter(
    MappedJwtClaimSetConverter
        .withDefaults("custom-date", this::convertToInstant));&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="more-provider-configuration-metadata-available"&gt;&lt;a class="anchor" href="#more-provider-configuration-metadata-available"&gt;&lt;/a&gt;More Provider Configuration Metadata Available&lt;/h3&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;And the journey towards spec compliance also continues. In this release, support for collecting and providing &lt;a href="https://github.com/spring-projects/spring-security/pull/5729"&gt;any metadata returned from the OIDC Provider Configuration endpoint&lt;/a&gt; was added.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Now, &lt;code&gt;ClientRegistration&lt;/code&gt; ships with &lt;code&gt;getConfigurationMetadata&lt;/code&gt; which sits alongside methods targeted at specific properties and returns the entire map of provider attributes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="restoperations-support"&gt;&lt;a class="anchor" href="#restoperations-support"&gt;&lt;/a&gt;RestOperations Support&lt;/h3&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This release also ships with support for &lt;a href="https://github.com/spring-projects/spring-security/issues/5602"&gt;complete customization of the HTTP request&lt;/a&gt; &lt;a href="https://github.com/spring-projects/spring-security/issues/5600"&gt;to various&lt;/a&gt; &lt;a href="https://github.com/spring-projects/spring-security/issues/5547"&gt;endpoints&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This is handy for configuring timeouts, discovery, caching and otherwise taking full advantage of RestTemplate&amp;#8217;s sophistication when communicating with an authorization server.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="other-improvements"&gt;&lt;a class="anchor" href="#other-improvements"&gt;&lt;/a&gt;Other Improvements&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="x-509-principal-extractor"&gt;&lt;a class="anchor" href="#x-509-principal-extractor"&gt;&lt;/a&gt;X.509 Principal Extractor&lt;/h3&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Support has also been added for &lt;a href="https://github.com/spring-projects/spring-security/issues/5771"&gt;deriving the X.509 principal via a strategy&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="ldap-custom-environment-variables"&gt;&lt;a class="anchor" href="#ldap-custom-environment-variables"&gt;&lt;/a&gt;LDAP Custom Environment Variables&lt;/h3&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;And support was added for configuring &lt;a href="https://github.com/spring-projects/spring-security/pull/5674"&gt;custom environment variables that inform the creation of an &lt;code&gt;LdapContext&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id="webflux-enhancements" class="sect0"&gt;&lt;a class="anchor" href="#webflux-enhancements"&gt;&lt;/a&gt;WebFlux Enhancements&lt;/h1&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="oauth2-resource-server"&gt;&lt;a class="anchor" href="#oauth2-resource-server"&gt;&lt;/a&gt;OAuth2 Resource Server&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Several features initially released for the Servlet-based Resource Server were added in RC2 on the WebFlux side. &lt;a href="https://github.com/spring-projects/spring-security/issues/5650"&gt;The reactive&lt;/a&gt; &lt;a href="https://github.com/spring-projects/spring-security/issues/5649"&gt;capabilities&lt;/a&gt; &lt;a href="https://github.com/spring-projects/spring-security/issues/5720"&gt;are similar&lt;/a&gt;, with a small but important exception.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;In Spring Security WebFlux, it is more typical to have an authentication manager per request type. In this release, then, WebFlux ships with &lt;a href="https://github.com/spring-projects/spring-security/issues/5750"&gt;authentication manager configuration for Resource Server&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;http
    .oauth2ResourceServer()
        .authenticationManager(customAuthenticationManager())&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This is helpful in situations where the application needs to do some custom conversion of the &lt;code&gt;Jwt&lt;/code&gt; to a set of granted authorities.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="oauth2-client"&gt;&lt;a class="anchor" href="#oauth2-client"&gt;&lt;/a&gt;OAuth2 Client&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The &lt;a href="https://github.com/spring-projects/spring-security/issues/5733"&gt;&lt;code&gt;@RegisteredOAuth2AuthorizedClient&lt;/code&gt; annotation now supports the client_credentials grant&lt;/a&gt; in WebFlux.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="redirect-to-https"&gt;&lt;a class="anchor" href="#redirect-to-https"&gt;&lt;/a&gt;Redirect to Https&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Last but not least, &lt;a href="https://github.com/spring-projects/spring-security/issues/5749"&gt;https redirection support&lt;/a&gt; has been added to WebFlux and is accessible through &lt;code&gt;http.redirectToHttps()&lt;/code&gt; or directly via the &lt;code&gt;HttpsRedirectWebFilter&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id="dependency-updates" class="sect0"&gt;&lt;a class="anchor" href="#dependency-updates"&gt;&lt;/a&gt;Dependency Updates&lt;/h1&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;And we&amp;#8217;ve updated our dependencies to be on the latest and greatest to ensure our transitive dependencies are up to date.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-security/"&gt;Project Site&lt;/a&gt; |
&lt;a href="http://docs.spring.io/spring-security/site/docs/5.1.0.RC1/reference/htmlsingle/"&gt;Reference&lt;/a&gt;
| &lt;a href="http://stackoverflow.com/questions/tagged/spring-security"&gt;Help&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Spring Data Ingalls SR15 and Kay SR10 released</title>
    <link rel="alternate" href="https://spring.io/blog/2018/09/10/spring-data-ingalls-sr15-and-kay-sr10-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Mark Paluch</name>
    </author>
    <id>tag:spring.io,2018-09-10:3386</id>
    <updated>2018-09-10T13:47:18Z</updated>
    <content type="html">&lt;p&gt;On behalf of the Spring Data team, I&amp;rsquo;d like to announce the availability of the Ingalls SR15 and Kay SR10 maintenance releases. Kay SR10 ships on top of the just-released Spring Framework 5.0.9. Spring Boot 2.0.5 is going to pick up Kay SR10 for your convenience. Ingalls SR15 will be picked up by Spring Boot 1.5.16. Both releases ship with mostly bugfixes and a few dependency upgrades.&lt;/p&gt;
&lt;p&gt;Ingalls SR15 ships with &lt;a href="https://jira.spring.io/issues/?filter=16150"&gt;40 tickets fixed&lt;/a&gt; and Kay SR10 contains &lt;a href="https://jira.spring.io/issues/?filter=16149"&gt;75 issues fixed&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also, make sure you register for this year&amp;rsquo;s &lt;a href="https://springoneplatform.io/"&gt;SpringOne Platform&lt;/a&gt; (Sept. 24th-27th, Washington, D.C.) to learn about the latest additions in Spring Data and even get a preview of the features planned for the next release train. The entire team will be on site and happy to answer questions and take feedback.&lt;/p&gt;
&lt;p&gt;To round things off, here are the links to the changelogs, documentation, and artifacts:&lt;/p&gt;&lt;h2&gt;&lt;a href="#ingalls-sr15" class="anchor" name="ingalls-sr15"&gt;&lt;/a&gt;Ingalls SR15&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Data Commons 1.13.15 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-commons/1.13.15.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/commons/docs/1.13.15.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/commons/docs/1.13.15.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/commons/docs/1.13.15.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JPA 1.11.15 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-jpa/1.11.15.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/jpa/docs/1.11.15.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/jpa/docs/1.11.15.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/jpa/docs/1.11.15.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data KeyValue 1.2.15 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-keyvalue/1.2.15.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/keyvalue/docs/1.2.15.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/keyvalue/docs/1.2.15.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/keyvalue/docs/1.2.15.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Solr 2.1.15 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-solr/2.1.15.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/solr/docs/2.1.15.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/solr/docs/2.1.15.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/solr/docs/2.1.15.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Gemfire 1.9.15 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-gemfire/1.9.15.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/gemfire/docs/1.9.15.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/gemfire/docs/1.9.15.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/gemfire/docs/1.9.15.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Neo4j 4.2.15 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-neo4j/4.2.15.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/neo4j/docs/4.2.15.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/neo4j/docs/4.2.15.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/neo4j/docs/4.2.15.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data MongoDB 1.10.15 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-mongodb/1.10.15.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/mongodb/docs/1.10.15.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/mongodb/docs/1.10.15.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/mongodb/docs/1.10.15.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Cassandra 1.5.15 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-cassandra/1.5.15.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/cassandra/docs/1.5.15.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/cassandra/docs/1.5.15.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/cassandra/docs/1.5.15.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data LDAP 1.0.15 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-ldap/1.0.15.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/ldap/docs/1.0.15.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/ldap/docs/1.0.15.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/ldap/docs/1.0.15.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Envers 1.1.15 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-envers/1.1.15.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/envers/docs/1.1.15.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/envers/docs/1.1.15.RELEASE/reference/html"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data REST 2.6.15 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-rest-webmvc/2.6.15.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/rest/docs/2.6.15.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/rest/docs/2.6.15.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/rest/docs/2.6.15.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Redis 1.8.15 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-redis/1.8.15.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/redis/docs/1.8.15.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/redis/docs/1.8.15.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/redis/docs/1.8.15.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Elasticsearch 2.1.15 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-elasticsearch/2.1.15.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/elasticsearch/docs/2.1.15.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/elasticsearch/docs/2.1.15.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/elasticsearch/docs/2.1.15.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Couchbase 2.2.15 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-couchbase/2.2.15.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/couchbase/docs/2.2.15.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/couchbase/docs/2.2.15.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/couchbase/docs/2.2.15.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;a href="#kay-sr10" class="anchor" name="kay-sr10"&gt;&lt;/a&gt;Kay SR10&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Data Commons 2.0.10 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-commons/2.0.10.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/commons/docs/2.0.10.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/commons/docs/2.0.10.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/commons/docs/2.0.10.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data JPA 2.0.10 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-jpa/2.0.10.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/jpa/docs/2.0.10.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/jpa/docs/2.0.10.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/jpa/docs/2.0.10.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data KeyValue 2.0.10 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-keyvalue/2.0.10.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/keyvalue/docs/2.0.10.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/keyvalue/docs/2.0.10.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/keyvalue/docs/2.0.10.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Solr 3.0.10 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-solr/3.0.10.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/solr/docs/3.0.10.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/solr/docs/3.0.10.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/solr/docs/3.0.10.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Gemfire 2.0.10 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-gemfire/2.0.10.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/gemfire/docs/2.0.10.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/gemfire/docs/2.0.10.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/gemfire/docs/2.0.10.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Neo4j 5.0.10 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-neo4j/5.0.10.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/neo4j/docs/5.0.10.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/neo4j/docs/5.0.10.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/neo4j/docs/5.0.10.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data MongoDB 2.0.10 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-mongodb/2.0.10.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/mongodb/docs/2.0.10.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/mongodb/docs/2.0.10.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/mongodb/docs/2.0.10.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Cassandra 2.0.10 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-cassandra/2.0.10.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/cassandra/docs/2.0.10.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/cassandra/docs/2.0.10.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/cassandra/docs/2.0.10.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Geode 2.0.10 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-geode/2.0.10.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/geode/docs/2.0.10.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/geode/docs/2.0.10.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/geode/docs/2.0.10.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data LDAP 2.0.10 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-ldap/2.0.10.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/ldap/docs/2.0.10.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/ldap/docs/2.0.10.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/ldap/docs/2.0.10.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Envers 2.0.10 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-envers/2.0.10.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/envers/docs/2.0.10.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/envers/docs/2.0.10.RELEASE/reference/html"&gt;Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data REST 3.0.10 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-rest-webmvc/3.0.10.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/rest/docs/3.0.10.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/rest/docs/3.0.10.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/rest/docs/3.0.10.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Redis 2.0.10 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-redis/2.0.10.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/redis/docs/2.0.10.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/redis/docs/2.0.10.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/redis/docs/2.0.10.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Elasticsearch 3.0.10 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-elasticsearch/3.0.10.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/elasticsearch/docs/3.0.10.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/elasticsearch/docs/3.0.10.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/elasticsearch/docs/3.0.10.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Couchbase 3.0.10 - &lt;a href="https://repo.spring.io/libs-release/org/springframework/data/spring-data-couchbase/3.0.10.RELEASE"&gt;Artifacts&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/couchbase/docs/3.0.10.RELEASE/api"&gt;Javadoc&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/couchbase/docs/3.0.10.RELEASE/reference/html"&gt;Documentation&lt;/a&gt; - &lt;a href="http://docs.spring.io/spring-data/couchbase/docs/3.0.10.RELEASE/changelog.txt"&gt;Changelog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Spring Vault 2.0.2 released</title>
    <link rel="alternate" href="https://spring.io/blog/2018/09/10/spring-vault-2-0-2-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Mark Paluch</name>
    </author>
    <id>tag:spring.io,2018-09-10:3387</id>
    <updated>2018-09-10T13:39:30Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;On behalf of the community, I&amp;#8217;d like to announce the availability of the Spring Vault service release 2.0.2.RELEASE, available from Maven Central.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This release primarily delivers bug fixes and dependency version updates along with some minor improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;For a complete list of changes see the &lt;a href="http://docs.spring.io/spring-vault/docs/2.0.2.RELEASE/changelog.txt"&gt;changelog&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-vault/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-vault"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-vault/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-vault/docs/2.0.2.RELEASE/reference/html/"&gt;Documentation&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-vault"&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Spring Vault 2.1 goes RC</title>
    <link rel="alternate" href="https://spring.io/blog/2018/09/10/spring-vault-2-1-goes-rc" />
    <category term="releases" label="Releases" />
    <author>
      <name>Mark Paluch</name>
    </author>
    <id>tag:spring.io,2018-09-10:3385</id>
    <updated>2018-09-10T07:55:21Z</updated>
    <content type="html">&lt;p&gt;On behalf of the community, I&amp;rsquo;d like to announce the availability of the Spring Vault 2.1 release candidate. Spring Vault 2.1 requires JDK 8 or higher and specifically supports JDK 11 as the next long-term support release. This release ships with 15 tickets fixed along with some refinements for Java 9 to 11. The most notable changes are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Support for Azure authentication with managed service instances on VMs.&lt;/li&gt;
  &lt;li&gt;GCP IAM authentication support on behalf of service accounts.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This release is compatible with Vault versions from &lt;code&gt;0.5.2&lt;/code&gt; up to &lt;code&gt;0.11.1&lt;/code&gt;.&lt;/p&gt;&lt;h2&gt;&lt;a href="#next-steps" class="anchor" name="next-steps"&gt;&lt;/a&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;We are aiming for a GA release in early October and expect bugfixes along with dependency upgrades. We&amp;rsquo;re working towards the next Spring Vault 2.2 release to ship with annotation-based configuration for the versioned Vault key-value backend.&lt;/p&gt;
&lt;p&gt;For a complete list of changes see the &lt;a href="http://docs.spring.io/spring-vault/docs/2.1.0.RC1/changelog.txt"&gt;changelog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-vault/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-vault"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-vault/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-vault/docs/2.1.0.RC1/reference/html/"&gt;Documentation&lt;/a&gt; | &lt;a href="https://github.com/mp911de/spring-cloud-vault-config-samples/"&gt;Examples&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-vault"&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Bootiful GCP: Use Spring Cloud GCP to Connect to Other GCP Services (7/8)</title>
    <link rel="alternate" href="https://spring.io/blog/2018/09/10/bootiful-gcp-use-spring-cloud-gcp-to-connect-to-other-gcp-services-7-8" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2018-08-18:3369</id>
    <updated>2018-09-10T00:00:00Z</updated>
    <content type="html">&lt;blockquote&gt;
  &lt;p&gt;Hi Spring fans! In this brief 8 part series we’re going to look at the Spring Cloud integration for Google Cloud Platform, called Spring Cloud GCP. &lt;a href="https://cloud.spring.io/spring-cloud-gcp/"&gt;Spring Cloud GCP&lt;/a&gt; represents a joint effort between Google and Pivotal that endeavors to provide a first class experience for Spring Cloud developers when using the Google Cloud Platform. Pivotal Cloud Foundry users will enjoy an even &lt;a href="https://docs.pivotal.io/partners/gcp-sb/index.html"&gt;easier integration with the GCP service broker&lt;/a&gt;. I wrote these installments with input from Google Cloud Developer Advocate, and my buddy, &lt;a href="http://twitter.com/saturnism"&gt;Ray Tsang&lt;/a&gt;. You can also catch a walkthrough of Spring Cloud GCP in our Google Next 2018 session, &lt;a href="https://www.youtube.com/watch?v=2Jo3vy7iQf8"&gt;Bootiful Google Cloud Platform&lt;/a&gt;. Thanks buddy! As always, &lt;a href="http://twitter.com/starbuxman"&gt;I&amp;rsquo;d love to hear from you if you have feedback&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The Spring Cloud GCP project strives to provide integrations with Spring and some of the GCP services that map well to Spring. But GCP is &lt;em&gt;vast&lt;/em&gt;! There are a good deal many other services out there that you can consume via &lt;a href="https://github.com/GoogleCloudPlatform/google-cloud-java/"&gt;their direct Java SDK&lt;/a&gt; or even through their REST APIs, directly. Spring Cloud GCP can make working with those APIs a bit easier, too! In this section, we’re going to integrate with the Google Cloud Vision API which supports analyzing images and doing feature detection.&lt;/p&gt;
&lt;p&gt;As always, you will need to enable the API:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint shell"&gt;gcloud services enable vision.googleapis.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you use the auto-configurations in Spring Cloud GCP they conveniently obtain the required OAuth scopes to work with a given API on your behalf, and you never need to worry about it. We’ll need to do this work ourselves for other services. This is easy enough, thankfully. Use the &lt;code&gt;spring.cloud.gcp.credentials.scopes&lt;/code&gt; property to obtain a general, platform-wide, catch-all scope that can be used to request permission for all basic Google Cloud Platform APIs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;src/main/resources/applications.properties.&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;spring.cloud.gcp.credentials.scopes=https://www.googleapis.com/auth/cloud-platform&#xD;
spring.cloud.gcp.credentials.encoded-key=FIXME
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And.. that’s it! Now you can use the API as you like. Let’s standup a simple REST API to which you can post an image as a multipart file upload and have the Google Cloud Vision API do feature detection.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;package com.example.gcp.vision;&#xD;
&#xD;
import com.google.api.gax.core.CredentialsProvider;&#xD;
import com.google.cloud.vision.v1.*;&#xD;
import com.google.protobuf.ByteString;&#xD;
import lombok.extern.slf4j.Slf4j;&#xD;
import org.springframework.boot.SpringApplication;&#xD;
import org.springframework.boot.autoconfigure.SpringBootApplication;&#xD;
import org.springframework.context.annotation.Bean;&#xD;
import org.springframework.web.bind.annotation.PostMapping;&#xD;
import org.springframework.web.bind.annotation.RequestParam;&#xD;
import org.springframework.web.bind.annotation.RestController;&#xD;
import org.springframework.web.multipart.MultipartFile;&#xD;
&#xD;
import java.io.IOException;&#xD;
import java.util.Collections;&#xD;
&#xD;
// curl -F &amp;quot;image=@$HOME/Pictures/soup.jpg&amp;quot; http://localhost:8080/analyze&#xD;
@SpringBootApplication&#xD;
public class VisionApplication {&#xD;
&#xD;
        &#xD;
        @Bean&#xD;
        ImageAnnotatorClient imageAnnotatorClient(&#xD;
            CredentialsProvider credentialsProvider) throws IOException {&#xD;
                ImageAnnotatorSettings settings = ImageAnnotatorSettings&#xD;
                    .newBuilder()&#xD;
                    .setCredentialsProvider(credentialsProvider)&#xD;
                    .build();&#xD;
                return ImageAnnotatorClient.create(settings);&#xD;
        }&#xD;
&#xD;
        @Slf4j&#xD;
        @RestController&#xD;
        public static class ImageAnalyzerRestController {&#xD;
&#xD;
                private final ImageAnnotatorClient client;&#xD;
&#xD;
                &#xD;
                private final Feature labelDetection = Feature.newBuilder().setType(Feature.Type.LABEL_DETECTION).build();&#xD;
                private final Feature textDetection = Feature.newBuilder().setType(Feature.Type.DOCUMENT_TEXT_DETECTION).build();&#xD;
&#xD;
                ImageAnalyzerRestController(ImageAnnotatorClient client) {&#xD;
                        this.client = client;&#xD;
                }&#xD;
&#xD;
                @PostMapping(&amp;quot;/analyze&amp;quot;)&#xD;
                String analyze(@RequestParam MultipartFile image) throws IOException {&#xD;
                        &#xD;
                        byte[] data = image.getBytes();&#xD;
                        ByteString imgBytes = ByteString.copyFrom(data);&#xD;
                        Image img = Image.newBuilder().setContent(imgBytes).build();&#xD;
&#xD;
                        AnnotateImageRequest request = AnnotateImageRequest&#xD;
                            .newBuilder()&#xD;
                            .addFeatures(this.labelDetection)&#xD;
                            .addFeatures(this.textDetection)&#xD;
                            .setImage(img)&#xD;
                            .build();&#xD;
                        BatchAnnotateImagesResponse responses = this.client&#xD;
                            .batchAnnotateImages(Collections.singletonList(request));&#xD;
                        AnnotateImageResponse reply = responses.getResponses(0);&#xD;
                        return reply.toString();&#xD;
                }&#xD;
        }&#xD;
&#xD;
        public static void main(String args[]) {&#xD;
                SpringApplication.run(VisionApplication.class, args);&#xD;
        }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;we’re configuring the Google Cloud Vision client manually. This is more work than you might do if you had a Spring Boot starter, but it’s definitely not bad!&lt;/li&gt;
  &lt;li&gt;what kind of analysis do we want the client to do?&lt;/li&gt;
  &lt;li&gt;Spring MVC can turn multipart file uploads into a &lt;code&gt;MultipartFile&lt;/code&gt; from which we can easily extract bytes to feed into this API.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can POST an image to this endpoint using &lt;code&gt;curl&lt;/code&gt; or any other general purpose HTTP client. Here’s how it would work with:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;curl&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint shell"&gt;curl  -F &amp;quot;image=@/home/jlong/Desktop/soup.jpg&amp;quot; http://localhost:8080/analyze
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are a &lt;em&gt;zillion&lt;/em&gt; other APIs with whom you might work! Here we are only just beginning to scratch the surface of what’s possible. Check &lt;a href="https://cloud.google.com/products/"&gt;out this service catalog&lt;/a&gt;! There are things like Google Cloud DataStore, Google Storage, Firebase, BigQuery, Apigee, video streaming services, IoT services, machine learning, Google Tensorflow, Google Dataflow, Google Cloud AutoML, Cloud Natural Language, Cloud Speech-to-Text, Cloud Text-to-Speech, Genomics APIs, Video Intelligence, and &lt;em&gt;so&lt;/em&gt; much more.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Framework 5.1 RC3, 5.0.9 and 4.3.19 available now</title>
    <link rel="alternate" href="https://spring.io/blog/2018/09/07/spring-framework-5-1-rc3-5-0-9-and-4-3-19-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>Stéphane Nicoll</name>
    </author>
    <id>tag:spring.io,2018-09-07:3383</id>
    <updated>2018-09-07T15:15:11Z</updated>
    <content type="html">&lt;p&gt;On behalf of the team, I am pleased to announce Spring Framework 5.1 RC3, 5.0.9 and 4.3.19 &lt;a href="http://projects.spring.io/spring-framework"&gt;are available now&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Spring Framework 5.0.9 &lt;a href="https://jira.spring.io/secure/ReleaseNote.jspa?projectId=10000&amp;version=16891"&gt;includes 36 fixes and selected improvements&lt;/a&gt; while Spring Framework 4.3.19 &lt;a href="https://jira.spring.io/secure/ReleaseNote.jspa?projectId=10000&amp;version=16856"&gt;includes 23 fixes and selected improvements&lt;/a&gt;. We&amp;rsquo;re also approaching Spring Framework 5.1 with a third release candidate that includes &lt;a href="https://jira.spring.io/secure/ReleaseNote.jspa?projectId=10000&amp;version=16939"&gt;30 fixes and improvements&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As usual, those are the base for the upcoming Spring Boot 2.1 M3, 2.0.5 and 1.5.16 releases early next week.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://spring.io/projects/spring-framework"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-framework"&gt;GitHub&lt;/a&gt; | &lt;a href="https://jira.spring.io/browse/SPR"&gt;Issues&lt;/a&gt; | &lt;a href="https://docs.spring.io/spring-framework/docs/5.0.9.RELEASE/spring-framework-reference"&gt;Documentation&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Bootiful GCP: Supporting Observability with Spring Cloud GCP Stackdriver Trace (6/8)</title>
    <link rel="alternate" href="https://spring.io/blog/2018/09/06/bootiful-gcp-supporting-observability-with-spring-cloud-gcp-stackdriver-trace-6-8" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2018-08-18:3368</id>
    <updated>2018-09-06T00:00:00Z</updated>
    <content type="html">&lt;blockquote&gt;
  &lt;p&gt;Hi Spring fans! In this brief series we’re going to look at the Spring Cloud integration for Google Cloud Platform, called Spring Cloud GCP. &lt;a href="https://cloud.spring.io/spring-cloud-gcp/"&gt;Spring Cloud GCP&lt;/a&gt; represents a joint effort between Google and Pivotal that endeavors to provide a first class experience for Spring Cloud developers when using the Google Cloud Platform. Pivotal Cloud Foundry users will enjoy an even &lt;a href="https://docs.pivotal.io/partners/gcp-sb/index.html"&gt;easier integration with the GCP service broker&lt;/a&gt;. These installments were written with help from Google Cloud Developer Advocate, and my buddy, &lt;a href="http://twitter.com/saturnism"&gt;Ray Tsang&lt;/a&gt;. You can also catch a walkthrough of Spring Cloud GCP in our Google Next 2018 session, &lt;a href="https://www.youtube.com/watch?v=2Jo3vy7iQf8"&gt;Bootiful Google Cloud Platform&lt;/a&gt;. Thanks buddy!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As we move more and more applications to the cloud, and introduce more and more microservices, the complexity of understanding what’s gone wrong - and &lt;em&gt;where??&lt;/em&gt; - grows. Distributed tracing addresses this problem. Distributed tracing, in theory, is a simple chore. For every request that enters or exits the system.. for every ingres or egress int he system, attach a UUID if one isnt already present and if it is present then propagate it. Unfortunately, this sort of logic is tedious and hard to get right as requests move from one node to another, synchronously and asynchrously, across thread and network boundaries. Spring Cloud Sleuth addresses this problem and provides an SPI into which backend distributed tracing systems, like OpenZipkin and Google Cloud Stack Driver, can plugin.&lt;/p&gt;
&lt;p&gt;As with all GCP APIs, we must first enable this one.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint shell"&gt;gcloud services enable cloudtrace.googleapis.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We’re going to setup a trivial REST API and a trivial REST client, and use the Spring Cloud GCP Stack Driver support to make short work of tracing those interactions.&lt;/p&gt;
&lt;p&gt;Let’s first look at our trivial REST API. Start a new project (using the skeletal &lt;code&gt;pom.xml&lt;/code&gt; from above) and add &lt;code&gt;org.springframework.boot&lt;/code&gt; : &lt;code&gt;spring-boot-starter-web&lt;/code&gt; and &lt;code&gt;org.springframework.cloud&lt;/code&gt; : &lt;code&gt;spring-cloud-gcp-starter-trace&lt;/code&gt;. Our REST API (well, endpoint, anyway) will return a &amp;ldquo;greetings, &lt;em&gt;a name here&lt;/em&gt;!&amp;rdquo; whenever &lt;code&gt;http://localhost:8080/greeting/{id}}&lt;/code&gt; is invoked. Here’s the code for the service, first:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;package com.example.gcp.trace;&#xD;
&#xD;
import org.springframework.boot.SpringApplication;&#xD;
import org.springframework.boot.autoconfigure.SpringBootApplication;&#xD;
import org.springframework.web.bind.annotation.GetMapping;&#xD;
import org.springframework.web.bind.annotation.PathVariable;&#xD;
import org.springframework.web.bind.annotation.RestController;&#xD;
&#xD;
@RestController&#xD;
@SpringBootApplication&#xD;
public class TraceServiceApplication {&#xD;
&#xD;
        @GetMapping(&amp;quot;/greeting/{id}&amp;quot;)&#xD;
        String greet(@PathVariable String id) {&#xD;
                return &amp;quot;greetings, &amp;quot; + id + &amp;quot;!&amp;quot;;&#xD;
        }&#xD;
&#xD;
        public static void main(String args[]) {&#xD;
                SpringApplication.run(TraceServiceApplication.class, args);&#xD;
        }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The configuration is arguably more interesting.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;src/main/resources/application.properties.&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint properties"&gt;spring.cloud.gcp.trace.enabled=true&#xD;
&#xD;
&#xD;
spring.sleuth.sampler.probability=1&#xD;
spring.sleuth.web.skipPattern=(^cleanup.*|.+favicon.*)&#xD;
&#xD;
&#xD;
server.port=8081&#xD;
&#xD;
&#xD;
spring.application.name=trace-service
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;we are opting-in to the trace support for Spring Cloud GCP. You could disable it when running the code on localhost but enable it in production with this flag.&lt;/li&gt;
  &lt;li&gt;these properties tell Spring Cloud Sleuth to trace everything (a &amp;ldquo;probability&amp;rdquo; of 1.0 means 100% of all observed requests will be sampled and traced).&lt;/li&gt;
  &lt;li&gt;if you’re running this demo on the same machine then you’ll want to avoid port conflicts in the client&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;spring.application.name&lt;/code&gt; is our application’s logical name and it can be used in distinguishing it from other applications in trace trees, service registries, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The client lobs a hundred HTTP requests when the application starts up. The &lt;code&gt;RestTemplate&lt;/code&gt; it uses has been post-processed by the Spring Cloud Sleuth auto-configuration to intercept and trace all HTTP calls.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;package com.example.gcp.trace;&#xD;
&#xD;
import lombok.extern.slf4j.Slf4j;&#xD;
import org.springframework.boot.SpringApplication;&#xD;
import org.springframework.boot.autoconfigure.SpringBootApplication;&#xD;
import org.springframework.boot.context.event.ApplicationReadyEvent;&#xD;
import org.springframework.cloud.sleuth.annotation.NewSpan;&#xD;
import org.springframework.context.annotation.Bean;&#xD;
import org.springframework.context.event.EventListener;&#xD;
import org.springframework.stereotype.Component;&#xD;
import org.springframework.web.client.RestTemplate;&#xD;
&#xD;
import java.util.stream.IntStream;&#xD;
&#xD;
@Slf4j&#xD;
@SpringBootApplication&#xD;
public class TraceClientApplication {&#xD;
&#xD;
        @Component&#xD;
        public static class Client {&#xD;
&#xD;
                private final RestTemplate restTemplate;&#xD;
&#xD;
                public Client(RestTemplate restTemplate) {&#xD;
                        this.restTemplate = restTemplate;&#xD;
                }&#xD;
&#xD;
                @EventListener(ApplicationReadyEvent.class)&#xD;
                @NewSpan(&amp;quot;client&amp;quot;) &#xD;
                public void before() {&#xD;
                        IntStream&#xD;
                            .range(0, 100)&#xD;
                            .mapToObj(i -&amp;gt;&#xD;
                                restTemplate&#xD;
                                    .getForEntity(&amp;quot;http://localhost:8081/greeting/{id}&amp;quot;, String.class, i)&#xD;
                                    .getBody())&#xD;
                            .forEach(response -&amp;gt; log.info(&amp;quot;result: &amp;quot; + response));&#xD;
                }&#xD;
        }&#xD;
&#xD;
        @Bean&#xD;
        RestTemplate restTemplate() {&#xD;
                return new RestTemplate();&#xD;
        }&#xD;
&#xD;
        public static void main(String args[]) {&#xD;
                SpringApplication.run(TraceClientApplication.class, args);&#xD;
        }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;the client is a straightforward use of &lt;code&gt;RestTemplate&lt;/code&gt; to connect to our service. If we wanted to send 100 requests with no shared parent span, we wouldn’t need &lt;code&gt;@NewSpan&lt;/code&gt;. If we’d had 100 requests arrive from the outside and hit an HTTP endpoint in the client and that endpoint then resulted in 100 requests going to the service, we’d have a shared overarching span. A single trace with multiple spans.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And the configuration for this node is virtually identical to that of the service.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint properties"&gt;spring.cloud.gcp.trace.enabled=true&#xD;
&#xD;
spring.sleuth.sampler.probability=1&#xD;
spring.sleuth.web.skipPattern=(^cleanup.*|.+favicon.*)&#xD;
&#xD;
spring.application.name=trace-client&#xD;
&#xD;
server.port=8080
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;enable Spring Cloud GCP tracing..&lt;/li&gt;
  &lt;li&gt;ensure that all requests are traced&lt;/li&gt;
  &lt;li&gt;give our client a logical name&lt;/li&gt;
  &lt;li&gt;and start on a different port than the service&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In order to see this in action, you’ll need to start the service, then the client, and then make your way over to the &lt;a href="https://console.cloud.google.com/"&gt;Google Cloud Console&lt;/a&gt;. Click on the &amp;ldquo;Hamburger&amp;rdquo;menu on the left hand side of the screen and click on STACKDRIVER ? TRACE. There you’ll be given the ability to inspect the requests that just flew through your services.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://pbs.twimg.com/media/Dk6aAXJU0AAe5Md.jpg:large" alt="Looking at trace information in the Google Cloud Console" /&gt;&lt;/p&gt;
&lt;p&gt;Stackdriver is the umbrella name for a host of services including monitoring, tracing, and - and this is &lt;em&gt;so wicked cool!&lt;/em&gt; - live debugging of running applications. You could easily spend a lot more time - you &lt;em&gt;should&lt;/em&gt;! - in this section of the console. Suffice it to say that Google is &lt;em&gt;gets&lt;/em&gt; observability and that’s reflected in their services.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - September 4th, 2018</title>
    <link rel="alternate" href="https://spring.io/blog/2018/09/05/this-week-in-spring-september-4th-2018" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2018-09-05:3382</id>
    <updated>2018-09-05T04:57:31Z</updated>
    <content type="html">&lt;p&gt;Hi Spring fans and welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! If you&amp;rsquo;re in the US, I hope you enjoyed your Labor Day weekend. I certainly did, gorging on the San Francisco sun and preparing for my O&amp;rsquo;Reilly online training for tomorrow, &lt;a href="https://www.safaribooksonline.com/live-training/courses/spring-boot-and-kotlin/0636920202899/"&gt;&lt;em&gt;Bootiful Kotlin&lt;/em&gt;&lt;/a&gt;. I&amp;rsquo;m also busily preparing for the epic &lt;a href="https://springonetour.io/2018/istanbul"&gt;SpringOne Tour event in Istanbul, Turkey&lt;/a&gt;, customer visits in Atlanta, GA, and of course the &lt;em&gt;epic&lt;/em&gt; tentpole SpringOne Platform event coming up later this month in Washington DC. If you&amp;rsquo;re around, I sure hope to see you!&lt;/p&gt;
&lt;p&gt;Well, let&amp;rsquo;s get to it!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;In this fifth installment of my series looking at Spring Cloud GCP for Google Cloud, I introduce &lt;a href="https://spring.io/blog/2018/09/03/bootiful-gcp-runtime-configuration-with-spring-cloud-gcp-runtime-config-5-8"&gt;Google Cloud&amp;rsquo;s support for runtime configuration&lt;/a&gt; and how to use it for Spring Cloud applications.&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Geode John Blum has just announced that &lt;a href="https://spring.io/blog/2018/08/31/spring-boot-for-apache-geode-pivotal-gemfire-1-0-0-m2-released"&gt;Spring Boot for Apache Geode &amp;amp; Pivotal GemFire 1.0.0.M2&lt;/a&gt;!&lt;/li&gt;
  &lt;li&gt;Spring Data for Apache Geode lead John Blum &lt;a href="https://spring.io/blog/2018/08/30/spring-session-for-apache-geode-pivotal-gemfire-2-0-5-release-and-2-1-0-m1-released"&gt;also just announced Spring Session for Apache Geode 2.0.5 and 2.1.0.M1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Security ninja Josh Cummings just announced &lt;a href="https://spring.io/blog/2018/08/29/spring-security-oauth2-boot-auto-config-2-0-4-2-1-0-m2-released"&gt;the auto-configuration for Spring Security OAuth2 Boot Auto-config, 2.0.4 &amp;amp; 2.1.0.M2&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Vick Kelkar has a nice post on &lt;a href="https://dzone.com/articles/redis-enterprise-kubernetes-release-on-pivotal-con"&gt;using Redis Enterprise&amp;rsquo;s Kubernetes release on Pivotal Container Service&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Prasanth Mohan has a nice post &lt;a href="https://dzone.com/articles/spring-boot-messaging-with-rabbitmq-pubsub-in-pcf"&gt;on using Spring Boot with RabbitMQ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This is pretty interesting: Emil Forslund looks at using the Speedment Free version and the &lt;code&gt;spring-generator&lt;/code&gt; to &lt;a href="https://dzone.com/articles/auto-generate-a-rest-api-from-a-database-with-spri"&gt;generate a complete Spring application to serve a simple REST API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://blog.usejournal.com/why-is-pivotals-dojo-so-good-c96cdb497ddf"&gt;Why is Pivotal’s DOJO so good? – Noteworthy - The Journal Blog&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://jaxenter.com/java-influencers-series-4-148837.html"&gt;It&amp;rsquo;s time to put a spotlight on ZGC and dim Nashorn&amp;rsquo;s star: Java influencers weigh in - JAXenter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I&amp;rsquo;m speaking with the amazing Trisha Gee, fellow Java Champion and legend, at Oracle&amp;rsquo;s CodeOne conference later this year. We&amp;rsquo;ll be talking about reactive Spring, Kotloin, MongoDB and JavaFX. I did a quick promotional &lt;a href="https://www.youtube.com/watch?v=KTuH551BgAc&amp;feature=youtu.be"&gt;video for Oracle which you can watch here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;In this fourth installment of my series looking at Spring Cloud GCP and Google Cloud, I looked at integration &lt;a href="https://twitter.com/springcentral/status/1035625370995707904"&gt;with Google Cloud Pub/Sub and Spring Cloud&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Check out the status &lt;a href="https://github.com/orgs/spring-projects/projects/1"&gt;of the Spring projects&lt;/a&gt; so you can see what&amp;rsquo;s coming and who&amp;rsquo;s doing what&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Bootiful GCP: Runtime Configuration with Spring Cloud GCP Runtime Config (5/8)</title>
    <link rel="alternate" href="https://spring.io/blog/2018/09/03/bootiful-gcp-runtime-configuration-with-spring-cloud-gcp-runtime-config-5-8" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2018-08-18:3367</id>
    <updated>2018-09-03T00:00:00Z</updated>
    <content type="html">&lt;blockquote&gt;
  &lt;p&gt;Hi Spring fans! In this brief 8 part series we’re going to look at the Spring Cloud integration for Google Cloud Platform, called Spring Cloud GCP. &lt;a href="https://cloud.spring.io/spring-cloud-gcp/"&gt;Spring Cloud GCP&lt;/a&gt; represents a joint effort between Google and Pivotal that endeavors to provide a first class experience for Spring Cloud developers when using the Google Cloud Platform. Pivotal Cloud Foundry users will enjoy an even &lt;a href="https://docs.pivotal.io/partners/gcp-sb/index.html"&gt;easier integration with the GCP service broker&lt;/a&gt;. I wrote these installments with input from Google Cloud Developer Advocate, and my buddy, &lt;a href="http://twitter.com/saturnism"&gt;Ray Tsang&lt;/a&gt;. You can also catch a walkthrough of Spring Cloud GCP in our Google Next 2018 session, &lt;a href="https://www.youtube.com/watch?v=2Jo3vy7iQf8"&gt;Bootiful Google Cloud Platform&lt;/a&gt;. Thanks buddy! As always, &lt;a href="http://twitter.com/starbuxman"&gt;I&amp;rsquo;d love to hear from you if you have feedback&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you&amp;rsquo;re just joining us, be sure to read the previous installments including:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2018/08/20/bootiful-gcp-getting-started-with-spring-cloud-for-google-cloud-platform-1-8"&gt;Bootiful GCP: Getting Started with Spring Cloud for Google Cloud Platform (1/8)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2018/08/23/bootiful-gcp-relational-data-access-with-spring-cloud-gcp-2-8"&gt;Bootiful GCP: Relational Data Access with Spring Cloud GCP (2/8)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2018/08/27/bootiful-gcp-globally-consistent-data-access-with-spanner-3-8"&gt;Bootiful GCP: Globally Consistent Data Access with Spanner (3/8)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2018/08/30/bootiful-gcp-integration-with-google-cloud-pub-sub-4-8"&gt;Bootiful GCP: Integration with Google Cloud Pub/Sub (4/8)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So far we’ve looked at some simple examples with all but the most trivial of configuration. Where there was configuration, we specified it in &lt;code&gt;application.properties&lt;/code&gt;. This approach works but there are limitations. What about centrality (making a single config value accessible to a number of other clients), security (storing secrets securely), live reconfiguration, and auditing and journaling? There are a number of other solutions out there that address some or all of these use cases including Apache Zookeeper, Hashicorp Consul, Hashicorp Vault (for secrets management, specifically), and - of course - the Spring Cloud Config Server. All fine choices, but you’d better have a recipe for scaling out and securing these pieces of infrastructure. GCP offers an alternative, Google Cloud RuntimeConfig, that you can use with no change to existing code, thanks to the power of Spring’s abstractions.&lt;/p&gt;
&lt;p&gt;Let’s look at how to establish a configuration value and then reference that value from our application. We’ll also look at how to later update that configuration live, without restarting the application.&lt;/p&gt;
&lt;p&gt;First, we’ll need to enable this API.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint shell"&gt;gcloud services enable runtimeconfig.googleapis.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s think through how we want to use this configuration. We’ll probably have configuration values that make sense when running the application on our local machines. Values that we can source from a built-in &lt;code&gt;application.properties&lt;/code&gt; or &lt;code&gt;application.yaml&lt;/code&gt;. These are the default values that apply to the application. There are going to be some values that are visible only in production -locators, credentials, etc. - that are unique to production. These values might be visible when running under the &lt;code&gt;cloud&lt;/code&gt; profile, for example. We’re going to source those values - when running under the &lt;code&gt;cloud&lt;/code&gt; profile - from Google Cloud Runtime Config. This way we can selectively override important values.&lt;/p&gt;
&lt;p&gt;We must first create a runtime configuration, and then add a variable value to that configuration.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint shell"&gt;gcloud beta runtime-config configs create reservations_cloud
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then, register a variable (&lt;code&gt;greeting&lt;/code&gt;) and that variable’s value (&lt;code&gt;Hello GCP&lt;/code&gt;) in the just-created runtime config.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint shell"&gt;gcloud beta runtime-config configs variables set greeting  &amp;quot;Hello GCP&amp;quot;  --config-name reservations_cloud
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can enumerate all the configuration for a given config set like&lt;br/&gt;this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint shell"&gt;gcloud beta runtime-config configs variables list --config-name=reservations_cloud
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Spring Cloud GCP will need to do its work &lt;em&gt;before&lt;/em&gt; most of the Spring application is running since it is a property source that feeds values into other configuration. Thus, any configuration that it requires to do its work must be accessible earlier than the configuration in the usual suspects like &lt;code&gt;application.properties&lt;/code&gt;. It is a convention in Spring Cloud that such configuration live in &lt;code&gt;bootstrap.properties&lt;/code&gt;. Let’s disable Spring Cloud GCP Runtime Config when running on the local machine, without any particular Spring profile active.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;src/main/resources/bootstrap.properties.&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint properties"&gt;spring.cloud.gcp.config.enabled=false&#xD;
spring.cloud.gcp.config.credentials.location=${spring.cloud.gcp.credentials.location}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we’re running in production, in, say, Cloud Foundry, we’ll want to activate the &lt;code&gt;cloud&lt;/code&gt; profile, at which point the Spring Cloud GCP Runtime Config client will kick in and source config from GCP. Spring Boot is smart about loading any profile-specific configuration in adition to default configuration. You need only suffix your configuration file with &lt;code&gt;-${YOUR_PROFILE}&lt;/code&gt;: e.g.: &lt;code&gt;application-foo.properties&lt;/code&gt;, or &lt;code&gt;bootstrap-bar.yml&lt;/code&gt; for Spring profiles &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; respectively. Let’s configure Spring Cloud GCP for when the &lt;code&gt;cloud&lt;/code&gt; profile is active.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;src/main/resources/bootstrap-cloud.properties.&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;spring.cloud.gcp.config.enabled=true&#xD;
spring.cloud.gcp.config.name=reservations&#xD;
spring.cloud.gcp.config.profile=cloud
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt;
  &lt;p&gt;The combination of&lt;br/&gt;&lt;code&gt;${spring.cloud.gcp.config.name}_${spring.cloud.gcp.config.profile}&lt;/code&gt;&lt;br/&gt;forms &lt;code&gt;reservations_cloud&lt;/code&gt;, which is the name of the Runtime&lt;br/&gt;Configuration we’ve just created.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We will configure some overall properties that will serve as the defaults, absent any overrides, in &lt;code&gt;src/main/resources/application.properties&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;src/main/resources/application.properties.&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint properties"&gt;management.endpoint.health.show-details=always&#xD;
management.endpoints.web.exposure.include=*&#xD;
&#xD;
greeting = Hello ${user.name} (running on ${os.name} ${os.version})!
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;
  &lt;p&gt;we want to, for this DEMO, expose all the Actuator endpoints to be able to interrogate them. In &lt;strong&gt;any&lt;/strong&gt; other context: configure security!&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;we want to include all the Actuator endpoints&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s turn now to the Java code. You’ll need to add the following dependencies to your build: &lt;code&gt;org.springframework.boot&lt;/code&gt; : &lt;code&gt;spring-boot-starter-web&lt;/code&gt;, &lt;code&gt;org.springframework.boot&lt;/code&gt; : &lt;code&gt;spring-boot-starter-actuator&lt;/code&gt;, &lt;code&gt;org.springframework.cloud&lt;/code&gt; : &lt;code&gt;spring-cloud-gcp-starter-config&lt;/code&gt;. We add the Spring Cloud GCP dependency to get the correct configuration for the Runtime Config support. We add Spring Boot Actuator so we have access to a few operational endpoints, &lt;code&gt;/actuator/env&lt;/code&gt; and &lt;code&gt;/actuator/refresh&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let’s see some code!&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;package com.example.gcp.runtimeconfig;&#xD;
&#xD;
import org.springframework.beans.factory.annotation.Value;&#xD;
import org.springframework.boot.SpringApplication;&#xD;
import org.springframework.boot.autoconfigure.SpringBootApplication;&#xD;
import org.springframework.cloud.context.config.annotation.RefreshScope;&#xD;
import org.springframework.web.bind.annotation.GetMapping;&#xD;
import org.springframework.web.bind.annotation.RestController;&#xD;
&#xD;
@SpringBootApplication&#xD;
public class RuntimeConfigApplication {&#xD;
&#xD;
        @RefreshScope &#xD;
        @RestController&#xD;
        public static class GreetingsRestController {&#xD;
&#xD;
                private final String greetings;&#xD;
&#xD;
                &#xD;
                GreetingsRestController(@Value(&amp;quot;${greeting}&amp;quot;) String greetings) {&#xD;
                        this.greetings = greetings;&#xD;
                }&#xD;
&#xD;
                @GetMapping(&amp;quot;/greeting&amp;quot;)&#xD;
                String greetings() {&#xD;
                        return this.greetings;&#xD;
                }&#xD;
        }&#xD;
&#xD;
        public static void main(String[] args) {&#xD;
                SpringApplication.run(RuntimeConfigApplication.class, args);&#xD;
        }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;
  &lt;p&gt;this annotation supports revising and refreshing the configuration for this bean. We can trigger a refresh event and observe updated configuration in the bean&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;we’re injecting the key from the property file or from GCP Runtime Config. Code-wise, it’s exactly the same.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Run this program with no profile active and you should see something like &lt;code&gt;Hello jlong!&lt;/code&gt; when you hit the endpoint at &lt;code&gt;http://localhost:8080/greeting&lt;/code&gt;.Hit this environment Actuator endpoint (&lt;code&gt;http://localhost:8080/actuator/env&lt;/code&gt;) and you will find no mention of our GCP Runtime Config configuration. Now, run the program with the &lt;code&gt;cloud&lt;/code&gt; profile active and hit the &lt;code&gt;/greeting&lt;/code&gt; endpoint again and you’ll see something like &lt;code&gt;Hello GCP&lt;/code&gt; reflected in the console output. Hit the &lt;code&gt;/actuator/env&lt;/code&gt; endpoint and you’ll see an entry for &lt;code&gt;bootstrapProperties:spring-cloud-gcp&lt;/code&gt; containing our Runtime Config values.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt;&lt;/p&gt;
  &lt;p&gt;you can change the active profile by specifying&lt;br/&gt;&lt;code&gt;-Dspring.profiles.active=foo,bar&lt;/code&gt; for profiles &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; when&lt;br/&gt;running the application.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I like our application so far, but the greeting sounds so stiff! I’d love to change it, but don’t want to stop and start each application instance. Here we can take advantage of the &lt;code&gt;/actuator/refresh&lt;/code&gt; endpoint to &lt;em&gt;refresh&lt;/em&gt; our node’s configuration after updating the value in the Runtime Config configuration. Let’s change the value to something less formal, like &lt;code&gt;Hi, GCP&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint shell"&gt;gcloud beta runtime-config configs variables set greeting  &amp;quot;Hi, GCP&amp;quot;  --config-name reservations_cloud
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The configuration has been changed in the GCP Runtime Config, but that change isn’t visible, at least not by default, to our application. We need to force the Spring Boot to refresh its local configuration, drawing the configuration from the Runtime Config service. Issue an (empty) HTTP POST command to the &lt;code&gt;/actuator/refresh&lt;/code&gt; endpoint and then hit the &lt;code&gt;/greeting&lt;/code&gt; endpoint to see the updated value.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint shell"&gt;curl http://localhost:8080/greeting&#xD;
&amp;gt; Hello GCP&#xD;
&#xD;
gcloud beta runtime-config configs variables set greeting  &amp;quot;Hi GCP&amp;quot;  --config-name reservations_cloud&#xD;
curl -H&amp;quot;content-type: application/json&amp;quot; -d{} http://localhost:8080/actuator/refresh&#xD;
curl http://localhost:8080/greeting&#xD;
&amp;gt; Hi GCP
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;
  &lt;p&gt;inspect the old value&lt;/p&gt;&lt;/li&gt;
  &lt;li&gt;
  &lt;p&gt;change the value and then force the client to refresh its configuration. You’ll be able to confirm the update.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Spring Boot for Apache Geode &amp; Pivotal GemFire 1.0.0.M2 Released!</title>
    <link rel="alternate" href="https://spring.io/blog/2018/08/31/spring-boot-for-apache-geode-pivotal-gemfire-1-0-0-m2-released" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>John Blum</name>
    </author>
    <id>tag:spring.io,2018-08-31:3380</id>
    <updated>2018-08-31T16:34:46Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;On behalf of the team and the community, I am pleased to announce the release of Spring Boot for Apache Geode and Pivotal GemFire &lt;code&gt;1.0.0.M2&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;In summary this release brings the following improvements:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Auto-configuration support for Spring Session when using &lt;a href="http://geode.apache.org"&gt;Apache Geode&lt;/a&gt;, &lt;a href="https://pivotal.io/pivotal-gemfire"&gt;Pivotal GemFire&lt;/a&gt; or &lt;a href="https://pivotal.io/platform/services-marketplace/data-management/pivotal-cloud-cache"&gt;Pivotal Cloud Cache (PCC)&lt;/a&gt; to manage and store your Spring Boot application&amp;#8217;s (HTTP) Session state.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Recognition of &lt;code&gt;spring.cache.type&lt;/code&gt; when using Spring&amp;#8217;s &lt;a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/integration.html#cache"&gt;Cache Abstraction&lt;/a&gt; auto-configured with Spring Boot.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Additions and improvements to the documentation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Upgrades to Spring Framework &lt;code&gt;5.0.8.RELEASE&lt;/code&gt;, Spring Boot &lt;code&gt;2.0.4.RELEASE&lt;/code&gt; and Spring Data &lt;code&gt;Kay-SR9&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This release builds on the &lt;a href="https://spring.io/blog/2018/08/30/spring-session-for-apache-geode-pivotal-gemfire-2-0-5-release-and-2-1-0-m1-released"&gt;recently minted&lt;/a&gt; Spring Session for Apache Geode/Pivotal GemFire (SSDG) &lt;code&gt;2.0.5.RELEASE&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;1 of the key additions to SSDG was to enable dynamic configuration of Spring Session with Apache Geode/Pivotal GemFire/PCC using Properties along with a new &lt;code&gt;SpringSessionGemFireConfigurer&lt;/code&gt; callback interface. That way, even in the context of Spring Boot&amp;#8217;s auto-configuration, users have the ability to customize the configuration to meet their application requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="geode.boot-session-properties"&gt;&lt;a class="anchor" href="#geode.boot-session-properties"&gt;&lt;/a&gt;Configuration with Properties&lt;/h3&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;In addition to the Properties discussed &lt;a href="https://spring.io/blog/2018/08/30/spring-session-for-apache-geode-pivotal-gemfire-2-0-5-release-and-2-1-0-m1-released#geode-session-configuration-properties"&gt;here&lt;/a&gt; and documented &lt;a href="https://docs.spring.io/autorepo/docs/spring-session-data-geode-build/2.0.5.RELEASE/reference/html5/#httpsession-gemfire-configuration-properties"&gt;here&lt;/a&gt;, Spring Boot for Apache Geode &amp;amp; Pivotal GemFire additionally recognizes the following properties:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;spring.session.timeout&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;server.servlet.session.timeout&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Still, &lt;code&gt;spring.session.data.gemfire.session.expiration.max-inactive-interval-seconds&lt;/code&gt; takes precedence over &lt;code&gt;spring.session.timeout&lt;/code&gt;, which takes precedence over &lt;code&gt;server.servlet.session.timeout&lt;/code&gt; if any combination of these properties are set.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Spring Boot for Apache Geode/Pivotal GemFire additionally recognizes and respects &lt;code&gt;spring.session.store-type&lt;/code&gt;.  However, and unfortunately, this property cannot be set to either &lt;code&gt;gemfire&lt;/code&gt; or &lt;code&gt;geode&lt;/code&gt; as these values are not recognized as a valid (&lt;a href="https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/autoconfigure/session/StoreType.html"&gt;enumerated&lt;/a&gt;) values by Spring Boot itself.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="geode-boot-session-configurer"&gt;&lt;a class="anchor" href="#geode-boot-session-configurer"&gt;&lt;/a&gt;Configuration using a Configurer&lt;/h3&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Spring Boot for Apache Geode &amp;amp; Pivotal GemFire adds nothing beyond what is already provided by Spring Session for Apache Geode/Pivotal GemFire with respect to the new &lt;code&gt;SpringSessionGemFireConfigurer&lt;/code&gt; call back interface, as discussed &lt;a href="https://spring.io/blog/2018/08/30/spring-session-for-apache-geode-pivotal-gemfire-2-0-5-release-and-2-1-0-m1-released#geode-session-configuration-configurer"&gt;here&lt;/a&gt; and documented &lt;a href="https://docs.spring.io/autorepo/docs/spring-session-data-geode-build/2.0.5.RELEASE/reference/html5/#httpsession-gemfire-configuration-configurer"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="geode-boot-next"&gt;&lt;a class="anchor" href="#geode-boot-next"&gt;&lt;/a&gt;What&amp;#8217;s Next&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Next up, Spring Boot for Apache Geode &amp;amp; Pivotal GemFire will provide OOTB &lt;code&gt;HealthIndicators&lt;/code&gt; to assess and monitor the runtime health of your Apache Geode/Pivotal GemFire powered Spring Boot applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;More information about Spring Boot &lt;code&gt;HealthIndicators&lt;/code&gt; can be found &lt;a href="https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-endpoints.html#production-ready-health"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This will be available in next release, &lt;code&gt;1.0.0.M3&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Even longer term, we are planning to add support for Spring Boot Actuator.  There is an effort underway to retrofit Apache Geode/Pivotal GemFire&amp;#8217;s Stats architecture with &lt;a href="https://micrometer.io/"&gt;Micrometer&lt;/a&gt;.  This will serve as the basis for Spring Boot for Apache Geode &amp;amp; Pviotal GemFire&amp;#8217;s Actuator support.  This will most likely be available in SBDG 1.1.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="geode-boot-feedback"&gt;&lt;a class="anchor" href="#geode-boot-feedback"&gt;&lt;/a&gt;Feedback&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Try it out!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;You can get the new Spring Boot for Apache Geode or Pivotal GemFire bits from Spring&amp;#8217;s &lt;a href="http://repo.spring.io/libs-milestone/org/springframework/geode/spring-geode-starter/1.0.0.M2/"&gt;libs-milestone&lt;/a&gt; Repository and begin building Apache Geode/Pivotal GemFire powered Spring Boot applications by including the following dependency:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;org.springframework.geode:spring-geode-starter&lt;/code&gt; (Apache Geode)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;org.springframework.geode:spring-gemfire-starter&lt;/code&gt; (Pivotal GemFire/PCC)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Any feedback and/or contributions are always welcomed and appreciated: &lt;a href="https://github.com/spring-projects/spring-boot-data-geode/issues"&gt;Issues&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot-data-geode/pulls"&gt;PR&lt;/a&gt; | &lt;a href="https://stackoverflow.com/questions/tagged/spring-boot"&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;hr&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Also be sure to checkout &lt;a href="https://springoneplatform.io/"&gt;SpringOne Platform&lt;/a&gt; this year.  There is a lot of great &lt;a href="https://springoneplatform.io/2018/sessions"&gt;content&lt;/a&gt; and &lt;a href="https://springoneplatform.io/2018/speakers"&gt;speakers&lt;/a&gt;.  Plus, &lt;strong&gt;Luke Shannon&lt;/strong&gt; and I will be presenting on &lt;a href="https://springoneplatform.io/2018/sessions/scaling-spring-boot-applications-in-real-time"&gt;"&lt;em&gt;Scaling Spring Boot Application in Real-Time&lt;/em&gt;"&lt;/a&gt;, where we will be showcasing this project and much more.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Spring Batch 4.1.0.M3 Released!</title>
    <link rel="alternate" href="https://spring.io/blog/2018/08/31/spring-batch-4-1-0-m3-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Mahmoud Ben Hassine</name>
    </author>
    <id>tag:spring.io,2018-08-31:3381</id>
    <updated>2018-08-31T14:58:00Z</updated>
    <content type="html">&lt;p&gt;We are pleased to announce that Spring Batch 4.1.0.M3 is now available on Github and the Pivotal download repository. What&amp;rsquo;s new in this milestone? Here is a list of new features and enhancements:&lt;/p&gt;&lt;h1&gt;&lt;a href="#jsr-305-support" class="anchor" name="jsr-305-support"&gt;&lt;/a&gt;JSR-305 support&lt;/h1&gt;
&lt;p&gt;The main theme of this milestone is adding support for JSR-305 annotations. We leveraged Spring Framework&amp;rsquo;s &lt;a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#null-safety"&gt;Null-safety&lt;/a&gt; annotations and added them where appropriate in all public APIs of Spring Batch.&lt;/p&gt;
&lt;p&gt;These annotations will not only enforce null-safety when using Spring Batch APIs, but also can be used by IDEs to provide useful information related to nullability. For example, if a user wants to implement the &lt;code&gt;ItemReader&lt;/code&gt; interface, any IDE supporting JSR-305 annotations will generate something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;public class MyItemReader implements ItemReader&amp;lt;String&amp;gt; {&#xD;
&#xD;
	@Nullable&#xD;
	public String read() throws Exception {&#xD;
		return null;&#xD;
	}&#xD;
&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;@Nullable&lt;/code&gt; annotation present on the &lt;code&gt;read&lt;/code&gt; method makes it clear that the contract of this method says it may return &lt;code&gt;null&lt;/code&gt;. This enforces what is said in its Javadoc, that the &lt;code&gt;read&lt;/code&gt; method should return &lt;code&gt;null&lt;/code&gt; when the data source is exhausted.&lt;/p&gt;&lt;h1&gt;&lt;a href="#flatfileitemwriter-builder-enhancements" class="anchor" name="flatfileitemwriter-builder-enhancements"&gt;&lt;/a&gt;FlatFileItemWriter Builder enhancements&lt;/h1&gt;
&lt;p&gt;Another small feature added in this release is a simplification of the configuration for the writing of a flat file. Specifically, these updates simplify the configuration of both a delimited and fixed width file. Below is an example of before and after the change.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;// Before&#xD;
@Bean&#xD;
public FlatFileItemWriter&amp;lt;Item&amp;gt; itemWriter(Resource resource) {&#xD;
	BeanWrapperFieldExtractor&amp;lt;Item&amp;gt; fieldExtractor = &#xD;
            new BeanWrapperFieldExtractor&amp;lt;Item&amp;gt;();&#xD;
	fieldExtractor.setNames(new String[] {&amp;quot;field1&amp;quot;, &amp;quot;field2&amp;quot;, &amp;quot;field3&amp;quot;});&#xD;
	fieldExtractor.afterPropertiesSet();&#xD;
	&#xD;
	DelimitedLineAggregator aggregator = new DelimitedLineAggregator();&#xD;
	aggregator.setFieldExtractor(fieldExtractor);&#xD;
	aggregator.setDelimiter(&amp;quot;;&amp;quot;);&#xD;
&#xD;
	return new FlatFileItemWriterBuilder&amp;lt;Item&amp;gt;()&#xD;
			.name(&amp;quot;itemWriter&amp;quot;)&#xD;
			.resource(resource)&#xD;
			.lineAggregator(aggregator)&#xD;
			.build();&#xD;
}&#xD;
&#xD;
// After&#xD;
@Bean&#xD;
public FlatFileItemWriter&amp;lt;Item&amp;gt; itemWriter(Resource resource) {&#xD;
	return new FlatFileItemWriterBuilder&amp;lt;Item&amp;gt;()&#xD;
			.name(&amp;quot;itemWriter&amp;quot;)&#xD;
			.resource(resource)&#xD;
			.delimited()&#xD;
			.delimiter(&amp;quot;;&amp;quot;)&#xD;
			.names(new String[] {&amp;quot;field1&amp;quot;, &amp;quot;field2&amp;quot;, &amp;quot;field3&amp;quot;})&#xD;
			.build();&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1&gt;&lt;a href="#other-improvements" class="anchor" name="other-improvements"&gt;&lt;/a&gt;Other improvements&lt;/h1&gt;
&lt;p&gt;This milestone also includes other improvements like:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Adding the ability to provide a custom transaction manager by subclassing &lt;code&gt;DefaultBatchConfigurer&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Fixing minor inconsistencies in some method names&lt;/li&gt;
&lt;/ul&gt;&lt;h1&gt;&lt;a href="#feedback" class="anchor" name="feedback"&gt;&lt;/a&gt;Feedback&lt;/h1&gt;
&lt;p&gt;For a complete list of changes, please check the &lt;a href="https://jira.spring.io/secure/ReleaseNote.jspa?projectId=10090&amp;version=16889"&gt;change log&lt;/a&gt;. This is the last milestone before the first RC! So we really look forward to hearing your feedback on this milestone! Please feel free to ping &lt;a href="https://www.twitter.com/michaelminella"&gt;@michaelminella&lt;/a&gt; or &lt;a href="https://www.twitter.com/_benas_"&gt;@_benas_&lt;/a&gt; on Twitter or ask your question on &lt;a href="https://stackoverflow.com/questions/tagged/spring-batch"&gt;StackOverflow&lt;/a&gt; or &lt;a href="https://gitter.im/spring-batch/Lobby"&gt;Gitter&lt;/a&gt;. If you find any issue, please open a ticket on &lt;a href="https://jira.spring.io/projects/BATCH/summary"&gt;Jira&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://spring.io/projects/spring-batch"&gt;Spring Batch Home&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-batch"&gt;Source on GitHub&lt;/a&gt; | &lt;a href="https://docs.spring.io/spring-batch/4.1.x/reference/html/index.html"&gt;Reference Documentation&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
</feed>
