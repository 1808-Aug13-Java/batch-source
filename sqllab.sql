CONN chinook/p4ssw0rd;

-- 2.1
-- selecting all cols in employee table
SELECT * FROM CHINOOK.EMPLOYEE;
-- select all cols in empl where king is the last name
SELECT * FROM CHINOOK.EMPLOYEE WHERE LASTNAME = 'King';
-- select all cols in empl where andrew is the firstname and reportsto is null


-- 2.2 ORDER BY
-- ORDERING BY TITLE IN DESC ORDER
SELECT *
FROM CHINOOK.ALBUM
ORDER BY TITLE DESC;
-- SELECT FIRSTNAME OF CUSTOMER AND SORT
-- THE RESULT SET BY CITY IN ASC ORDER
-- I ADDED THE CITY COL FOR READABILITY
SELECT FIRSTNAME, CITY 
FROM CHINOOK.CUSTOMER
ORDER BY CITY;

--2.3 INSERT INTO
--CREATING TWO GENRES, EMPLOYEES, AND CUSTOMER (DML)
INSERT INTO CHINOOK.GENRE
VALUES (70, 'Punk-rock');

INSERT INTO CHINOOK.GENRE
VALUES (56, 'Pop-punk');

INSERT INTO CHINOOK.EMPLOYEE
VALUES (5000, 'Riordan', 'Crandon', 'Software Developer', NULL,
    DATE '1997-04-21', DATE '2018-08-13', '5125 sportsmans lake rd', 
    'Elizabethtown', 'KY', 'USA', '42701', '+1 (270) 734-1244)',
    '+1 (270) 734-1244)', 'criordan@gmail.com');

INSERT INTO CHINOOK.EMPLOYEE
VALUES (5001, 'Bobby', 'Brandon', 'Software Developer', NULL,
    DATE '1999-04-21', DATE '2017-08-13', '125 Meena Way', 
    'Elizabethtown', 'KY', 'USA', '42701', '+1 (270) 734-1244)',
    '+1 (270) 734-1244)', 'criordan@gmail.com');

INSERT INTO CHINOOK.CUSTOMER
VALUES (
    5000, 'Riordan', 'Brandon', 'Revature',
    '5125 sportsmans lake rd', 
    'Elizabethtown', 'KY', 'USA', '42701', '+1 (270) 734-1244)',
    '+1 (270) 734-1244)', 'criordan@gmail.com', 5
);
INSERT INTO CHINOOK.CUSTOMER
VALUES (
    5001, 'Bobby', 'Crandon', 'Microsoft',
    '125 Reston ave', 
    'Elizabethtown', 'KY', 'USA', '42701', '+1 (270) 734-1244)',
    '+1 (270) 734-1244)', 'criordan@gmail.com', 3
);

----------------
-- 2.4 update
----------------
-- updating aaron mitchell to robert walter
UPDATE CHINOOK.CUSTOMER
SET FIRSTNAME = 'Robert', LASTNAME = 'Walter'
WHERE FIRSTNAME = 'Aaron' AND LASTNAME = 'Mitchell';

UPDATE CHINOOK.ARTIST 
SET NAME = 'CCR'
WHERE NAME = 'Creedence Clearwater Revival';

------------
-- 2.5 LIKE
------------
-- SELECTING INVOICES W/ A BILLING ADDRESS LIKE T%
SELECT * 
FROM CHINOOK.INVOICE
WHERE BILLINGADDRESS LIKE 'T%';

--------------
-- 2.6 BETWEEN
--------------
-- SELECTING INVOICES WHERE TOTAL >15 AND <50
SELECT * 
FROM CHINOOK.INVOICE
WHERE TOTAL BETWEEN 15 AND 50;
-- SELECTING EMPLOYEES HIRED BETWEEN TWO DATES
SELECT * 
FROM CHINOOK.EMPLOYEE
WHERE HIREDATE 
BETWEEN DATE '2003-06-1' AND DATE '2004-03-01';

--------------
-- 2.7 DELETE
----------------
-- DELETING A RECORD WHERE NAME = ROBERT WALKER
DELETE FROM CHINOOK.EMPLOYEE
WHERE FIRSTNAME = 'Robert' and LASTNAME = 'Walker';


---------------------------------
-- 3.1 SYSTEM DEFINED FUNCTION
---------------------------------
-- CREATE A FUNCTION TO RETURN THE CURRENT TIME
SELECT CURRENT_DATE FROM DUAL;

-- CREATE A FUNCTION TO RETURN THE LENGTH OF NAME IN MEDIATYPE TABLE
SELECT NAME, LENGTH(NAME) LENGTH_OF_NAME
FROM CHINOOK.MEDIATYPE;



---------------------
--3.2 SYSTEM AGGREGATE FUNCTIONS
----------------------
-- GET AVG TOTALS
SELECT ROUND(AVG(TOTAL), 2) AVG_TOTAL FROM CHINOOK.INVOICE;
-- MOST EXPENSIVE TRACK
SELECT * FROM (
    SELECT ALBUMID, SUM(UNITPRICE) AS COST_OF_ALBUM
    FROM CHINOOK.TRACK
    GROUP BY ALBUMID
    ORDER BY COST_OF_ALBUM DESC
)
WHERE ROWNUM = 1;

------------------
-- 3.3 USER DEFINED SCALAR F(X)
------------------
-- get avg price of invoiceline items in the invoice line table
CREATE OR REPLACE FUNCTION AVG_PRICE
RETURN NUMBER
IS
    AVERAGE NUMBER;
BEGIN
    SELECT AVG(TOTAL) INTO AVERAGE FROM CHINOOK.INVOICE;
    RETURN AVERAGE;
END;

-- 3.4 USER DEFINED TABLE VIEW FUNCTION
CREATE OR REPLACE FUNCTION BORN_AFTER
RETURN SYS_REFCURSOR
IS
    YOUNGER SYS_REFCURSOR;
BEGIN
    OPEN YOUNGER FOR
    SELECT * FROM CHINOOK.EMPLOYEE WHERE BIRTHDATE > DATE '1968-12-30';
    
    RETURN YOUNGER;
END;
/


------------------------------
-- 4.0 STORED PROCEDURES
------------------------------
-- SELECT FIRST & LAST OF ALL THE EMPLOYEES
CREATE OR REPLACE PROCEDURE GET_FIRST_AND_LAST(FIRST_AND_LAST OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN FIRST_AND_LAST FOR
    SELECT FIRSTNAME, LASTNAME FROM CHINOOK.EMPLOYEE;
END;
/

--------------
--4.2 stored input procedures
------------

---- update employee address w/ input
CREATE OR REPLACE PROCEDURE UPDATE_EMPLOYEE_ADDRESS(EMP_ID CHINOOK.EMPLOYEE.EMPLOYEEID%TYPE,
                            ADRS CHINOOK.EMPLOYEE.ADDRESS%TYPE,
                            CY CHINOOK.EMPLOYEE.CITY%TYPE, ST CHINOOK.EMPLOYEE.STATE%TYPE,
                            CY CHINOOK.EMPLOYEE.COUNTRY%TYPE, PC CHINOOK.EMPLOYEE.POSTALCODE%TYPE)
IS
BEGIN
    UPDATE EMPLOYEE
    SET ADDRESS = ADRS,
    CITY = CY,
    STATE = ST,
    COUNTRY = CY,
    PC = POSTALCODE
    WHERE EMPLOYEEID = EMP_ID;
END;

---- show manager of emp_id
CREATE OR REPLACE PROCEDURE GET_MANAGER(EMP_ID IN CHINOOK.EMPLOYEE.EMPLOYEEID%TYPE, MNGR OUT SYS_REFCURSOR)
IS
    MNGR_ID NUMBER;
BEGIN
    OPEN MNGR FOR
    SELECT * 
    FROM CHINOOK.EMPLOYEE 
    WHERE EMPLOYEEID = (SELECT REPORTSTO FROM CHINOOK.EMPLOYEE WHERE EMPLOYEEID = EMP_ID);
END;
/

-----------------------
-- 4.3 STORED PROCEDURE W/ OUTPUT
-----------------------
-- RETURN NAME AND COMPANY OF A CUSTOMER
CREATE OR REPLACE PROCEDURE GET_INFO_OF_CUSTOMER(CUST_ID IN CHINOOK.CUSTOMER.CUSTOMERID%TYPE, INFO OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN INFO FOR
        SELECT FIRSTNAME, LASTNAME, COMPANY FROM CHINOOK.CUSTOMER WHERE CUSTOMERID = CUST_ID;
END;
/

----------------------
-- 5.0 TRANSACTIONS
----------------------
-- Create a transaction that given a invoiceId will delete that invoice 
--(There may be constraints that rely on this, find out how to resolve them).
GRANT DELETE ANY TABLE TO crandon;  
CREATE OR REPLACE PROCEDURE DELETE_INVOICE(IID IN CHINOOK.INVOICE.INVOICEID%TYPE)
IS
    INV SYS_REFCURSOR;
BEGIN
    COMMIT;
    
    
    -- DELETE DEPENDENCY
    DELETE FROM CHINOOK.INVOICELINE WHERE INVOICEID = IID;

    DELETE FROM CHINOOK.INVOICE WHERE INVOICEID = IID;
    COMMIT;
END;
/

BEGIN
    DELETE_INVOICE(216);
END;

-- NESTED TRANSACTION W/IN A PROCEDURE WHICH INSERTS A NEW CUSTOMER TABLE
GRANT INSERT ANY TABLE TO crandon;
CREATE OR REPLACE PROCEDURE CREATE_CUSTOMER(CID IN CHINOOK.CUSTOMER.CUSTOMERID%TYPE,
                                    FNAME IN CHINOOK.CUSTOMER.FIRSTNAME%TYPE,
                                    LNAME IN CHINOOK.CUSTOMER.LASTNAME%TYPE,
                                    MAIL IN CHINOOK.CUSTOMER.EMAIL%TYPE)
IS
BEGIN
    COMMIT;
    
    INSERT INTO CHINOOK.CUSTOMER (CUSTOMERID, FIRSTNAME, LASTNAME, EMAIL) 
    VALUES (CID, FNAME, LNAME, MAIL);
END;
/

BEGIN
    CREATE_CUSTOMER(1045, 'CRANDON', 'RIORDAN', 'C@GMAIL.COM') ;   
END;


----------------------------
-- 6.0 TRIGGERS
----------------------------

-- AFTER INSERT ON EMPLOYEE ENTER THE CORRECT DATE
GRANT UPDATE ANY TABLE TO crandon;
CREATE OR REPLACE TRIGGER INSERT_CURRENT_DATE
AFTER INSERT ON CHINOOK.EMPLOYEE
FOR EACH ROW
BEGIN
    -- ENTER DATE NOW IF HIREDATE ISN'T ADDED
    IF(:OLD.HIREDATE IS NULL) THEN
        UPDATE CHINOOK.EMPLOYEE
        SET HIREDATE = (SELECT CURRENT_DATE FROM DUAL)
        WHERE EMPLOYEEID = :OLD.EMPLOYEEID;
    END IF;
    
END;
/

GRANT UPDATE ANY TABLE TO crandon;
CREATE OR REPLACE TRIGGER COMMIT_ALBUM
AFTER UPDATE ON CHINOOK.ALBUM
FOR EACH ROW
BEGIN
    -- AFTER THE UPDATE COMMIT THE CHANGE;
    COMMIT;
    
END;
/

GRANT UPDATE ANY TABLE TO crandon;
CREATE OR REPLACE TRIGGER CREATE_SP
AFTER DELETE ON CHINOOK.CUSTOMER
FOR EACH ROW
BEGIN
    SAVEPOINT S1;
END;
/





-----------------
-- 7.0 JOINS
-----------------


--7.1 INNER JOIN
-- INNER JOIN CUSTOMER AND ORDER, SPECIFY CUSTOMER NAME AND INVOICEID
SELECT C.FIRSTNAME, I.INVOICEID
FROM CHINOOK.CUSTOMER C
INNER JOIN CHINOOK.INVOICE I ON C.CUSTOMERID = I.CUSTOMERID;

-- 7.2
--- outer join customer and invoice, specify c.id, firstname, lastname, invoice id, and total
SELECT C.CUSTOMERID, C.FIRSTNAME, C.LASTNAME, I.INVOICEID, I.TOTAL
FROM CHINOOK.INVOICE I
FULL JOIN CHINOOK.CUSTOMER C
ON C.CUSTOMERID = I.CUSTOMERID;

-- 7.3
-- RIGHT JOIN ALBUMS AND ARTISTS W/ ARTIST NAME N TITLE
SELECT ARTIST.NAME, ALBUM.TITLE
FROM CHINOOK.ALBUM ALBUM
RIGHT JOIN CHINOOK.ARTIST ARTIST
ON ALBUM.ARTISTID = ARTIST.ARTISTID;

-- 7.4
-- CROSS JOIN ALBUM AND ARTIST, SORT BY ARTISTS NAME IN ASC ORDER
SELECT * 
FROM CHINOOK.ALBUM ALBUM
CROSS JOIN CHINOOK.ARTIST ARTIST
ORDER BY ARTIST.NAME;

-- 7.5
-- SELF JOIN EMPLOYEE ON REPORTSTO COLUMN
SELECT 
    EMP1.FIRSTNAME, EMP1.LASTNAME, EMP1.EMPLOYEEID, 
    EMP1.REPORTSTO, EMP2.FIRSTNAME, EMP2.LASTNAME
FROM CHINOOK.EMPLOYEE EMP1, CHINOOK.EMPLOYEE EMP2
WHERE EMP1.REPORTSTO = EMP2.EMPLOYEEID;


