CREATE TABLE CUSTOMERS(
    CUSTOMERSID NUMBER(5) CONSTRAINT PK_CUSTOMERS PRIMARY KEY,
    FIRSTNAME VARCHAR2(50),
    LASTNAME VARCHAR2(50)NOT NULL,
    USERNAME VARCHAR2(50) NOT NULL UNIQUE,
    USER_PASSWORD VARCHAR2(50) NOT NULL,
    BALANCE NUMBER(20) NOT NULL
);


/*
CREATE TABLE ACCOUNTS(
ACCOUNTID NUMBER(5) CONSTRAINT PK_ACCOUNTS PRIMARY KEY,
BALANCE NUMBER(20) NOT NULL,
CUSTOMERSID NUMBER(5) CONSTRAINT FK_CUSTACT_CUST REFERENCES CUSTOMERS
);
*/
--CREATE TABLE CUSTOMER_ACCOUNT(
--CUSTOMERSID NUMBER(5) CONSTRAINT FK_CUSTACT_CUST REFERENCES CUSTOMERS,
--ACCOUNTID NUMBER(5) CONSTRAINT FK_CUSTACT_ACT REFERENCES ACCOUNTS
--);


CREATE SEQUENCE SQ_PK_CUSTOMERS
START WITH 1
INCREMENT BY 1;

-- CREATING A TRIGGER WHICH USES THIS SEQUENCE TO GEN PK
CREATE OR REPLACE TRIGGER TR_INSERT_CUSTOMERS
BEFORE INSERT ON CUSTOMERS
FOR EACH ROW 
BEGIN
    SELECT SQ_PK_CUSTOMERS.NEXTVAL INTO :NEW.CUSTOMERSID FROM DUAL;
END;
/
/*
CREATE SEQUENCE SQ_PK_ACCOUNTS
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER TR_INSERT_ACCOUNTS
BEFORE INSERT ON ACCOUNTS
FOR EACH ROW 
BEGIN
    SELECT SQ_PK_ACCOUNTS.NEXTVAL INTO :NEW.ACCOUNTID FROM DUAL;
END;
/

CREATE SEQUENCE SQ_FK_CUSTOMERSID
START WITH 1
INCREMENT BY 1;

-- CREATING A TRIGGER WHICH USES THIS SEQUENCE TO GEN PK
CREATE OR REPLACE TRIGGER TR_INSERT_FK_CUSTOMERS
BEFORE INSERT ON ACCOUNTS
FOR EACH ROW 
BEGIN
    SELECT SQ_FK_CUSTOMERSID.NEXTVAL INTO :NEW.CUSTOMERSID FROM DUAL;
END;
/
*/
CREATE OR REPLACE PROCEDURE INCREASE_BALANCE(CUST IN CUSTOMERS.USERNAME%TYPE, VAL IN CUSTOMERS.BALANCE%TYPE)
IS 
BEGIN
    UPDATE CUSTOMERS
    SET BALANCE = BALANCE + VAL
    WHERE USERNAME = CUST;
END;
/

COMMIT;


