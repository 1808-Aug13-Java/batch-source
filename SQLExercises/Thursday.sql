-- CREATE A FUNCTION WHICH CALCULATES THE SUBTOTAL OF A GIVEN TOTAL,
-- IF THE TOTAL IS EQUAL TO THE SUBTOTAL WITH 6% TAX 
-- USE IT TO RECREATE THE QUERY FROM YESTERDAY
CREATE OR REPLACE FUNCTION CALC_SUBTOTAL (TOTAL NUMBER)
RETURN NUMBER
IS
BEGIN
    RETURN TOTAL*1.06;
END;
/

SELECT C.CUST_NAME CUSTOMER, I.INV_ID, CALC_SUBTOTAL(I.AMOUNT) SUBTOTAL
FROM INVOICE I
JOIN CUSTOMER C
ON C.CUST_ID = I.CUST_ID
ORDER BY INV_ID ASC;

-- CREATE A FUNCTION WHICH TAKES IN A STRING AND A NUMBER, 
-- AND CONCATINATES THAT STRING THAT NUMBER OF TIMES WITH 
-- A SPACE BETWEEN EACH AND RETURNS THE RESULT 
CREATE OR REPLACE FUNCTION STR_CONCAT (WORDS VARCHAR2, C NUMBER)
RETURN VARCHAR2
IS
    RET VARCHAR2(100);
    COUNTER NUMBER;
BEGIN
    COUNTER := 1;
    RET := WORDS;
    LOOP
        EXIT WHEN COUNTER = C;
        COUNTER := COUNTER + 1;
        RET := CONCAT(RET, ' ' || WORDS); 
    END LOOP;
    RETURN RET;
END;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE('TEST');
    DBMS_OUTPUT.PUT_LINE(STR_CONCAT('CAT', 5));
END;
/

-- CREATE A STORED PROCEDURE WHICH CHECK ALL OF THE INVOICES
-- IN YOUR DATABASE AND DELETES ALL ORPHAN RECORDS IN YOUR INVOICE TABLE
INSERT INTO INVOICE (INV_ID, INV_DATE, CUST_ID, AMOUNT) VALUES (51, DATE '2018-06-08', NULL, 924);

CREATE OR REPLACE PROCEDURE DEL_ORPHANS
IS
BEGIN
    DELETE FROM (
        SELECT * 
        FROM INVOICE I
        LEFT JOIN CUSTOMER C
        ON I.CUST_ID = C.CUST_ID
        WHERE I.CUST_ID IS NULL);
END;
/


-- CREATE A STORED PROCEDURE WHICH ENTERS A NEW INVOICE INTO THE INVOICE TABLE 
-- IF THE DATE IS IN THE FUTURE, IT SHOULD NOT BE ENTERED AND A MESSAGE SHOULD BE PRINTED TO THE CONSOLE
-- IN ADDITION IF THE VALUE OF THE INVOICE IS NEGATIVE,
-- IT SHOULD NOT BE ENTERED INTO THE TABLE AND A MESSAGE SHOULD BE PRINTED TO THE CONSOLE
CREATE OR REPLACE PROCEDURE ADD_INVOICE (IN_DATE DATE, CUS_ID NUMBER, ITEM_COUNT NUMBER)
IS
    IN_ID NUMBER;
BEGIN
    SELECT MAX(I.INV_ID) + 1 INTO IN_ID
    FROM INVOICE I;
    --DBMS_OUTPUT.PUT_LINE(IN_ID);
    IF (IN_DATE > SYSDATE) THEN
        DBMS_OUTPUT.PUT_LINE ('Invalid input date: ' || IN_DATE || ' is in the future.');
        RETURN;
    ELSIF (ITEM_COUNT < 0) THEN
        DBMS_OUTPUT.PUT_LINE ('Invalid item count: ' || ITEM_COUNT || ' is negative');
        RETURN;
    ELSIF (CUS_ID < 0) THEN
        DBMS_OUTPUT.PUT_LINE ('Invalid customer id: ' || CUS_ID || ' is negative');
        RETURN;
    END IF;
    
    INSERT INTO INVOICE VALUES (IN_ID, IN_DATE, CUS_ID, ITEM_COUNT);
    
END;
/

BEGIN
    ADD_INVOICE(DATE '2017-04-21', 1, 100);
END;
/