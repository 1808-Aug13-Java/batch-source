-----------------
--2.1 SELECT STATEMENTS
-----------------
--SELECTED ALL RECORDS FROM THE EMPLOYEE TABLE
SELECT * 
FROM CHINOOK.EMPLOYEE;
--SELECTED ALL RECORDS FROM THE EMPLOYEE TABLE WHERE WITH LASTNAME King. LASTNAME WAS CASE SENSTITIVE.
SELECT * 
FROM CHINOOK.EMPLOYEE 
WHERE LASTNAME = 'King'; 
--SELECTED FROM EMPLOYEE TABLE USING AND TO SPECIFY TWO WHERE CLAUSES
SELECT * FROM CHINOOK.EMPLOYEE 
WHERE FIRSTNAME = 'Andrew'
AND REPORTSTO IS NULL;

--------------------
--2.2 ORDER BY
--------------------
-- SELECTED ALL RECORDS FROM ALBUM TABLE AND ORDERED BY THE TITLE IN REVERSE ALPHABETICAL ORDER
SELECT * 
FROM CHINOOK.ALBUM
ORDER BY TITLE DESC;
--SELECTED THE FIRSTNAME COLUMN FROM THE CUSTOMER TABLE, ORDERING BY CITY IN ALPHABETICAL ORDER
SELECT FIRSTNAME
FROM CHINOOK.CUSTOMER
ORDER BY CITY ASC;

---------------------------
--2.3 INSERT INTO
---------------------------

--INSERTING RECORDS FOR GENREID AND NAME INTO GENRE TABLE
INSERT INTO CHINOOK.GENRE VALUES (26, 'PROG ROCK')
INSERT INTO CHINOOK.GENRE VALUES (27, 'GRIME');

INSERT INTO CHINOOK.EMPLOYEE VALUES (10,	'DAVIS',	'LAURA',	'IT Staff',	6,	DATE '1968-01-12',	
DATE '2004-03-04',	'923 7 ST NW',	'Lethbridge',	'AB',	'Canada',	'T1H 1Y8',	'+1 (403) 467-3351',
'+1 (403) 467-8772',	'laura@chinookcorp.com');
INSERT INTO CHINOOK.EMPLOYEE VALUES (9,	'DUDE',	'MUR',	'IT Staff',	6,	DATE '1968-01-12',	
DATE '2004-03-04',	'923 7 ST NW',	'Lethbridge',	'AB',	'Canada',	'T1H 1Y8',	'+1 (403) 467-3351',
'+1 (403) 467-8772',	'laura@chinookcorp.com');

INSERT INTO CHINOOK.CUSTOMER VALUES(60,	'Rees',	'Barnett','Woodstock Discos', '302 S 700 E','Salt Lake City','UT','USA','84102',
'+1 (801) 531-7272', '666 666-6969','jubarnett@gmail.com',5);
INSERT INTO CHINOOK.CUSTOMER VALUES(61,	'Piece',	'Peace','Woodstock Discos', '302 S 700 E','Salt Lake City','UT','USA','84102','+1 (801) 531-7272', '666 666-6969','jubarnett@gmail.com',5);
---------------------------
--2.4 UPDATE
---------------------------
--UPDATED CUSTOMER AND ARTIST TABLES. NEEDED CASE SENSITIVITY FOR NAMES AND USED SET AND WHERE KEYWORDS TO SPECIFY WHERE CHANGES WERE MADE
UPDATE CHINOOK.CUSTOMER
SET FIRSTNAME = 'Robert'
WHERE FIRSTNAME = 'Aaron';

UPDATE CHINOOK.CUSTOMER
SET LASTNAME = 'Walter'
WHERE LASTNAME = 'Mitchell';

UPDATE CHINOOK.ARTIST
SET NAME = 'CCR'
WHERE NAME = 'Creedence Clearwater Revival';

-----------------------------
--2.5
-----------------------------

SELECT *
FROM CHINOOK.INVOICE
WHERE BILLINGADDRESS LIKE 'T%';

-----------------------------
--2.6 BETWEEN
-----------------------------

SELECT *
FROM CHINOOK.INVOICE
WHERE TOTAL BETWEEN 15 AND 50;

SELECT *
FROM CHINOOK.EMPLOYEE
WHERE HIREDATE BETWEEN DATE '2003-06-01' AND DATE '2004-03-01';
-----------------------------
--2.7 DELETE
-----------------------------
COMMIT;

ALTER TABLE CHINOOK.INVOICE DROP 
   CONSTRAINT FK_INVOICECUSTOMERID;

DELETE FROM CHINOOK.CUSTOMER 
WHERE LASTNAME = 'Walter' AND FIRSTNAME = 'Robert';


--------------------------------------
--SQL FUNCTIONS --3.1 SQL FUNCTIONS
--------------------------------------
SELECT CURRENT_TIMESTAMP FROM DUAL;
--THIS SQL FUNCTION WILL RETURN MORE THAN JUST THE CURRENT TIME FROM THE DUMMY TABLE DUAL
----------------

SELECT LENGTH(NAME)
FROM CHINOOK.MEDIATYPE; 

----------------------------------
--3.2 SYSTEM DEFINED AGGREGATE FUNCTIONS
----------------------------------
SELECT AVG(TOTAL)
FROM CHINOOK.INVOICE;

SELECT MAX(UNITPRICE)
FROM CHINOOK.TRACK;

--------------------------
--3.3 USER DEFINED SCALAR FUNCTIONS
--------------------------
--CREATED A FUNCTION THAT NEEDS TO BE PASSED SUM AND COUNT PARAMETERS IN ORDER TO AVERAGE PROPERLY
CREATE OR REPLACE FUNCTION AVGINVOICELINE(X IN NUMBER, Y IN NUMBER)
RETURN NUMBER
IS
Z NUMBER;
BEGIN 
   SELECT (SUM(X)/COUNT(Y)) INTO Z FROM CHINOOK.INVOICELINE;
    RETURN Z;
END;
/

SELECT AVGINVOICELINE(SUM(INVOICELINEID), COUNT(UNITPRICE)) FROM CHINOOK.INVOICELINE;

--NOT SURE WHAT THE SYNTAX IS TO INCLUDE A SELECT STATEMENT INSIDE OF A FUNCTION
CREATE OR REPLACE FUNCTION BIRTHDAY
RETURN TABLE
IS
BEGIN
SELECT * FROM CHINOOK.EMPLOYEE
WHERE BIRTHDATE > DATE '1968-12-31'
ORDER BY EMPLOYEEID;
END;
/

---------------------------------
--4.1 BASIC STORED PROCEDURE
---------------------------------

CREATE OR REPLACE PROCEDURE FIRST_LAST(S OUT VARCHAR2, T OUT VARCHAR2)
IS
BEGIN
SELECT FIRSTNAME INTO S FROM CHINOOK.EMPLOYEE;
SELECT LASTNAME INTO T FROM CHINOOK.EMPLOYEE;
END;
/

----------------------------------
--4.2 STORED PROCEDURE INPUT PARAMETER
----------------------------------
--CREATED UPDATE PROCEDURE UPDATING ALL COLUMNS, HOWEVER I RECIEVED INSUFFICIENT PRIVILEGES ERROR, SO I'M NOT SURE I HAVE ACCESS TO THIS PROCEDURE...
CREATE OR REPLACE PROCEDURE UPDATE_EMPLOYEE 
(
  NEW_EMPLOYEEID IN NUMBER,
  NEW_LASTNAME IN VARCHAR2,
  NEW_FIRSTNAME IN VARCHAR2,
  NEW_TITLE IN VARCHAR2,
  NEW_REPORTSTO IN NUMBER,
  NEW_BIRTHDATE IN DATE,
  NEW_HIREDATE IN DATE,
  NEW_ADDRESS IN VARCHAR2,
  NEW_CITY IN VARCHAR2,
  NEW_STATE IN VARCHAR2,
  NEW_COUNTRY VARCHAR2,
  NEW_POSTALCODE VARCHAR2,
  NEW_PHONE VARCHAR2,
  NEW_FAX VARCHAR2,
  NEW_EMAIL VARCHAR2
)
IS
BEGIN
  UPDATE CHINOOK.EMPLOYEE
  SET LASTNAME = COALESCE(NEW_LASTNAME, LASTNAME),
      FIRSTNAME = COALESCE(NEW_FIRSTNAME, FIRSTNAME),
      TITLE = NEW_TITLE,
      REPORTSTO = NEW_REPORTSTO,
      BIRTHDATE = NEW_BIRTHDATE,
      HIREDATE = NEW_HIREDATE,
      ADDRESS = NEW_ADDRESS,
      CITY = NEW_CITY,
      STATE = NEW_STATE,
      COUNTRY = NEW_COUNTRY,
      POSTALCODE = NEW_POSTALCODE,
      PHONE = NEW_PHONE,
      FAX = NEW_FAX,
      EMAIL = NEW_EMAIL
    WHERE EMPLOYEEID = NEW_EMPLOYEEID;
END;
/
--

CREATE OR REPLACE PROCEDURE GET_MANAGER(
NEW_EMPLOYEEID IN NUMBER
)
IS
TEMP VARCHAR2(20);
TEMP2 VARCHAR2(20);
TEMP3 VARCHAR2(20);
TEMP4 VARCHAR2(20);
BEGIN
SELECT
MGR.FIRSTNAME, MGR.LASTNAME, EMP.FIRSTNAME, EMP.LASTNAME INTO TEMP, TEMP2, TEMP3, TEMP4
FROM CHINOOK.EMPLOYEE EMP
JOIN CHINOOK.EMPLOYEE MGR 
ON EMP.EMPLOYEEID = MGR.REPORTSTO
WHERE EMP.EMPLOYEEID = NEW_EMPLOYEEID AND EMP.REPORTSTO = MGR.EMPLOYEEID;
DBMS_OUTPUT.PUT_LINE(TEMP || ' ' || TEMP2 || ' IS THE MANAGER OF ' || TEMP3 || ' ' || TEMP4);
END;
/

-------------------------------
--4.3 STORED PROCEDURE OUTPUT PARAMS
-------------------------------

CREATE OR REPLACE PROCEDURE GET_CUSTOMERS (S OUT SYS_REFCURSOR)
IS
BEGIN
    OPEN S FOR
    SELECT FIRSTNAME, LASTNAME, COMPANY FROM CHINOOK.CUSTOMER;
END;
/


/*DECLARE
    SVAR SYS_REFCURSOR;
    TEMP_FIRSTNAME CUSTOMER.FIRSTNAME%TYPE;
    TEMP_LASTNAMENAME CUSTOMER.LASTNAME%TYPE;
    TEMP_COMPANYCUSTOMER.COMPANY%TYPE;
BEGIN 
    GET_CUSTOMERS(SVAR);
    -- NOW WE SHOULD HAVE ACCESS TO OUR EMPLOYEES THROUGH SVAR
    LOOP
        FETCH SVAR INTO TEMP_FIRSTNAME, TEMP_LASTNAME, TEMP_COMPANY;
        EXIT WHEN SVAR%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(TEMP_FIRSTNAME||" "||TEMP_LASTNAME||' IS CURRENT NAME, '||TEMP_COMPANY||' IS CURRENT COMPANY');
    END LOOP;
    CLOSE SVAR;
END;
*/

----------------------------
--5.0
----------------------------
--SINCE A FOREIGN KEY POINTS TO INVOICEID, I'LL NEED TO DROP THE FOREIGN KEY IN THE INVOICELINE TABLE
ALTER TABLE CHINOOK.INVOICELINE DROP 
   CONSTRAINT FK_INVOICELINEINVOICEID;
--RECIEVED INSUFFICIENT PRIVILEGES ERROR
CREATE OR REPLACE PROCEDURE DEL_INVOICE(TEMP_INVOICEID IN CHINOOK.INVOICE.INVOICEID%TYPE)
IS
BEGIN

  DELETE FROM CHINOOK.INVOICE WHERE INVOICEID = TEMP_INVOICEID;
  
  COMMIT;

END;
/


CREATE OR REPLACE PROCEDURE INSERT_CUSTOMER(
TEMP_CUSTOMERID IN NUMBER,
TEMP_FIRSTNAME IN VARCHAR2,
TEMP_LASTNAME IN VARCHAR2,
TEMP_COMPANY IN VARCHAR2,
TEMP_ADDRESS IN VARCHAR2,
TEMP_CITY IN VARCHAR2,
TEMP_STATE IN VARCHAR2,
TEMP_SOUNTRY IN VARCHAR2,
TEMP_POSTALCODE IN VARCHAR2,
TEMP_PHONE IN VARCHAR2,
TEMP_FAX IN VARCHAR2,
TEMP_EMAIL IN VARCHAR2,
TEMP_SUPPORTREPID IN NUMBER
)
IS
BEGIN

  INSERT INTO CHINOOK.CUSTOMER VALUES(TEMP_CUSTOMERID,
TEMP_FIRSTNAME,
TEMP_LASTNAME,
TEMP_COMPANY,
TEMP_ADDRESS,
TEMP_CITY,
TEMP_STATE,
TEMP_SOUNTRY,
TEMP_POSTALCODE,
TEMP_PHONE,
TEMP_FAX,
TEMP_EMAIL,
TEMP_SUPPORTREPID);
  COMMIT;

END;
/

-----------------------------
--6.1 AFTER/FOR
-----------------------------
--CREATED A TRIGGER THAT RETURNS THE USERNAME OF THE PERSON INSERTING
CREATE OR REPLACE TRIGGER TR_INSERTAFTER_DEPARTMENT
AFTER INSERT ON CHINOOK.EMPLOYEE
FOR EACH ROW
DECLARE USERNAME VARCHAR2(60);
BEGIN
    SELECT USER INTO USERNAME FROM DUAL;
END;

--AFTER UPDATE TRIGGER
CREATE OR REPLACE TRIGGER UPDATE_AFTER
AFTER UPDATE
   ON CHINOOK.ALBUM
   FOR EACH ROW

DECLARE
   USERNAME VARCHAR2(60);

BEGIN

   -- Insert record into audit table
   INSERT INTO CHINOOK.ALBUM
    (ALBUMID,
     TITLE,
     ARTISTID)
   VALUES
    (:NEW.ALBUMID,
     :NEW.TITLE,
     :NEW.ARTISTID);
-- FIND USERNAME OF PERSON UPDATING TO TABLE AFTER INSERTION
   SELECT USER INTO USERNAME
   FROM DUAL;
END;
--INSUFFICIENT PRIVILEGES ERROR
/

--

CREATE OR REPLACE TRIGGER AFTER_DELETE
AFTER DELETE
   ON CUSTOMER
   FOR EACH ROW

DECLARE
   USERNAME varchar2(60);

BEGIN

   -- FINDS THE USERNAME OF USER DELETING FROM THE TABLE
   SELECT USER INTO USERNAME
   FROM DUAL;

   -- INSERT INTO CUSTOMER TABLE
 /*  INSERT INTO CHINOOK.CUSTOMER
   ( CUSTOMERID,
     FIRSTNAME,
     LASTNAME,
     COMPANY,
     ADDRESS,
     CITY,
     STATE,
     COUNTRY,
     POSTALCODE,
     PHONE,
     FAX,
     EMAIL,
     SUPPORTREPID)
   VALUES
   ( :NEW.CUSTOMERID,
     :NEW.FIRSTNAME,
     :NEW.LASTNAME,
     :NEW.COMPANY,
     :NEW.ADDRESS,
     :NEW.CITY,
     :NEW.STATE,
     :NEW.COUNTRY,
     :NEW.POSTALCODE,
     :NEW.PHONE,
     :NEW.FAX,
     :NEW.EMAIL,
     :NEW.SUPPORTREPID );
*/
END;

/

--------------------------------
--7.1 INNER
--------------------------------
--RETURNS RECORDS THAT HAVE MATCHING VALUES IN BOTH TABLES
SELECT FIRSTNAME, LASTNAME, INVOICEID
FROM CHINOOK.CUSTOMER
--INNER JOIN RETURNS MATCHES BETWEEN TABLES
INNER JOIN CHINOOK.INVOICE
ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID
--ORDERING BY LASTNAME OF THE CUSTOMER
ORDER BY CUSTOMER.LASTNAME;
----------------------------------
--7.2 OUTER JOIN
----------------------------------
--NEEDED TO SPECIFY THAT I WANTED TO SELECT THE CUSTOMERID FROM THE CUSOTMER TABLE...
--RETURNS ALL RECORDS WHEN THERE'S A MATCH IN EITHER LEFT OR RIGHT TABLE
SELECT CUSTOMER.CUSTOMERID, FIRSTNAME, LASTNAME, INVOICEID, TOTAL
FROM CHINOOK.CUSTOMER
FULL OUTER JOIN CHINOOK.INVOICE
ON CUSTOMER.CUSTOMERID = INVOICE.CUSTOMERID;

----------------------------------
--7.3 RIGHT JOIN
----------------------------------
--RETURNS ALL RECORDS FROM THE ALBUM TABLE AND THE MATCHED RECORDS FROM THE ARTIST TABLE
SELECT NAME, TITLE
FROM CHINOOK.ARTIST
RIGHT JOIN CHINOOK.ALBUM
ON ARTIST.ARTISTID = ALBUM.ARTISTID;

-----------------------------------
--7.4 CROSS JOIN
-----------------------------------
--EACH ROW FROM THE ARTIST TABLE JOINS WITH ALL THE ROWS OF THE ALBUM TABLE
SELECT *
FROM CHINOOK.ARTIST
CROSS JOIN CHINOOK.ALBUM
ORDER BY ARTIST.NAME ASC;

-----------------------------------
--7.5
-----------------------------------
--SELF JOIN THAT MATCHES EMPLOYEES TO THEIR RESPECTIVE MANAGER
SELECT M.FIRSTNAME, M.LASTNAME, E.FIRSTNAME, E.LASTNAME
FROM
    CHINOOK.EMPLOYEE E
        LEFT JOIN
    CHINOOK.EMPLOYEE M ON M.EMPLOYEEID = E.REPORTSTO
ORDER BY M.LASTNAME DESC;
