CONN chinook/p4ssw0rd;
------------------------------------------
-- SQL QUERIES
------------------------------------------
-- 2.1
SELECT * FROM CHINOOK.EMPLOYEE;
SELECT * FROM CHINOOK.EMPLOYEE WHERE LASTNAME='King';
SELECT * FROM CHINOOK.EMPLOYEE WHERE FIRSTNAME='Andrew' AND REPORTSTO IS NULL;

-- 2.2
SELECT * FROM CHINOOK.ALBUM ORDER BY TITLE DESC;
SELECT FIRSTNAME FROM CHINOOK.CUSTOMER ORDER BY CITY ASC;

-- 2.3
INSERT INTO CHINOOK.GENRE VALUES (26, 'Documentary');
INSERT INTO CHINOOK.GENRE VALUES (27, 'Spoken Word');
INSERT INTO CHINOOK.EMPLOYEE (EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE) VALUES (9, 'Johnson', 'Joyce', 'IT Staff');
INSERT INTO CHINOOK.EMPLOYEE (EMPLOYEEID, LASTNAME, FIRSTNAME, TITLE) VALUES (10, 'Lewis', 'Bryce', 'HR');
INSERT INTO CHINOOK.CUSTOMER (CUSTOMERID, LASTNAME, FIRSTNAME, EMAIL) VALUES (60, 'Thompson', 'Jennifer', 'jt@example.com');
INSERT INTO CHINOOK.CUSTOMER (CUSTOMERID, LASTNAME, FIRSTNAME, EMAIL) VALUES (61, 'Lilly', 'Brandon', 'bl@example.com');

-- 2.4
UPDATE CHINOOK.CUSTOMER SET LASTNAME='Walter', FIRSTNAME='Robert' WHERE LASTNAME='Mitchell' AND FIRSTNAME='Aaron';
UPDATE CHINOOK.ARTIST SET NAME='CCR' WHERE NAME='Creedence Clearwater Revival';

-- 2.5
SELECT * FROM CHINOOK.INVOICE WHERE BILLINGADDRESS LIKE 'T%';

-- 2.6
SELECT * FROM CHINOOK.INVOICE WHERE TOTAL BETWEEN 15 AND 60;
SELECT * FROM CHINOOK.EMPLOYEE WHERE HIREDATE BETWEEN '01-JUN-03' AND '01-MAR-04';

-- 2.7
SELECT * FROM CHINOOK.CUSTOMER WHERE FIRSTNAME='Robert' AND LASTNAME='Walter';
SELECT * FROM CHINOOK.INVOICE WHERE CUSTOMERID=32;
DELETE FROM CHINOOK.INVOICELINE WHERE INVOICEID IN (50, 61, 116, 245, 268,290,342);
DELETE FROM CHINOOK.INVOICE WHERE CUSTOMERID=32;
DELETE FROM CHINOOK.CUSTOMER WHERE FIRSTNAME='Robert' AND LASTNAME='Walter';
------------------------------------------
-- SQL FUNCTIONS
------------------------------------------
--3.1
CREATE OR REPLACE FUNCTION GET_CURRENT_TIME
RETURN TIMESTAMP
IS
BEGIN
    RETURN LOCALTIMESTAMP;
END;
/
BEGIN
DBMS_OUTPUT.PUT_LINE(GET_CURRENT_TIME);
END;
/

CREATE OR REPLACE FUNCTION GET_MEDIATYPE_LENGTH
RETURN NUMBER
IS
    MEDIATYPE_LENGTH NUMBER;
BEGIN
    SELECT LENGTH(NAME) INTO MEDIATYPE_LENGTH FROM CHINOOK.MEDIATYPE WHERE MEDIATYPEID=1;
    RETURN MEDIATYPE_LENGTH;
END;
/
BEGIN
    DBMS_OUTPUT.PUT_LINE(GET_MEDIATYPE_LENGTH);
END;

-- 3.2
CREATE OR REPLACE FUNCTION GET_AVERAGE
RETURN NUMBER
IS
AVERAGE NUMBER;
BEGIN
SELECT AVG(TOTAL) INTO AVERAGE FROM CHINOOK.INVOICE;
RETURN AVERAGE;
END;
/
BEGIN
DBMS_OUTPUT.PUT_LINE(GET_AVERAGE);
END;
/

CREATE OR REPLACE FUNCTION GET_MOST_EXPENSIVE_TRACK
RETURN NUMBER
IS
MAX_PRICE NUMBER;
BEGIN
SELECT MAX(UNITPRICE) INTO MAX_PRICE FROM CHINOOK.TRACK;
RETURN MAX_PRICE;
END;
/
BEGIN
DBMS_OUTPUT.PUT_LINE(GET_MOST_EXPENSIVE_TRACK);
END;
/

-- 3.3
CREATE OR REPLACE FUNCTION GET_AVERAGE_PRICE
RETURN NUMBER
IS
AVERAGE_PRICE NUMBER;
BEGIN
SELECT AVG(UNITPRICE) INTO AVERAGE_PRICE FROM CHINOOK.INVOICELINE;
RETURN AVERAGE_PRICE;
END;
/
BEGIN
DBMS_OUTPUT.PUT_LINE(GET_AVERAGE_PRICE);
END;
/
--3.4
CREATE TYPE T_RECORD AS OBJECT (
    EMPLOYEEID NUMBER,
    LASTNAME VARCHAR2(20 BYTE),
    FIRSTNAME VARCHAR2(20 BYTE)
);
/

SELECT * FROM CHINOOK.EMPLOYEE WHERE BIRTHDATE > '31-DEC-67';

------------------------------------------
-- STORED PROCEDURES
------------------------------------------
--4.1
CREATE OR REPLACE PROCEDURE GET_ALL_EMPLOYEE_NAMES(S OUT SYS_REFCURSOR)
IS
    FIRST_NAME CHINOOK.EMPLOYEE.FIRSTNAME%TYPE;
    LAST_NAME CHINOOK.EMPLOYEE.LASTNAME%TYPE;
BEGIN
    OPEN S FOR
    SELECT FIRSTNAME, LASTNAME FROM CHINOOK.EMPLOYEE;
        LOOP
        FETCH S INTO FIRST_NAME, LAST_NAME;
        EXIT WHEN S%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(FIRST_NAME||' '||LAST_NAME);
    END LOOP;
    CLOSE S;
END;
/
DECLARE
    S SYS_REFCURSOR;
BEGIN
    GET_ALL_EMPLOYEE_NAMES(S);
END;
/

-- 4.2

CREATE OR REPLACE PROCEDURE UPDATE_LAST_NAME(E_ID CHINOOK.EMPLOYEE.EMPLOYEEID%TYPE, L_NAME CHINOOK.EMPLOYEE.LASTNAME%TYPE)
IS
BEGIN
    UPDATE CHINOOK.EMPLOYEE
    SET LASTNAME = L_NAME
    WHERE E_ID=EMPLOYEEID;
END;
/
BEGIN
    UPDATE_LAST_NAME(3, 'Jones');
END;
/

CREATE OR REPLACE PROCEDURE GET_MANAGERS(EID IN CHINOOK.EMPLOYEE.EMPLOYEEID%TYPE)
IS
LNAME CHINOOK.EMPLOYEE.LASTNAME%TYPE;
FNAME CHINOOK.EMPLOYEE.FIRSTNAME%TYPE;
REPSTO CHINOOK.EMPLOYEE.REPORTSTO%TYPE;
BEGIN
    SELECT LASTNAME, FIRSTNAME, REPORTSTO INTO LNAME, FNAME, REPSTO
    FROM CHINOOK.EMPLOYEE
    WHERE EMPLOYEEID = EID;
    DBMS_OUTPUT.PUT_LINE(LNAME||', '||FNAME||'. MANAGER ID: '||REPSTO);
END;
/
BEGIN
    GET_MANAGERS(2);
END;
/
-- 4.3
CREATE OR REPLACE PROCEDURE GET_COMPANY (CID IN CHINOOK.CUSTOMER.CUSTOMERID%TYPE)
IS
LNAME CHINOOK.CUSTOMER.LASTNAME%TYPE;
FNAME CHINOOK.CUSTOMER.FIRSTNAME%TYPE;
COMP CHINOOK.CUSTOMER.COMPANY%TYPE;
OUTPUT VARCHAR2(300);
BEGIN
SELECT LASTNAME, FIRSTNAME, COMPANY INTO LNAME, FNAME, COMP FROM CHINOOK.CUSTOMER WHERE CUSTOMERID = CID;
DBMS_OUTPUT.PUT_LINE(LNAME||' '||FNAME||' COMPANY: '||COMP);
END;
/
BEGIN
GET_COMPANY(5);
END;
/
------------------------------------------
-- TRANSACTIONS
------------------------------------------
CONN chinook/p4ssw0rd;
CREATE OR REPLACE PROCEDURE DEL_INVOICE (INV_ID CHINOOK.INVOICE.INVOICEID%TYPE)
IS
BEGIN
    DELETE FROM CHINOOK.INVOICELINE WHERE INVOICEID = INV_ID;
    DELETE FROM CHINOOK.INVOICE WHERE INVOICEID = INV_ID;
    COMMIT;
END;
/
BEGIN
DEL_INVOICE(2);
END;
/

CONN chinook/p4ssw0rd;
CREATE OR REPLACE PROCEDURE INSERT_CUST (CUST_ID IN CHINOOK.CUSTOMER.CUSTOMERID%TYPE, F_NAME IN CHINOOK.CUSTOMER.FIRSTNAME%TYPE,
L_NAME IN CHINOOK.CUSTOMER.LASTNAME%TYPE, EML IN CHINOOK.CUSTOMER.EMAIL%TYPE)
IS
BEGIN
INSERT INTO CHINOOK.CUSTOMER (CUSTOMERID, FIRSTNAME,
LASTNAME, EMAIL) VALUES (CUST_ID, F_NAME, L_NAME, EML);
END;
/
------------------------------------------
-- TRIGGERS
------------------------------------------
-- 6.1
CREATE OR REPLACE TRIGGER TR_INSERT_EMP
AFTER INSERT ON CHINOOK.EMPLOYEE
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('EMPLOYEE RECORD INSERTED');
END;
/

CREATE OR REPLACE TRIGGER TR_UPDATE_ALBUM
AFTER UPDATE ON CHINOOK.ALBUM
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('ALBUM RECORD UPDATED');
END;
/

CREATE OR REPLACE TRIGGER TR_DELETE_CUSTOMER
AFTER DELETE ON CHINOOK.CUSTOMER
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('CUSTOMER RECORD DELETED');
END;
/
------------------------------------------
-- JOINS
------------------------------------------
-- 7.1
SELECT C.FIRSTNAME, C.LASTNAME, I.INVOICEID FROM CHINOOK.CUSTOMER C JOIN CHINOOK.INVOICE I ON C.CUSTOMERID = I.CUSTOMERID; 

-- 7.2
SELECT C.CUSTOMERID, C.FIRSTNAME, C.LASTNAME, I.INVOICEID, I.TOTAL FROM CHINOOK.CUSTOMER C FULL OUTER JOIN CHINOOK.INVOICE I ON C.CUSTOMERID = I.CUSTOMERID;

-- 7.3
SELECT AL.TITLE, AR.NAME FROM CHINOOK.ALBUM AL RIGHT JOIN CHINOOK.ARTIST AR ON AR.ARTISTID = AL.ARTISTID;

-- 7.4
SELECT AL.*, AR.* FROM CHINOOK.ALBUM AL CROSS JOIN CHINOOK.ARTIST AR ORDER BY AR.NAME ASC;

-- 7.5
SELECT E1.*, E2.* FROM CHINOOK.EMPLOYEE E1, CHINOOK.EMPLOYEE E2 WHERE E1.REPORTSTO = E2.EMPLOYEEID;