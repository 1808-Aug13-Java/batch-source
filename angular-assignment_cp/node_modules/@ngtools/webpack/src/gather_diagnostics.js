"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const ts = require("typescript");
const benchmark_1 = require("./benchmark");
class CancellationToken {
    constructor() {
        this._isCancelled = false;
    }
    requestCancellation() {
        this._isCancelled = true;
    }
    isCancellationRequested() {
        return this._isCancelled;
    }
    throwIfCancellationRequested() {
        if (this.isCancellationRequested()) {
            throw new ts.OperationCanceledException();
        }
    }
}
exports.CancellationToken = CancellationToken;
function hasErrors(diags) {
    return diags.some(d => d.category === ts.DiagnosticCategory.Error);
}
exports.hasErrors = hasErrors;
function gatherDiagnostics(program, jitMode, benchmarkLabel, cancellationToken) {
    const allDiagnostics = [];
    let checkOtherDiagnostics = true;
    function checkDiagnostics(fn) {
        if (checkOtherDiagnostics) {
            const diags = fn(undefined, cancellationToken);
            if (diags) {
                allDiagnostics.push(...diags);
                checkOtherDiagnostics = !hasErrors(diags);
            }
        }
    }
    if (jitMode) {
        const tsProgram = program;
        // Check syntactic diagnostics.
        benchmark_1.time(`${benchmarkLabel}.gatherDiagnostics.ts.getSyntacticDiagnostics`);
        checkDiagnostics(tsProgram.getSyntacticDiagnostics.bind(tsProgram));
        benchmark_1.timeEnd(`${benchmarkLabel}.gatherDiagnostics.ts.getSyntacticDiagnostics`);
        // Check semantic diagnostics.
        benchmark_1.time(`${benchmarkLabel}.gatherDiagnostics.ts.getSemanticDiagnostics`);
        checkDiagnostics(tsProgram.getSemanticDiagnostics.bind(tsProgram));
        benchmark_1.timeEnd(`${benchmarkLabel}.gatherDiagnostics.ts.getSemanticDiagnostics`);
    }
    else {
        const angularProgram = program;
        // Check TypeScript syntactic diagnostics.
        benchmark_1.time(`${benchmarkLabel}.gatherDiagnostics.ng.getTsSyntacticDiagnostics`);
        checkDiagnostics(angularProgram.getTsSyntacticDiagnostics.bind(angularProgram));
        benchmark_1.timeEnd(`${benchmarkLabel}.gatherDiagnostics.ng.getTsSyntacticDiagnostics`);
        // Check TypeScript semantic and Angular structure diagnostics.
        benchmark_1.time(`${benchmarkLabel}.gatherDiagnostics.ng.getTsSemanticDiagnostics`);
        checkDiagnostics(angularProgram.getTsSemanticDiagnostics.bind(angularProgram));
        benchmark_1.timeEnd(`${benchmarkLabel}.gatherDiagnostics.ng.getTsSemanticDiagnostics`);
        // Check Angular semantic diagnostics
        benchmark_1.time(`${benchmarkLabel}.gatherDiagnostics.ng.getNgSemanticDiagnostics`);
        checkDiagnostics(angularProgram.getNgSemanticDiagnostics.bind(angularProgram));
        benchmark_1.timeEnd(`${benchmarkLabel}.gatherDiagnostics.ng.getNgSemanticDiagnostics`);
    }
    return allDiagnostics;
}
exports.gatherDiagnostics = gatherDiagnostics;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2F0aGVyX2RpYWdub3N0aWNzLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJwYWNrYWdlcy9uZ3Rvb2xzL3dlYnBhY2svc3JjL2dhdGhlcl9kaWFnbm9zdGljcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7R0FNRztBQUNILGlDQUFpQztBQUNqQywyQ0FBNEM7QUFJNUMsTUFBYSxpQkFBaUI7SUFBOUI7UUFDVSxpQkFBWSxHQUFHLEtBQUssQ0FBQztJQWUvQixDQUFDO0lBYkMsbUJBQW1CO1FBQ2pCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO0lBQzNCLENBQUM7SUFFRCx1QkFBdUI7UUFDckIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzNCLENBQUM7SUFFRCw0QkFBNEI7UUFDMUIsSUFBSSxJQUFJLENBQUMsdUJBQXVCLEVBQUUsRUFBRTtZQUNsQyxNQUFNLElBQUksRUFBRSxDQUFDLDBCQUEwQixFQUFFLENBQUM7U0FDM0M7SUFDSCxDQUFDO0NBQ0Y7QUFoQkQsOENBZ0JDO0FBRUQsU0FBZ0IsU0FBUyxDQUFDLEtBQWtCO0lBQzFDLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEtBQUssRUFBRSxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3JFLENBQUM7QUFGRCw4QkFFQztBQUVELFNBQWdCLGlCQUFpQixDQUMvQixPQUE2QixFQUM3QixPQUFnQixFQUNoQixjQUFzQixFQUN0QixpQkFBcUM7SUFFckMsTUFBTSxjQUFjLEdBQXNDLEVBQUUsQ0FBQztJQUM3RCxJQUFJLHFCQUFxQixHQUFHLElBQUksQ0FBQztJQUVqQyxTQUFTLGdCQUFnQixDQUFxQixFQUFLO1FBQ2pELElBQUkscUJBQXFCLEVBQUU7WUFDekIsTUFBTSxLQUFLLEdBQUcsRUFBRSxDQUFDLFNBQVMsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1lBQy9DLElBQUksS0FBSyxFQUFFO2dCQUNULGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztnQkFFOUIscUJBQXFCLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDM0M7U0FDRjtJQUNILENBQUM7SUFFRCxJQUFJLE9BQU8sRUFBRTtRQUNYLE1BQU0sU0FBUyxHQUFHLE9BQXFCLENBQUM7UUFDeEMsK0JBQStCO1FBQy9CLGdCQUFJLENBQUMsR0FBRyxjQUFjLCtDQUErQyxDQUFDLENBQUM7UUFDdkUsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ3BFLG1CQUFPLENBQUMsR0FBRyxjQUFjLCtDQUErQyxDQUFDLENBQUM7UUFFMUUsOEJBQThCO1FBQzlCLGdCQUFJLENBQUMsR0FBRyxjQUFjLDhDQUE4QyxDQUFDLENBQUM7UUFDdEUsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ25FLG1CQUFPLENBQUMsR0FBRyxjQUFjLDhDQUE4QyxDQUFDLENBQUM7S0FDMUU7U0FBTTtRQUNMLE1BQU0sY0FBYyxHQUFHLE9BQWtCLENBQUM7UUFFMUMsMENBQTBDO1FBQzFDLGdCQUFJLENBQUMsR0FBRyxjQUFjLGlEQUFpRCxDQUFDLENBQUM7UUFDekUsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLHlCQUF5QixDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO1FBQ2hGLG1CQUFPLENBQUMsR0FBRyxjQUFjLGlEQUFpRCxDQUFDLENBQUM7UUFFNUUsK0RBQStEO1FBQy9ELGdCQUFJLENBQUMsR0FBRyxjQUFjLGdEQUFnRCxDQUFDLENBQUM7UUFDeEUsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO1FBQy9FLG1CQUFPLENBQUMsR0FBRyxjQUFjLGdEQUFnRCxDQUFDLENBQUM7UUFFM0UscUNBQXFDO1FBQ3JDLGdCQUFJLENBQUMsR0FBRyxjQUFjLGdEQUFnRCxDQUFDLENBQUM7UUFDeEUsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLHdCQUF3QixDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO1FBQy9FLG1CQUFPLENBQUMsR0FBRyxjQUFjLGdEQUFnRCxDQUFDLENBQUM7S0FDNUU7SUFFRCxPQUFPLGNBQWMsQ0FBQztBQUN4QixDQUFDO0FBbkRELDhDQW1EQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCAqIGFzIHRzIGZyb20gJ3R5cGVzY3JpcHQnO1xuaW1wb3J0IHsgdGltZSwgdGltZUVuZCB9IGZyb20gJy4vYmVuY2htYXJrJztcbmltcG9ydCB7IERpYWdub3N0aWMsIERpYWdub3N0aWNzLCBQcm9ncmFtIH0gZnJvbSAnLi9uZ3Rvb2xzX2FwaSc7XG5cblxuZXhwb3J0IGNsYXNzIENhbmNlbGxhdGlvblRva2VuIGltcGxlbWVudHMgdHMuQ2FuY2VsbGF0aW9uVG9rZW4ge1xuICBwcml2YXRlIF9pc0NhbmNlbGxlZCA9IGZhbHNlO1xuXG4gIHJlcXVlc3RDYW5jZWxsYXRpb24oKSB7XG4gICAgdGhpcy5faXNDYW5jZWxsZWQgPSB0cnVlO1xuICB9XG5cbiAgaXNDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lzQ2FuY2VsbGVkO1xuICB9XG5cbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCgpIHtcbiAgICBpZiAodGhpcy5pc0NhbmNlbGxhdGlvblJlcXVlc3RlZCgpKSB7XG4gICAgICB0aHJvdyBuZXcgdHMuT3BlcmF0aW9uQ2FuY2VsZWRFeGNlcHRpb24oKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc0Vycm9ycyhkaWFnczogRGlhZ25vc3RpY3MpIHtcbiAgcmV0dXJuIGRpYWdzLnNvbWUoZCA9PiBkLmNhdGVnb3J5ID09PSB0cy5EaWFnbm9zdGljQ2F0ZWdvcnkuRXJyb3IpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2F0aGVyRGlhZ25vc3RpY3MoXG4gIHByb2dyYW06IHRzLlByb2dyYW0gfCBQcm9ncmFtLFxuICBqaXRNb2RlOiBib29sZWFuLFxuICBiZW5jaG1hcmtMYWJlbDogc3RyaW5nLFxuICBjYW5jZWxsYXRpb25Ub2tlbj86IENhbmNlbGxhdGlvblRva2VuLFxuKTogRGlhZ25vc3RpY3Mge1xuICBjb25zdCBhbGxEaWFnbm9zdGljczogQXJyYXk8dHMuRGlhZ25vc3RpYyB8IERpYWdub3N0aWM+ID0gW107XG4gIGxldCBjaGVja090aGVyRGlhZ25vc3RpY3MgPSB0cnVlO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRGlhZ25vc3RpY3M8VCBleHRlbmRzIEZ1bmN0aW9uPihmbjogVCkge1xuICAgIGlmIChjaGVja090aGVyRGlhZ25vc3RpY3MpIHtcbiAgICAgIGNvbnN0IGRpYWdzID0gZm4odW5kZWZpbmVkLCBjYW5jZWxsYXRpb25Ub2tlbik7XG4gICAgICBpZiAoZGlhZ3MpIHtcbiAgICAgICAgYWxsRGlhZ25vc3RpY3MucHVzaCguLi5kaWFncyk7XG5cbiAgICAgICAgY2hlY2tPdGhlckRpYWdub3N0aWNzID0gIWhhc0Vycm9ycyhkaWFncyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGppdE1vZGUpIHtcbiAgICBjb25zdCB0c1Byb2dyYW0gPSBwcm9ncmFtIGFzIHRzLlByb2dyYW07XG4gICAgLy8gQ2hlY2sgc3ludGFjdGljIGRpYWdub3N0aWNzLlxuICAgIHRpbWUoYCR7YmVuY2htYXJrTGFiZWx9LmdhdGhlckRpYWdub3N0aWNzLnRzLmdldFN5bnRhY3RpY0RpYWdub3N0aWNzYCk7XG4gICAgY2hlY2tEaWFnbm9zdGljcyh0c1Byb2dyYW0uZ2V0U3ludGFjdGljRGlhZ25vc3RpY3MuYmluZCh0c1Byb2dyYW0pKTtcbiAgICB0aW1lRW5kKGAke2JlbmNobWFya0xhYmVsfS5nYXRoZXJEaWFnbm9zdGljcy50cy5nZXRTeW50YWN0aWNEaWFnbm9zdGljc2ApO1xuXG4gICAgLy8gQ2hlY2sgc2VtYW50aWMgZGlhZ25vc3RpY3MuXG4gICAgdGltZShgJHtiZW5jaG1hcmtMYWJlbH0uZ2F0aGVyRGlhZ25vc3RpY3MudHMuZ2V0U2VtYW50aWNEaWFnbm9zdGljc2ApO1xuICAgIGNoZWNrRGlhZ25vc3RpY3ModHNQcm9ncmFtLmdldFNlbWFudGljRGlhZ25vc3RpY3MuYmluZCh0c1Byb2dyYW0pKTtcbiAgICB0aW1lRW5kKGAke2JlbmNobWFya0xhYmVsfS5nYXRoZXJEaWFnbm9zdGljcy50cy5nZXRTZW1hbnRpY0RpYWdub3N0aWNzYCk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgYW5ndWxhclByb2dyYW0gPSBwcm9ncmFtIGFzIFByb2dyYW07XG5cbiAgICAvLyBDaGVjayBUeXBlU2NyaXB0IHN5bnRhY3RpYyBkaWFnbm9zdGljcy5cbiAgICB0aW1lKGAke2JlbmNobWFya0xhYmVsfS5nYXRoZXJEaWFnbm9zdGljcy5uZy5nZXRUc1N5bnRhY3RpY0RpYWdub3N0aWNzYCk7XG4gICAgY2hlY2tEaWFnbm9zdGljcyhhbmd1bGFyUHJvZ3JhbS5nZXRUc1N5bnRhY3RpY0RpYWdub3N0aWNzLmJpbmQoYW5ndWxhclByb2dyYW0pKTtcbiAgICB0aW1lRW5kKGAke2JlbmNobWFya0xhYmVsfS5nYXRoZXJEaWFnbm9zdGljcy5uZy5nZXRUc1N5bnRhY3RpY0RpYWdub3N0aWNzYCk7XG5cbiAgICAvLyBDaGVjayBUeXBlU2NyaXB0IHNlbWFudGljIGFuZCBBbmd1bGFyIHN0cnVjdHVyZSBkaWFnbm9zdGljcy5cbiAgICB0aW1lKGAke2JlbmNobWFya0xhYmVsfS5nYXRoZXJEaWFnbm9zdGljcy5uZy5nZXRUc1NlbWFudGljRGlhZ25vc3RpY3NgKTtcbiAgICBjaGVja0RpYWdub3N0aWNzKGFuZ3VsYXJQcm9ncmFtLmdldFRzU2VtYW50aWNEaWFnbm9zdGljcy5iaW5kKGFuZ3VsYXJQcm9ncmFtKSk7XG4gICAgdGltZUVuZChgJHtiZW5jaG1hcmtMYWJlbH0uZ2F0aGVyRGlhZ25vc3RpY3MubmcuZ2V0VHNTZW1hbnRpY0RpYWdub3N0aWNzYCk7XG5cbiAgICAvLyBDaGVjayBBbmd1bGFyIHNlbWFudGljIGRpYWdub3N0aWNzXG4gICAgdGltZShgJHtiZW5jaG1hcmtMYWJlbH0uZ2F0aGVyRGlhZ25vc3RpY3MubmcuZ2V0TmdTZW1hbnRpY0RpYWdub3N0aWNzYCk7XG4gICAgY2hlY2tEaWFnbm9zdGljcyhhbmd1bGFyUHJvZ3JhbS5nZXROZ1NlbWFudGljRGlhZ25vc3RpY3MuYmluZChhbmd1bGFyUHJvZ3JhbSkpO1xuICAgIHRpbWVFbmQoYCR7YmVuY2htYXJrTGFiZWx9LmdhdGhlckRpYWdub3N0aWNzLm5nLmdldE5nU2VtYW50aWNEaWFnbm9zdGljc2ApO1xuICB9XG5cbiAgcmV0dXJuIGFsbERpYWdub3N0aWNzO1xufVxuIl19