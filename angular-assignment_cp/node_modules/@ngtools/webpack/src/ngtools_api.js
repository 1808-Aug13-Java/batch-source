"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
exports.DEFAULT_ERROR_CODE = 100;
exports.UNKNOWN_ERROR_CODE = 500;
exports.SOURCE = 'angular';
function _error(api, fn) {
    throw new Error('Could not find API ' + api + ', function ' + fn);
}
function getApiMember(api, func, apiName) {
    return api && api[func] || _error(apiName, func.toString());
}
// Manually check for Compiler CLI availability and supported version.
// This is needed because @ngtools/webpack does not depend directly on @angular/compiler-cli, since
// it is installed as part of global Angular CLI installs and compiler-cli is not of its
// dependencies.
function CompilerCliIsSupported() {
    let version;
    // Check that Angular is available.
    try {
        version = require('@angular/compiler-cli').VERSION;
    }
    catch (e) {
        throw new Error('The "@angular/compiler-cli" package was not properly installed. Error: ' + e);
    }
    // Check that Angular is also not part of this module's node_modules (it should be the project's).
    const compilerCliPath = require.resolve('@angular/compiler-cli');
    if (compilerCliPath.startsWith(path.dirname(__dirname))) {
        throw new Error('The @ngtools/webpack plugin now relies on the project @angular/compiler-cli. '
            + 'Please clean your node_modules and reinstall.');
    }
    // Throw if we're less than 5.x
    if (Number(version.major) < 5) {
        throw new Error('Version of @angular/compiler-cli needs to be 5.0.0 or greater. '
            + `Current version is "${version.full}".`);
    }
}
exports.CompilerCliIsSupported = CompilerCliIsSupported;
// These imports do not exist on a global install for Angular CLI, so we cannot use a static ES6
// import.
let compilerCli = null;
try {
    compilerCli = require('@angular/compiler-cli');
}
catch (_a) {
    // Don't throw an error if the private API does not exist.
    // Instead, the `CompilerCliIsSupported` method should return throw and indicate the
    // plugin cannot be used.
}
exports.VERSION = getApiMember(compilerCli, 'VERSION', 'compiler-cli');
exports.__NGTOOLS_PRIVATE_API_2 = getApiMember(compilerCli, '__NGTOOLS_PRIVATE_API_2', 'compiler-cli');
exports.readConfiguration = getApiMember(compilerCli, 'readConfiguration', 'compiler-cli');
// These imports do not exist on Angular versions lower than 5, so we cannot use a static ES6
// import.
let ngtools2 = null;
try {
    ngtools2 = require('@angular/compiler-cli/ngtools2');
}
catch (_b) {
    // Don't throw an error if the private API does not exist.
}
exports.createProgram = getApiMember(ngtools2, 'createProgram', 'ngtools2');
exports.createCompilerHost = getApiMember(ngtools2, 'createCompilerHost', 'ngtools2');
exports.formatDiagnostics = getApiMember(ngtools2, 'formatDiagnostics', 'ngtools2');
exports.EmitFlags = getApiMember(ngtools2, 'EmitFlags', 'ngtools2');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd0b29sc19hcGkuanMiLCJzb3VyY2VSb290IjoiLi8iLCJzb3VyY2VzIjpbInBhY2thZ2VzL25ndG9vbHMvd2VicGFjay9zcmMvbmd0b29sc19hcGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFhQSw2QkFBNkI7QUFHaEIsUUFBQSxrQkFBa0IsR0FBRyxHQUFHLENBQUM7QUFDekIsUUFBQSxrQkFBa0IsR0FBRyxHQUFHLENBQUM7QUFDekIsUUFBQSxNQUFNLEdBQUcsU0FBc0IsQ0FBQztBQVE3QyxTQUFTLE1BQU0sQ0FBQyxHQUFXLEVBQUUsRUFBVTtJQUNyQyxNQUFNLElBQUksS0FBSyxDQUFDLHFCQUFxQixHQUFHLEdBQUcsR0FBRyxhQUFhLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFDcEUsQ0FBQztBQUVELFNBQVMsWUFBWSxDQUNuQixHQUFhLEVBQ2IsSUFBTyxFQUNQLE9BQWU7SUFFZixPQUFPLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztBQUM5RCxDQUFDO0FBRUQsc0VBQXNFO0FBQ3RFLG1HQUFtRztBQUNuRyx3RkFBd0Y7QUFDeEYsZ0JBQWdCO0FBQ2hCLFNBQWdCLHNCQUFzQjtJQUNwQyxJQUFJLE9BQU8sQ0FBQztJQUVaLG1DQUFtQztJQUNuQyxJQUFJO1FBQ0YsT0FBTyxHQUFJLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBZ0IsQ0FBQyxPQUFPLENBQUM7S0FDcEU7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNWLE1BQU0sSUFBSSxLQUFLLENBQUMseUVBQXlFLEdBQUcsQ0FBQyxDQUFDLENBQUM7S0FDaEc7SUFFRCxrR0FBa0c7SUFDbEcsTUFBTSxlQUFlLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0lBQ2pFLElBQUksZUFBZSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUU7UUFDdkQsTUFBTSxJQUFJLEtBQUssQ0FBQywrRUFBK0U7Y0FDM0YsK0NBQStDLENBQUMsQ0FBQztLQUN0RDtJQUVELCtCQUErQjtJQUMvQixJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQzdCLE1BQU0sSUFBSSxLQUFLLENBQUMsaUVBQWlFO2NBQzdFLHVCQUF1QixPQUFPLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQztLQUM5QztBQUNILENBQUM7QUF0QkQsd0RBc0JDO0FBRUQsZ0dBQWdHO0FBQ2hHLFVBQVU7QUFDVixJQUFJLFdBQVcsR0FBc0IsSUFBSSxDQUFDO0FBQzFDLElBQUk7SUFDRixXQUFXLEdBQUcsT0FBTyxDQUFDLHVCQUF1QixDQUFDLENBQUM7Q0FDaEQ7QUFBQyxXQUFNO0lBQ04sMERBQTBEO0lBQzFELG9GQUFvRjtJQUNwRix5QkFBeUI7Q0FDMUI7QUFFWSxRQUFBLE9BQU8sR0FBdUIsWUFBWSxDQUFDLFdBQVcsRUFBRSxTQUFTLEVBQUUsY0FBYyxDQUFDLENBQUM7QUFDbkYsUUFBQSx1QkFBdUIsR0FBRyxZQUFZLENBQ2pELFdBQVcsRUFDWCx5QkFBeUIsRUFDekIsY0FBYyxDQUNmLENBQUM7QUFDVyxRQUFBLGlCQUFpQixHQUFHLFlBQVksQ0FBQyxXQUFXLEVBQUUsbUJBQW1CLEVBQUUsY0FBYyxDQUFDLENBQUM7QUFFaEcsNkZBQTZGO0FBQzdGLFVBQVU7QUFDVixJQUFJLFFBQVEsR0FBMEIsSUFBSSxDQUFDO0FBQzNDLElBQUk7SUFDRixRQUFRLEdBQUcsT0FBTyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7Q0FDdEQ7QUFBQyxXQUFNO0lBQ04sMERBQTBEO0NBQzNEO0FBRVksUUFBQSxhQUFhLEdBQUcsWUFBWSxDQUFDLFFBQVEsRUFBRSxlQUFlLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDcEUsUUFBQSxrQkFBa0IsR0FBRyxZQUFZLENBQUMsUUFBUSxFQUFFLG9CQUFvQixFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQzlFLFFBQUEsaUJBQWlCLEdBQUcsWUFBWSxDQUFDLFFBQVEsRUFBRSxtQkFBbUIsRUFBRSxVQUFVLENBQUMsQ0FBQztBQUM1RSxRQUFBLFNBQVMsR0FBRyxZQUFZLENBQUMsUUFBUSxFQUFFLFdBQVcsRUFBRSxVQUFVLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbi8vIFdlIGRpc2FibGUgaW1wbGljaXQgZGVwZW5kZW5jY2llcyBiZWNhdXNlIHRob3NlIGFyZSBvbmx5IGZvciB0eXBpbmdzIGFuZCBkb24ndCBoYXZlIGEgcnVudGltZVxuLy8gZXF1aXZhbGVudC5cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1nbG9iYWwtdHNsaW50LWRpc2FibGVcbi8vIHRzbGludDpkaXNhYmxlOm5vLWltcGxpY2l0LWRlcGVuZGVuY2llc1xuaW1wb3J0ICogYXMgbmdjIGZyb20gJ0Bhbmd1bGFyL2NvbXBpbGVyLWNsaSc7XG5pbXBvcnQgKiBhcyBuZ3Rvb2xzIGZyb20gJ0Bhbmd1bGFyL2NvbXBpbGVyLWNsaS9uZ3Rvb2xzMic7XG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0ICogYXMgdHMgZnJvbSAndHlwZXNjcmlwdCc7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX0VSUk9SX0NPREUgPSAxMDA7XG5leHBvcnQgY29uc3QgVU5LTk9XTl9FUlJPUl9DT0RFID0gNTAwO1xuZXhwb3J0IGNvbnN0IFNPVVJDRSA9ICdhbmd1bGFyJyBhcyAnYW5ndWxhcic7XG5cbmV4cG9ydCB0eXBlIENvbXBpbGVyT3B0aW9ucyA9IG5nYy5Db21waWxlck9wdGlvbnM7XG5leHBvcnQgdHlwZSBDb21waWxlckhvc3QgPSBuZ3Rvb2xzLkNvbXBpbGVySG9zdDtcbmV4cG9ydCB0eXBlIFByb2dyYW0gPSBuZ3Rvb2xzLlByb2dyYW07XG5leHBvcnQgdHlwZSBEaWFnbm9zdGljID0gbmd0b29scy5EaWFnbm9zdGljO1xuZXhwb3J0IHR5cGUgRGlhZ25vc3RpY3MgPSBSZWFkb25seUFycmF5PHRzLkRpYWdub3N0aWMgfCBEaWFnbm9zdGljPjtcblxuZnVuY3Rpb24gX2Vycm9yKGFwaTogc3RyaW5nLCBmbjogc3RyaW5nKTogbmV2ZXIge1xuICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBmaW5kIEFQSSAnICsgYXBpICsgJywgZnVuY3Rpb24gJyArIGZuKTtcbn1cblxuZnVuY3Rpb24gZ2V0QXBpTWVtYmVyPFQsIEsgZXh0ZW5kcyBrZXlvZiBUPihcbiAgYXBpOiBUIHwgbnVsbCxcbiAgZnVuYzogSyxcbiAgYXBpTmFtZTogc3RyaW5nLFxuKTogVFtLXSB7XG4gIHJldHVybiBhcGkgJiYgYXBpW2Z1bmNdIHx8IF9lcnJvcihhcGlOYW1lLCBmdW5jLnRvU3RyaW5nKCkpO1xufVxuXG4vLyBNYW51YWxseSBjaGVjayBmb3IgQ29tcGlsZXIgQ0xJIGF2YWlsYWJpbGl0eSBhbmQgc3VwcG9ydGVkIHZlcnNpb24uXG4vLyBUaGlzIGlzIG5lZWRlZCBiZWNhdXNlIEBuZ3Rvb2xzL3dlYnBhY2sgZG9lcyBub3QgZGVwZW5kIGRpcmVjdGx5IG9uIEBhbmd1bGFyL2NvbXBpbGVyLWNsaSwgc2luY2Vcbi8vIGl0IGlzIGluc3RhbGxlZCBhcyBwYXJ0IG9mIGdsb2JhbCBBbmd1bGFyIENMSSBpbnN0YWxscyBhbmQgY29tcGlsZXItY2xpIGlzIG5vdCBvZiBpdHNcbi8vIGRlcGVuZGVuY2llcy5cbmV4cG9ydCBmdW5jdGlvbiBDb21waWxlckNsaUlzU3VwcG9ydGVkKCkge1xuICBsZXQgdmVyc2lvbjtcblxuICAvLyBDaGVjayB0aGF0IEFuZ3VsYXIgaXMgYXZhaWxhYmxlLlxuICB0cnkge1xuICAgIHZlcnNpb24gPSAocmVxdWlyZSgnQGFuZ3VsYXIvY29tcGlsZXItY2xpJykgYXMgdHlwZW9mIG5nYykuVkVSU0lPTjtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignVGhlIFwiQGFuZ3VsYXIvY29tcGlsZXItY2xpXCIgcGFja2FnZSB3YXMgbm90IHByb3Blcmx5IGluc3RhbGxlZC4gRXJyb3I6ICcgKyBlKTtcbiAgfVxuXG4gIC8vIENoZWNrIHRoYXQgQW5ndWxhciBpcyBhbHNvIG5vdCBwYXJ0IG9mIHRoaXMgbW9kdWxlJ3Mgbm9kZV9tb2R1bGVzIChpdCBzaG91bGQgYmUgdGhlIHByb2plY3QncykuXG4gIGNvbnN0IGNvbXBpbGVyQ2xpUGF0aCA9IHJlcXVpcmUucmVzb2x2ZSgnQGFuZ3VsYXIvY29tcGlsZXItY2xpJyk7XG4gIGlmIChjb21waWxlckNsaVBhdGguc3RhcnRzV2l0aChwYXRoLmRpcm5hbWUoX19kaXJuYW1lKSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBAbmd0b29scy93ZWJwYWNrIHBsdWdpbiBub3cgcmVsaWVzIG9uIHRoZSBwcm9qZWN0IEBhbmd1bGFyL2NvbXBpbGVyLWNsaS4gJ1xuICAgICAgKyAnUGxlYXNlIGNsZWFuIHlvdXIgbm9kZV9tb2R1bGVzIGFuZCByZWluc3RhbGwuJyk7XG4gIH1cblxuICAvLyBUaHJvdyBpZiB3ZSdyZSBsZXNzIHRoYW4gNS54XG4gIGlmIChOdW1iZXIodmVyc2lvbi5tYWpvcikgPCA1KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdWZXJzaW9uIG9mIEBhbmd1bGFyL2NvbXBpbGVyLWNsaSBuZWVkcyB0byBiZSA1LjAuMCBvciBncmVhdGVyLiAnXG4gICAgICArIGBDdXJyZW50IHZlcnNpb24gaXMgXCIke3ZlcnNpb24uZnVsbH1cIi5gKTtcbiAgfVxufVxuXG4vLyBUaGVzZSBpbXBvcnRzIGRvIG5vdCBleGlzdCBvbiBhIGdsb2JhbCBpbnN0YWxsIGZvciBBbmd1bGFyIENMSSwgc28gd2UgY2Fubm90IHVzZSBhIHN0YXRpYyBFUzZcbi8vIGltcG9ydC5cbmxldCBjb21waWxlckNsaTogdHlwZW9mIG5nYyB8IG51bGwgPSBudWxsO1xudHJ5IHtcbiAgY29tcGlsZXJDbGkgPSByZXF1aXJlKCdAYW5ndWxhci9jb21waWxlci1jbGknKTtcbn0gY2F0Y2gge1xuICAvLyBEb24ndCB0aHJvdyBhbiBlcnJvciBpZiB0aGUgcHJpdmF0ZSBBUEkgZG9lcyBub3QgZXhpc3QuXG4gIC8vIEluc3RlYWQsIHRoZSBgQ29tcGlsZXJDbGlJc1N1cHBvcnRlZGAgbWV0aG9kIHNob3VsZCByZXR1cm4gdGhyb3cgYW5kIGluZGljYXRlIHRoZVxuICAvLyBwbHVnaW4gY2Fubm90IGJlIHVzZWQuXG59XG5cbmV4cG9ydCBjb25zdCBWRVJTSU9OOiB0eXBlb2YgbmdjLlZFUlNJT04gPSBnZXRBcGlNZW1iZXIoY29tcGlsZXJDbGksICdWRVJTSU9OJywgJ2NvbXBpbGVyLWNsaScpO1xuZXhwb3J0IGNvbnN0IF9fTkdUT09MU19QUklWQVRFX0FQSV8yID0gZ2V0QXBpTWVtYmVyKFxuICBjb21waWxlckNsaSxcbiAgJ19fTkdUT09MU19QUklWQVRFX0FQSV8yJyxcbiAgJ2NvbXBpbGVyLWNsaScsXG4pO1xuZXhwb3J0IGNvbnN0IHJlYWRDb25maWd1cmF0aW9uID0gZ2V0QXBpTWVtYmVyKGNvbXBpbGVyQ2xpLCAncmVhZENvbmZpZ3VyYXRpb24nLCAnY29tcGlsZXItY2xpJyk7XG5cbi8vIFRoZXNlIGltcG9ydHMgZG8gbm90IGV4aXN0IG9uIEFuZ3VsYXIgdmVyc2lvbnMgbG93ZXIgdGhhbiA1LCBzbyB3ZSBjYW5ub3QgdXNlIGEgc3RhdGljIEVTNlxuLy8gaW1wb3J0LlxubGV0IG5ndG9vbHMyOiB0eXBlb2Ygbmd0b29scyB8IG51bGwgPSBudWxsO1xudHJ5IHtcbiAgbmd0b29sczIgPSByZXF1aXJlKCdAYW5ndWxhci9jb21waWxlci1jbGkvbmd0b29sczInKTtcbn0gY2F0Y2gge1xuICAvLyBEb24ndCB0aHJvdyBhbiBlcnJvciBpZiB0aGUgcHJpdmF0ZSBBUEkgZG9lcyBub3QgZXhpc3QuXG59XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVQcm9ncmFtID0gZ2V0QXBpTWVtYmVyKG5ndG9vbHMyLCAnY3JlYXRlUHJvZ3JhbScsICduZ3Rvb2xzMicpO1xuZXhwb3J0IGNvbnN0IGNyZWF0ZUNvbXBpbGVySG9zdCA9IGdldEFwaU1lbWJlcihuZ3Rvb2xzMiwgJ2NyZWF0ZUNvbXBpbGVySG9zdCcsICduZ3Rvb2xzMicpO1xuZXhwb3J0IGNvbnN0IGZvcm1hdERpYWdub3N0aWNzID0gZ2V0QXBpTWVtYmVyKG5ndG9vbHMyLCAnZm9ybWF0RGlhZ25vc3RpY3MnLCAnbmd0b29sczInKTtcbmV4cG9ydCBjb25zdCBFbWl0RmxhZ3MgPSBnZXRBcGlNZW1iZXIobmd0b29sczIsICdFbWl0RmxhZ3MnLCAnbmd0b29sczInKTtcbiJdfQ==