<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spring</title>
  <link rel="alternate" href="https://spring.io/blog" />
  <link rel="self" href="https://spring.io/blog.atom" />
  <id>http://spring.io/blog.atom</id>
  <icon>https://spring.io/favicon.ico</icon>
  <updated>2018-10-09T22:13:12Z</updated>
  <entry>
    <title>This Week in Spring - October 9th, 2018</title>
    <link rel="alternate" href="https://spring.io/blog/2018/10/09/this-week-in-spring-october-9th-2018" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2018-10-09:3425</id>
    <updated>2018-10-09T22:13:12Z</updated>
    <content type="html">&lt;p&gt;Hi Spring fans! This week I&amp;rsquo;m in sunny San Francisco for the epic SpringOne Tour San Francisco event. I&amp;rsquo;m also heads down preparing for the rush of travel ahead of me. Starting on the 14th, I&amp;rsquo;ll start four weeks of travel, bringing the message far-and-wide to Toronto, St. Petersburg, Brussels, San Francisco, Hartford, Paris, Beijing, Tokyo, Singapore, Seoul, Hong Kong, and.. I forget.. but there&amp;rsquo;s more! I&amp;rsquo;m so looking forward to seeing you all at each and everyone of those places! &lt;/p&gt;
&lt;p&gt;I also loved this tweet from Pivotal today for me:&lt;/p&gt;
&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Josh we&amp;#39;re working on putting a Spring signal on the roof. &lt;a href="https://t.co/OInXwcte6Y"&gt;pic.twitter.com/OInXwcte6Y&lt;/a&gt;&lt;/p&gt;&amp;mdash; Pivotal (@pivotal) &lt;a href="https://twitter.com/pivotal/status/1049719247562100736?ref_src=twsrc%5Etfw"&gt;October 9, 2018&lt;/a&gt;&lt;/blockquote&gt;&lt;br/&gt;&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;Anyway, there&amp;rsquo;s SO MUCH to cover so let&amp;rsquo;s get to it! &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2018/10/03/spring-cloud-open-service-broker-3-0-0-m1-released"&gt;Spring Cloud Open Service Broker 3.0.0.M1 released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2018/10/03/spring-cloud-open-service-broker-2-1-0-m1-released"&gt;Spring Cloud Open Service Broker 2.1.0.M1 released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This is pretty cool! we&amp;rsquo;re excited to announce, &lt;a href="https://content.pivotal.io/blog/peace-of-mind-for-developers-and-operators-buildpacks-is-now-a-cncf-project-welcome-cloud-native-buildpacks"&gt;along with Heroku and the Cloud Native Computing Foundation&lt;/a&gt;, that the Cloud Natives Buildpacks technology was accepted int he CNCF!&lt;/li&gt;
  &lt;li&gt;Hola mundo! Read Spanish? Know someone who does? &lt;a href="https://spring.io/blog/2018/10/03/spring-noticias-en-espa-ol-2-de-octubre-2018"&gt;You might appreciate this curated list of interesting reading, en Español!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Happy &lt;a href="https://en.wikipedia.org/wiki/Ada_Lovelace"&gt;Ada Lovelace&lt;/a&gt; day! As you know, we name each Spring Data release train after a prominent computer scientist. This one is named for Ada Lovelace, an English mathematician and writer, she was chiefly known for her work on Charles Babbage&amp;rsquo;s proposed mechanical general-purpose computer, the Analytical Engine. Once you&amp;rsquo;re done reading more into this hero and this self described &amp;ldquo;poetical scientist&amp;rdquo;, you might also &lt;a href="https://twitter.com/springdata/status/1049696283626299393?s=12"&gt;read up on the new features our current Spring Data Lovelace release train&lt;/a&gt;!&lt;/li&gt;
  &lt;li&gt;Check out part two of &lt;a href="http://twitter.com/rseroter"&gt;Richard Seroter&lt;/a&gt;&amp;rsquo;s epic &lt;a href="https://twitter.com/rseroter/status/1049683902766313473?s=12"&gt;series on routing in Cloud Foundry&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I love this blog that &lt;a href="https://javatechnicalwealth.com/blog/reactive-flatmap/"&gt;looks at &lt;code&gt;flatMap&lt;/code&gt;&lt;/a&gt; in the context of reactive programming as, for example, you might use it in Pivotal&amp;rsquo;s Reactor&lt;/li&gt;
  &lt;li&gt;Check out the &lt;a href="https://twitter.com/sdeleuze/status/1049637509066579968?s=12"&gt;new configuration styles supported in Spring Fu &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Check out this post on &lt;a href="https://twitter.com/danotorrey/status/1049644719687503872?s=12"&gt;logging with Graylog in a Spring Boot application&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This is an interesting new initiative! Hopefully we&amp;rsquo;ll see more videos like this &lt;a href="https://www.youtube.com/watch?v=6flKif97qb8"&gt;from community member Maciej Walkowiak&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;We want to hear from you! Check out this Github issue on JUnit 5 support with Spring Boot. Sound off! &lt;a href="https://twitter.com/olivergierke/status/1049318398512062466?s=12"&gt;We want &lt;em&gt;your&lt;/em&gt; feedback!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Jaxenter continues its series looking at Java 11 with different folks in the Java ecosystem, including yours truly. This latest post looks at &lt;a href="https://jaxenter.com/manual-java-11-series-part-3-150308.html"&gt;some of the cleverest hacks in Java 11&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/adrianfcole/status/1049092848484667392?s=12"&gt;this is your system on kafka and zipkin!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I loved this post &lt;a href="https://itwarilal.github.io/java/spring-boot/2018/10/06/boot-cassandra.html"&gt;on Cassandra schema migration with Spring Boot projects&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Check out Spring founder and &lt;a href="https://twitter.com/springrod/status/1048452702391296001?s=12"&gt;Atomist CEO Rod Johnson&amp;rsquo;s SpringOne Platform 2018 talk&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Framework 5.2 looks to be a &lt;a href="https://twitter.com/rstoya05/status/1047177857863229445?s=12"&gt;heckuva release&lt;/a&gt;! It includes, among other things, RSocket and non-blocking event listeners.&lt;/li&gt;
  &lt;li&gt;I love this Okta post, &lt;a href="https://developer.okta.com/blog/2018/10/05/build-a-spring-boot-app-with-user-authentication"&gt;&amp;ldquo;Add User Authentication to Your Spring Boot App in 15 Minutes&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://flywaydb.org/blog/flyway-5.2.0"&gt;Flyway 5.2.0 Released - Flyway 5.2.0 - Flyway by Boxfuse • Database Migrations Made Easy.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A nice post on &lt;a href="https://dzone.com/articles/versioning-restful-services-with-spring-boot"&gt;versioning RESTful services with Spring Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Want to learn more about the motivations underpinning our support of R2DBC, an approach to reactive data access for SQL-based data stores? &lt;a href="https://twitter.com/olivergierke/status/1048159851266891777?s=12"&gt;Check this post out!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Did you miss SpringOne Platform 2018? (Why? It was epic!) &lt;a href="https://m.youtube.com/playlist?list=PLAdzTan_eSPQsR_aqYBQxpYTEQZnjhTN6&amp;disable_polymer=true"&gt;Check out this YouTube playlist with all the videos that are up&lt;/a&gt;. Great job Pieter Humphrey!&lt;/li&gt;
  &lt;li&gt;InfoQ have a nice post &lt;a href="https://www.infoq.com/news/2018/10/rsocket-facebook"&gt;on our initial support for RSocket&lt;/a&gt; announced at SpringOne Platform 2018. Check it out!&lt;/li&gt;
  &lt;li&gt;Among the &lt;em&gt;many&lt;/em&gt; gems we debuted &lt;a href="https://m.youtube.com/watch?v=idApf9DMdfk"&gt;at SpringOne Platform 2018 was this gem, R2DBC, a reactive data access API for SQL datastores&lt;/a&gt;. Watch this video by R2DBC ninja Ben Hale for more.&lt;/li&gt;
  &lt;li&gt;Check out this &lt;a href="https://www.youtube.com/watch?v=s_MEIXDo0-Q"&gt;talk introducing reactive MongoDB transactions, streaming and more&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/cloudfoundry/status/1047864637595770881"&gt;https://twitter.com/cloudfoundry/status/1047864637595770881&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud Open Service Broker 3.0.0.M1 released</title>
    <link rel="alternate" href="https://spring.io/blog/2018/10/03/spring-cloud-open-service-broker-3-0-0-m1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Roy Clarkson</name>
    </author>
    <id>tag:spring.io,2018-10-03:3424</id>
    <updated>2018-10-03T20:31:24Z</updated>
    <content type="html">&lt;p&gt;We&amp;rsquo;re please to announce the release of Spring Cloud Open Service Broker 3.0.0.M1. The 3.0 release introduces full reactive support and builds upon 2.1.0.M1, which will support additions and changes in the &lt;a href="https://www.openservicebrokerapi.org/blog/2018/08/21/open-service-broker-v2-14-released"&gt;Open Service Broker API v2.14&lt;/a&gt;. This release includes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;First class support for Spring WebFlux and Project Reactor&lt;/li&gt;
  &lt;li&gt;The starter has been renamed because it now supports both Spring web frameworks&lt;/li&gt;
  &lt;li&gt;Introduces several reactive life cycle hooks for performing additional operations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Include the following Spring Boot starter:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;&amp;lt;dependency&amp;gt;&#xD;
  &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt;&#xD;
  &amp;lt;artifactId&amp;gt;spring-cloud-starter-open-service-broker&amp;lt;/artifactId&amp;gt;&#xD;
  &amp;lt;version&amp;gt;3.0.0.M1&amp;lt;/version&amp;gt;&#xD;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Use the Spring Milestone Repository:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;&amp;lt;repository&amp;gt;&#xD;
  &amp;lt;id&amp;gt;spring-milestones&amp;lt;/id&amp;gt;&#xD;
  &amp;lt;url&amp;gt;https://repo.spring.io/milestone&amp;lt;/url&amp;gt;&#xD;
&amp;lt;/repository&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;View the details of the closed &lt;a href="https://github.com/spring-cloud/spring-cloud-open-service-broker/milestone/12?closed=1"&gt;issues&lt;/a&gt; for this release. The next release, 3.0.0.M2, will include support for asynchronous bindings. Watch for it in the coming weeks.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://spring.io/projects/spring-cloud-open-service-broker"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-cloud/spring-cloud-open-service-broker"&gt;GitHub&lt;/a&gt; | &lt;a href="https://docs.spring.io/spring-cloud-open-service-broker/docs/3.0.0.M1/reference/html5"&gt;Reference Doc&lt;/a&gt; | &lt;a href="https://docs.spring.io/spring-cloud-open-service-broker/docs/3.0.0.M1/apidocs/"&gt;API Doc&lt;/a&gt; &lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud Open Service Broker 2.1.0.M1 released</title>
    <link rel="alternate" href="https://spring.io/blog/2018/10/03/spring-cloud-open-service-broker-2-1-0-m1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Roy Clarkson</name>
    </author>
    <id>tag:spring.io,2018-10-03:3423</id>
    <updated>2018-10-03T20:31:09Z</updated>
    <content type="html">&lt;p&gt;We&amp;rsquo;re please to announce the release of Spring Cloud Open Service Broker 2.1.0.M1. The 2.1.0 release will support additions and changes in the &lt;a href="https://www.openservicebrokerapi.org/blog/2018/08/21/open-service-broker-v2-14-released"&gt;Open Service Broker API v2.14&lt;/a&gt;. This release includes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Support providing an updated &lt;code&gt;dashboard_url&lt;/code&gt; when updating a service instance&lt;/li&gt;
  &lt;li&gt;Resolves issues with deserializing the model objects that were converted to the builder pattern&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;View the closed issue list on &lt;a href="https://github.com/spring-cloud/spring-cloud-open-service-broker/milestone/10?closed=1"&gt;GitHub&lt;/a&gt;. The next release, 2.1.0.M2, will include support for asynchronous bindings. Watch for it in the coming weeks.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://spring.io/projects/spring-cloud-open-service-broker"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-cloud/spring-cloud-open-service-broker"&gt;GitHub&lt;/a&gt; | &lt;a href="https://docs.spring.io/spring-cloud-open-service-broker/docs/2.1.0.M1/reference/html5"&gt;Reference Doc&lt;/a&gt; | &lt;a href="https://docs.spring.io/spring-cloud-open-service-broker/docs/2.1.0.M1/apidocs/"&gt;API Doc&lt;/a&gt; &lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Noticias en Español, 2 de octubre 2018</title>
    <link rel="alternate" href="https://spring.io/blog/2018/10/03/spring-noticias-en-espa-ol-2-de-octubre-2018" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Mark Heckler</name>
    </author>
    <id>tag:spring.io,2018-10-03:3421</id>
    <updated>2018-10-03T08:24:00Z</updated>
    <content type="html">&lt;div class="imageblock"&gt;
&lt;div class="content"&gt;
&lt;img src="https://www.thehecklers.com/content/images/2018/10/SNES.png" alt="SNES logo"&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Bienvenidos a todos a la edición inaugural de Spring Noticias en Español!!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Primero, una introducción. El español es el segundo o cuarto idioma más hablado &lt;strong&gt;en el mundo&lt;/strong&gt;, de acuerdo a las estadísticas&amp;#8230;&amp;#8203;y Spring es la marca más popular de Java en el mundo. Hasta ahora, no ha existido una manera consistente de compartir los proyectos (videos, artículos, etc.) entre la comunidad de Spring de hispanohablantes. Todos juntos, podemos cambiar eso!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Periódicamente, publicaré noticias de tus proyectos escritos o grabados en español aquí. Ayúdame a extender tu voz y compartir tus conocimientos por todo el mundo!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Envíame noticias de tus logros en &lt;a href="https://twitter.com/mkheck"&gt;@mkheck en Twitter&lt;/a&gt;, &lt;a href="mailto:mark@losheckler.com"&gt;mark@losheckler.com&lt;/a&gt;, o &lt;a href="mailto:mheckler@pivotal.io"&gt;mheckler@pivotal.io&lt;/a&gt; y te presentaré con la comunidad. Todos ganan!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Para nuestra primera edición, aquí tienes unos artículos muy interesantes:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Me gustó este artículo de usar Spring Batch con Hibernate y &lt;a href="https://twitter.com/mariadb"&gt;MySQL/MariaDB&lt;/a&gt; por &lt;a href="https://twitter.com/ricardogeekk"&gt;@ricardogeekk&lt;/a&gt;: &lt;a href="https://ricardogeek.com/spring-batch-usando-hibernate-y-mysql/" class="bare"&gt;https://ricardogeek.com/spring-batch-usando-hibernate-y-mysql/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;También por Ricardo, este artículo de construir microservicios con &lt;a href="https://twitter.com/springcloud"&gt;@SpringCloud&lt;/a&gt; y &lt;a href="https://twitter.com/apachekafka"&gt;@ApacheKafka&lt;/a&gt;: &lt;a href="https://ricardogeek.com/microservicios-en-tiempo-real-con-kafka-y-spring-cloud/" class="bare"&gt;https://ricardogeek.com/microservicios-en-tiempo-real-con-kafka-y-spring-cloud/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Algo más por Ricardo, este sobre construir aplicaciones con &lt;a href="https://twitter.com/springboot"&gt;@SpringBoot&lt;/a&gt;: &lt;a href="https://ricardogeek.com/construyendo-una-aplicacion-java-con-spring-boot/" class="bare"&gt;https://ricardogeek.com/construyendo-una-aplicacion-java-con-spring-boot/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Aquí tenemos un artículo interesante de @chuchip sobre usando expresiones lambdas en &lt;a href="https://twitter.com/springdata"&gt;@SpringData&lt;/a&gt; JDBC: &lt;a href="http://www.profesor-p.com/2018/09/04/expresiones-lamba-en-spring-jdbc-data-mejorando-la-explicacion/" class="bare"&gt;http://www.profesor-p.com/2018/09/04/expresiones-lamba-en-spring-jdbc-data-mejorando-la-explicacion/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Y esta es una serie de artículos útiles sobre Spring REST y Angular:&lt;/p&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.profesor-p.com/2018/08/31/aplicacion-en-spring-y-angular/" class="bare"&gt;http://www.profesor-p.com/2018/08/31/aplicacion-en-spring-y-angular/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.profesor-p.com/2018/09/03/aplicacion-en-spring-rest-y-angular-2-parte/" class="bare"&gt;http://www.profesor-p.com/2018/09/03/aplicacion-en-spring-rest-y-angular-2-parte/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.profesor-p.com/2018/09/04/aplicacion-en-spring-rest-y-angular-3a-parte/" class="bare"&gt;http://www.profesor-p.com/2018/09/04/aplicacion-en-spring-rest-y-angular-3a-parte/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.profesor-p.com/2018/09/05/aplicacion-en-spring-rest-y-angular-4a-parte/" class="bare"&gt;http://www.profesor-p.com/2018/09/05/aplicacion-en-spring-rest-y-angular-4a-parte/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.profesor-p.com/2018/09/06/aplicacion-en-spring-rest-y-angular-5a-parte/" class="bare"&gt;http://www.profesor-p.com/2018/09/06/aplicacion-en-spring-rest-y-angular-5a-parte/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Este artículo profundo fue escrito por otro Java Champion, &lt;a href="https://twitter.com/jamdiazdiaz"&gt;@jamdiazdiaz&lt;/a&gt;, sobre monitoreando tu microservicios de &lt;a href="https://twitter.com/springboot"&gt;@SpringBoot&lt;/a&gt; con Spring Boot Admin: &lt;a href="http://blog.joedayz.pe/2018/08/monitoreando-tus-micro-servicios-con.html" class="bare"&gt;http://blog.joedayz.pe/2018/08/monitoreando-tus-micro-servicios-con.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Y ahora algo un poco diferente (pero interesante!), unos scripts de Groovy por &lt;a href="https://twitter.com/101GroovyScript"&gt;@101GroovyScript&lt;/a&gt; para mejorar tu vida "Groovy": &lt;a href="https://groovy-lang.gitlab.io/101-scripts/" class="bare"&gt;https://groovy-lang.gitlab.io/101-scripts/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Y finalmente para esta edición, un artículo fascinante de como construir una aplicación web con &lt;a href="https://twitter.com/vaadin"&gt;@Vaadin&lt;/a&gt; Flow con &lt;a href="https://twitter.com/springboot"&gt;@SpringBoot&lt;/a&gt;, &lt;a href="https://twitter.com/springdata"&gt;@SpringData&lt;/a&gt; JPA, y &lt;a href="https://twitter.com/mariadb"&gt;MySQL/MariaDB&lt;/a&gt;: &lt;a href="http://geovanny0401.blogspot.com/2018/08/construir-una-aplicacion-web-con-vaadin.html" class="bare"&gt;http://geovanny0401.blogspot.com/2018/08/construir-una-aplicacion-web-con-vaadin.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Es todo por ahora! Pero si te gustaría ver tus proyectos/noticias en este boletín y ayudar tus compañeros, envíamelos! Mis datos de contacto son:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://twitter.com/mkheck"&gt;@mkheck en Twitter&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="mailto:mark@losheckler.com"&gt;mark@losheckler.com&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="mailto:mheckler@pivotal.io"&gt;mheckler@pivotal.io&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Ayúdame a extender tu voz y compartir tus conocimientos! Hasta la próxima edición&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - Tuesday, October 2nd, 2018</title>
    <link rel="alternate" href="https://spring.io/blog/2018/10/02/this-week-in-spring-tuesday-october-2nd-2018" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2018-10-03:3422</id>
    <updated>2018-10-02T23:14:00Z</updated>
    <content type="html">&lt;p&gt;Whew! What a week! I&amp;rsquo;m exhausted! I&amp;rsquo;ve been running around visting one customer after another this week and it&amp;rsquo;s only Tuesday! My brain is still a smoldering hole from the craziness of last week&amp;rsquo;s &lt;em&gt;epic&lt;/em&gt; SpringOne Platform 2018 event in Washington DC, and needless to say there&amp;rsquo;s a &lt;em&gt;ton&lt;/em&gt; of new things to investigate and tons of videos to be available to the audience soon. This week is a wee bit more tame, so without further ado, let&amp;rsquo;s get to it! &lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t know where you are in the world as you read this but I hope you&amp;rsquo;ll join me 17:00 BST, for my appearance at the vJUG where I&amp;rsquo;ll &lt;a href="https://www.meetup.com/virtualJUG/events/254535337/"&gt;be looking at &lt;em&gt;Bootiful Testing&lt;/em&gt;&lt;/a&gt; - join us! &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Spring Fu lead Sébastien Deleuze has put together a post illuminating some of the new features in Spring Fu &lt;a href="https://spring.io/blog/2018/10/02/the-evolution-of-spring-fu"&gt;and the brand Spring JaFu configuration style&lt;/a&gt;, which brings the originally Kotlin-only functional style to Java developers. I &lt;em&gt;love&lt;/em&gt; the possibilities here! Dr. Dave Syer, never one to rest on his proverbial laurels, followed up &lt;a href="https://twitter.com/david_syer/status/1047128121189765120"&gt;with a Maven-based example&lt;/a&gt; that demonstrates Spring JaFu in action. NB: you&amp;rsquo;ll need to install an artifact in the master snapshots for this to work (at the moment)&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2018/10/02/spring-vault-2-1-ga-released"&gt;Spring Vault 2.1 GA released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Wanna change the world? You&amp;rsquo;ve got to ACT! That&amp;rsquo;s what we&amp;rsquo;re doing at Pivotal, anyway. Ready on the learn more &lt;a href="https://pivotal.io/act"&gt;about our new initiative supporting humanitarian work!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring Data Elasticsearch just merged &lt;a href="https://github.com/spring-projects/spring-data-elasticsearch/pull/216"&gt;a PR to switch to the high-level REST client&lt;/a&gt;! Sweet nectar!&lt;/li&gt;
  &lt;li&gt;Miss SpringOne Platform 2018 last week? Check out &lt;a href="https://content.pivotal.io/springone-platform-2018/secure-software-happy-developers-and-cost-effective-applications-all-with-spring"&gt;this &lt;em&gt;rock-solid&lt;/em&gt; recap post from last week by Diógenes Rettori&lt;/a&gt;!&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2018/09/27/what-s-new-in-spring-data-lovelace"&gt;What&amp;rsquo;s new in Spring Data Lovelace?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2018/09/27/what-s-new-in-spring-data-lovelace-for-mongodb"&gt;What&amp;rsquo;s new in Spring Data Lovelace for MongoDB?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2018/09/27/spring-security-5-1-goes-ga"&gt;Spring Security 5.1 goes GA&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2018/09/27/the-reactive-revolution-at-springone-platform-2018-part-1-n"&gt;The Reactive Revolution at SpringOne Platform 2018 (part 1/N)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2018/09/26/spring-batch-4-1-0-rc1-is-now-available"&gt;Spring Batch 4.1.0.RC1 is now available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2018/09/26/what-s-new-in-spring-data-lovelace-for-redis-and-apache-cassandra"&gt;What&amp;rsquo;s new in Spring Data Lovelace for Redis and Apache Cassandra?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This is a &lt;em&gt;very&lt;/em&gt; cool post: &lt;a href="https://blog.philipphauer.de/kotlin-mongodb-perfect-match/"&gt;Kotlin and MongoDB: a perfect match&lt;/a&gt;!&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://medium.com/neo4j/spring-data-lovelace-neo4j-ogm-3-1-3-went-ga-36614b60c889"&gt;Spring Data Lovelace &amp;amp; Neo4j-OGM 3.1.3 went GA – neo4j – Medium&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This is pretty cool! It&amp;rsquo;s a &lt;a href="https://dzone.com/articles/spring-boot-springbootapplication-annotation-with"&gt;look at the &lt;code&gt;@SpringBootApplication&lt;/code&gt; annotation&lt;/a&gt; from Spring Boot.&lt;/li&gt;
  &lt;li&gt;Good news everyone! Heck, tons of good news! Last week Java 11 dropped and so Ben Hale and the Cloud Foundry &lt;a href="https://twitter.com/springcentral/status/1047162354327216128"&gt;Java buildpack team, ever busy, have already updated the Cloud Foundry Java buildpack to support Java 11&lt;/a&gt; for you! Online buildpacks are available now, and offline buildpacks shortly. NB: Java 11 isn&amp;rsquo;t the default, but there&amp;rsquo;ll come a day when it might be so test your apps..!&lt;/li&gt;
  &lt;li&gt;Check out some of the new features demonstrating the &lt;a href="https://blog.jetbrains.com/idea/2018/10/spring-and-kotlin-final-classes/"&gt;tight integration between Spring and Kotlin in the new IntelliJ release&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This is an interesting &lt;a href="https://itunes.apple.com/us/podcast/talking-kotlin/id1194631266?mt=2#episodeGuid=tag%3Asoundcloud%2C2010%3Atracks%2F506598492"&gt;podcast episode of the &amp;ldquo;Talking Kotlin&amp;rdquo; podcast on&lt;/a&gt; the use of Kotlin and Spring by the folks working at Allegro, a giant ecommerce engine in Poland&lt;/li&gt;
  &lt;li&gt;Yet another epic blog on the new features &lt;a href="https://blog.jetbrains.com/idea/2018/09/spring-kotlin-gutters-and-navigation/"&gt;supporting Spring and Kotlin&amp;rsquo;s integration in IntelliJ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Check out these interviews with me, among others, on sessions to attend &lt;a href="https://blogs.oracle.com/developers/which-way-to-go%3a-code-one-presenters-help-you-select-which-sessions-to-attend"&gt;at the upcoming Oracle Code One show&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I was lucky enough to be part of a JAXEnter panel discussion on the features and future of Java 11. Another installment, &lt;a href="https://jaxenter.com/manual-java-11-first-impression-part-2-150153.html"&gt;&lt;em&gt;Does Java 11 tick all the right boxes&lt;/em&gt;, is out and well worth a read&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;InfoQ have &lt;a href="https://www.infoq.com/news/2018/10/springone-r2dbc"&gt;a nice post&lt;/a&gt; on the new (experimental) &lt;a href="https://www.infoq.com/news/2018/10/springone-r2dbc"&gt;Reactive Relational Database Connectivity Driver project&lt;/a&gt;, R2DBC, Announced at SpringOne Platform 2018 last week. Check it out!&lt;/li&gt;
  &lt;li&gt;Not related to Java, per se, but interesting nonetheless: Snyk have a nice post detailing some &lt;a href="https://snyk.io/blog/10-maven-security-best-practices"&gt;security practices for Apache Maven worth investigating&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Excited about RSocket and Netifi? Check &lt;a href="https://github.com/netifi/springone-demo"&gt;out their SpringOne Platform 2018 demo!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;There&amp;rsquo;s still lots of innovating happening at Netflix. I liked this post on their &lt;a href="https://medium.com/@NetflixTechBlog/netflix-edge-load-balancing-695308b5548c"&gt;work around edge load balancing&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://pbs.twimg.com/media/DoG1Z3FXUAEfR3N.jpg"&gt;SpringOne Platform 2019 will be held in Austin, TX&lt;/a&gt;! I&amp;rsquo;m so looking forward to this show already!&lt;/li&gt;
  &lt;li&gt;Want to see a Spring Boot that, when built with Graal VM, &lt;a href="https://github.com/sdeleuze/spring-boot-graal-demo"&gt;can start in 0.005 seconds?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Neo4j&amp;rsquo;s Michael Simons has just published an update on the support for Spring Data Neo4j in Spring Data Lovelace, which &lt;a href="https://twitter.com/SpringData/status/1045380125217488896"&gt;incorporates a Spring Data Neo4j revision that&amp;rsquo;s built on the Neo4j-OGM 3.1.3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Check out this fantastic demo &lt;a href="http://axontrader.cfapps.io/"&gt;introducing CQRS using the Spring-powered Axon framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This post ages better every day, &lt;a href="https://redmonk.com/jgovernor/2016/08/16/spring-won-platform-the-big-switch-just-happened/"&gt;so allow me to repost.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>The evolution of Spring Fu</title>
    <link rel="alternate" href="https://spring.io/blog/2018/10/02/the-evolution-of-spring-fu" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Sébastien Deleuze</name>
    </author>
    <id>tag:spring.io,2018-10-02:3420</id>
    <updated>2018-10-02T14:06:00Z</updated>
    <content type="html">&lt;p&gt;I take the opportunity of a short stop between &lt;a href="https://springoneplatform.io"&gt;SpringOne platform&lt;/a&gt; where I gave the first talk about Spring Fu and &lt;a href="https://kotlinconf.com/"&gt;Kotlinconf&lt;/a&gt; to give an overview of the evolution of this project, summarize the current status and share what could be the next steps.&lt;/p&gt;
&lt;p&gt;Early June, I announced a new experimental project named &lt;a href="https://github.com/spring-projects/spring-fu"&gt;Spring Fu&lt;/a&gt;, with the goal to experiment on a new kind of API to configure Spring applications using Kotlin DSL and functional configuration.&lt;/p&gt;
&lt;p&gt;&lt;blockquote class="twitter-tweet" data-cards="hidden" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Today, I am proud to announce a new experimental project: Spring Fu. It is a &lt;a href="https://twitter.com/kotlin?ref_src=twsrc%5Etfw"&gt;@Kotlin&lt;/a&gt; micro-framework that makes it easy to create lightweight Spring-powered applications with functional APIs instead of annotations. We are looking for feedback. &lt;a href="https://t.co/R15wJ1gD8K"&gt;&lt;a href="https://t.co/R15wJ1gD8K"&gt;https://t.co/R15wJ1gD8K&lt;/a&gt;&lt;/a&gt; &lt;a href="https://t.co/ScljoPZ8rW"&gt;pic.twitter.com/ScljoPZ8rW&lt;/a&gt;&lt;/p&gt;&amp;mdash; Sébastien Deleuze (@sdeleuze) &lt;a href="https://twitter.com/sdeleuze/status/1005072964822487040?ref_src=twsrc%5Etfw"&gt;June 8, 2018&lt;/a&gt;&lt;/blockquote&gt;&lt;br/&gt;&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;I must admit I was not expecting the huge wave of feedback that followed, and I would like to thank the Spring community for such warm welcome. I have continued since to work on the project in order to turn this first POC based on raw Spring Framework API into an incubator for new Spring functional features.&lt;/p&gt;&lt;h2&gt;&lt;a href="#kofu-configuration" class="anchor" name="kofu-configuration"&gt;&lt;/a&gt;Kofu configuration&lt;/h2&gt;
&lt;p&gt;The Kotlin DSL is now based on Spring Boot infrastructure and is called Kofu (for &lt;strong&gt;Ko&lt;/strong&gt;tlin and &lt;strong&gt;fu&lt;/strong&gt;nctional). It allows to configure Spring Boot applications with a Kotlin DSL and lambdas instead of annotations and have following characteristics:&lt;br/&gt; - Explicit configuration via a Kotlin DSL&lt;br/&gt; - Based on Spring Boot infrastructure used in a functional way&lt;br/&gt; - No feature enabled based on classpath detection&lt;br/&gt; - Both declarative and programmatic&lt;br/&gt; - Faster startup and lower memory consumption&lt;br/&gt; - Minimal reflection &amp;amp; annotations usage&lt;br/&gt; - Pure lambdas, no CGLIB proxy&lt;/p&gt;
&lt;p&gt;A typical Spring Boot application configured with Kofu configuration looks like that:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint kotlin"&gt;val app = application {&#xD;
  import(beans)&#xD;
  listener&amp;lt;ApplicationReadyEvent&amp;gt; {&#xD;
    ref&amp;lt;UserRepository&amp;gt;().init()&#xD;
  }&#xD;
  properties&amp;lt;SampleProperties&amp;gt;(&amp;quot;sample&amp;quot;)&#xD;
  server {&#xD;
    port = if (profiles.contains(&amp;quot;test&amp;quot;)) 8181 else 8080&#xD;
    mustache()&#xD;
    codecs {&#xD;
      string()&#xD;
      jackson {&#xD;
        indentOutput = true&#xD;
      }&#xD;
    }&#xD;
    import(::routes)&#xD;
  }&#xD;
  mongodb {&#xD;
    embedded()&#xD;
  }&#xD;
}&#xD;
&#xD;
val beans = beans {&#xD;
  bean&amp;lt;UserRepository&amp;gt;()&#xD;
  bean&amp;lt;UserHandler&amp;gt;()&#xD;
}&#xD;
&#xD;
fun routes(userHandler: UserHandler) = router {&#xD;
  GET(&amp;quot;/&amp;quot;, userHandler::listView)&#xD;
  GET(&amp;quot;/api/user&amp;quot;, userHandler::listApi)&#xD;
  GET(&amp;quot;/conf&amp;quot;, userHandler::conf)&#xD;
}&#xD;
&#xD;
fun main() = app.run()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In order to use it, you &amp;ldquo;just&amp;rdquo; have to add a &lt;code&gt;org.springframework.fu:spring-boot-kofu&lt;/code&gt; dependency to a Spring Boot 2.1 application. As the current version number &lt;code&gt;0.0.2&lt;/code&gt; suggests it, be aware that for now the API is not stable yet, not suitable for production and that the scope is limited to a subset of what Spring Boot supports.&lt;/p&gt;
&lt;p&gt;But feel free to play with it, send feedback and try this new way of configuring Spring Boot applications which is functional, discoverable via your IDE auto-complete and &lt;a href="http://repo.spring.io/milestone/org/springframework/fu/spring-boot-kofu/0.0.2/spring-boot-kofu-0.0.2-javadoc.jar!/kofu/org.springframework.boot.kofu/application.html"&gt;documented&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Kofu is not better or worse than auto-config, it is just different. I believe it could be a way for Spring Boot to reach developers who prefer a more explicit configuration model and those who are coming from other backgrounds like Kotlin, Go, Node or Ruby.&lt;/p&gt;&lt;h2&gt;&lt;a href="#jafu-configuration" class="anchor" name="jafu-configuration"&gt;&lt;/a&gt;Jafu configuration&lt;/h2&gt;
&lt;p&gt;Initially limited to Kotlin, one of the main feedback I received was from Java developers interested in this explicit DSL approach as well, so I worked on a Java equivalent and ended up with this Jafu (for &lt;strong&gt;Ja&lt;/strong&gt;va and &lt;strong&gt;fu&lt;/strong&gt;nctional) DSL.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;public class JafuApplication {&#xD;
&#xD;
  public static SpringApplication app = application(app -&amp;gt; {&#xD;
    app.beans(beans -&amp;gt; {&#xD;
      beans.bean(SampleService.class);&#xD;
      beans.bean(SampleHandler.class);&#xD;
    });&#xD;
    app.server(server -&amp;gt; server.router(router -&amp;gt; {&#xD;
      SampleHandler sampleHandler = app.ref(SampleHandler.class);&#xD;
      router.GET(&amp;quot;/&amp;quot;, sampleHandler::hello);&#xD;
      router.resources(&amp;quot;/**&amp;quot;, new ClassPathResource(&amp;quot;static/&amp;quot;));&#xD;
    }));&#xD;
  });&#xD;
&#xD;
  public static void main (String[] args) {&#xD;
    app.run(args);&#xD;
  }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is currently just a POC but I plan to reach feature parity shortly with Kofu and develop the 2 DSLs in parallel. The lack of &lt;a href="https://kotlinlang.org/docs/reference/type-safe-builders.html"&gt;type-safe builders&lt;/a&gt;, &lt;a href="https://kotlinlang.org/docs/reference/inline-functions.html#reified-type-parameters"&gt;reified type parameters&lt;/a&gt; or &lt;a href="https://kotlinlang.org/docs/reference/extensions.html#extensions"&gt;extension mechanism&lt;/a&gt; will make Jafu more verbose and less extensible than Kofu, but despite these limitations, I find Jafu pretty nice and usable.&lt;/p&gt;
&lt;p&gt;For users only interested by the performance increase linked to the usage of a functional bean registration infrastructure, it is worth to notice than &lt;a href="https://github.com/dsyer"&gt;Dave Syer&lt;/a&gt; is currently &lt;a href="https://github.com/dsyer/spring-init-experiment"&gt;experimenting&lt;/a&gt; on solutions that would make it possible to leverage functional bean registration efficiency with regular Spring Boot applications based on annotations.&lt;/p&gt;&lt;h2&gt;&lt;a href="#running-spring-applications-as-native-executable" class="anchor" name="running-spring-applications-as-native-executable"&gt;&lt;/a&gt;Running Spring applications as native executable&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.graalvm.org/"&gt;GraalVM&lt;/a&gt; is a new virtual machine developed by Oracle, which allows among other features, to compile JVM bytecode to native executable via &lt;a href="https://github.com/oracle/graal/tree/master/substratevm"&gt;Substratevm&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Spring Framework 5.1 provides some &lt;a href="https://jira.spring.io/browse/SPR-16991"&gt;initial support&lt;/a&gt; for GraalVM native images, but we are really at the beginning of the story. GraalVM team need to fix various issues raised by Dave in order to get everything working as expected, and the ecosystem needs to adap to this new platform which has different constraints and characteristics.&lt;/p&gt;
&lt;p&gt;But GraalVM team is listening our feedback, and Spring application support has progressed significantly these last months. It is already possible to compile a basic Spring Boot reactive application with Kofu configuration as a native executable that runs almost instantly!&lt;/p&gt;
&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;I&amp;#39;m playing with spring-fu at Dulles airport.&lt;br&gt;Look how fast it is! It&amp;#39;s insane.., &lt;a href="https://t.co/CTyKEr4d4O"&gt;pic.twitter.com/CTyKEr4d4O&lt;/a&gt;&lt;/p&gt;&amp;mdash; Toshiaki Maki (@making) &lt;a href="https://twitter.com/making/status/1045683585389277184?ref_src=twsrc%5Etfw"&gt;September 28, 2018&lt;/a&gt;&lt;/blockquote&gt;&lt;br/&gt;&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;&lt;h2&gt;&lt;a href="#coroutines-support" class="anchor" name="coroutines-support"&gt;&lt;/a&gt;Coroutines support&lt;/h2&gt;
&lt;p&gt;Like said before, the main goal of Spring Fu is to incubate features that will be integrated in current top level projects like Spring Framework, Spring Data and Spring Boot.&lt;/p&gt;
&lt;p&gt;Spring Fu is currently incubating coroutines support for Spring WebFlux and Spring Data in order to be able to leverage Spring Reactive stack in a more imperative style fashion. This mainly targets developers who want to leverage the scalability of such stack without requiring all the power of reactive API.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint kotlin"&gt;class UserRepository(private val mongo: CoroutinesMongoTemplate) {&#xD;
	suspend fun count(): Long = mongo.count&amp;lt;User&amp;gt;()&#xD;
	suspend fun findAll(): List&amp;lt;User&amp;gt; = mongo.findAll&amp;lt;User&amp;gt;()&#xD;
	suspend fun findOne(id: String): User? = mongo.findById&amp;lt;User&amp;gt;(id)&#xD;
	suspend fun deleteAll() = mongo.remove&amp;lt;User&amp;gt;()&#xD;
	suspend fun save(user: User): User? = mongo.save(user)&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Be aware that while coroutines are considered final as of Kotlin 1.3, there is still a major missing piece in &lt;code&gt;kotlinx-coroutines&lt;/code&gt; since it does not provide any type to deal with cold streams. We will need this missing abstraction in order to be able to expose our reactive foundations with a coroutines API, see &lt;a href="https://github.com/Kotlin/kotlinx.coroutines/issues/254"&gt;kotlinx.coroutines#254&lt;/a&gt; for more details.&lt;/p&gt;
&lt;p&gt;Notice that we should be able to &lt;a href="https://github.com/Kotlin/kotlinx.coroutines/issues/284"&gt;pass context between coroutines and reactor types&lt;/a&gt; in order to allow pretty powerful use cases like reactive security and transactions.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/konrad-kaminski"&gt;Konrad Kaminski&lt;/a&gt; who contributed the original Spring coroutines support via his great &lt;a href="https://github.com/konrad-kaminski/spring-kotlin-coroutine"&gt;spring-kotlin-coroutine&lt;/a&gt; project will shortly join Spring Fu to work on this feature with me.&lt;/p&gt;&lt;h2&gt;&lt;a href="#conclusion" class="anchor" name="conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I have just released &lt;a href="https://github.com/spring-projects/spring-fu/releases/tag/v0.0.2"&gt;Spring Fu 0.0.2&lt;/a&gt; which provides an improved Kofu DSL and introduces &lt;a href="https://jira.spring.io/browse/SPR-17312"&gt;autowiring of function parameters&lt;/a&gt;. Feel free to try it and to provide feedback.&lt;/p&gt;
&lt;p&gt;Upcoming &lt;a href="https://github.com/spring-projects/spring-fu/milestone/4"&gt;Spring Fu 0.0.3&lt;/a&gt; will provide feature parity between Kofu and Jafu configurations.&lt;/p&gt;
&lt;p&gt;We already have &lt;a href="https://github.com/spring-projects/spring-fu/graphs/contributors"&gt;10+ community contributors&lt;/a&gt; who submitted pull requests to Spring Fu, so if you have some ideas you could maybe be the next ;-)&lt;/p&gt;
&lt;p&gt;Looking forward meeting you in my upcoming Spring Fu talks at &lt;a href="https://jfuture.by/"&gt;JFuture&lt;/a&gt; (Minsk), &lt;a href="http://springfest2018.springframework.jp/"&gt;Spring Fest&lt;/a&gt; (Tokyo) and &lt;a href="https://dvbe18.confinabox.com/talk/TZU-3777/What's_cooking_in_Spring_Fu%3F"&gt;Devoxx&lt;/a&gt; (Antwerpen).&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Vault 2.1 GA released</title>
    <link rel="alternate" href="https://spring.io/blog/2018/10/02/spring-vault-2-1-ga-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Mark Paluch</name>
    </author>
    <id>tag:spring.io,2018-10-02:3419</id>
    <updated>2018-10-02T09:10:28Z</updated>
    <content type="html">&lt;p&gt;On behalf of the community, I&amp;rsquo;d like to announce the general availability of Spring Vault 2.1. Spring Vault 2.1 requires JDK 8 or higher and specifically supports JDK 11 as the next long-term support release. The most notable changes of Spring Vault 2.1 are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Extending infrastructure-based authentication to support Google Cloud IAM and Azure Managed Service Identity.&lt;/li&gt;
  &lt;li&gt;Integrating Vault’s versioned Key-Value backend.&lt;/li&gt;
  &lt;li&gt;Wrapping API support.&lt;/li&gt;
  &lt;li&gt;Java 11 compatibility.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This release is compatible with Vault versions from &lt;code&gt;0.5.2&lt;/code&gt; up to &lt;code&gt;0.11.1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Make sure to also check out our &lt;a href="https://spring.io/blog/2018/09/24/hands-on-with-spring-vault-2-1"&gt;blog post that explains the new features in detail&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For a complete list of changes see the &lt;a href="http://docs.spring.io/spring-vault/docs/2.1.0.RELEASE/changelog.txt"&gt;changelog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-vault/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-vault"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-vault/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-vault/docs/2.1.0.RELEASE/reference/html/"&gt;Documentation&lt;/a&gt; | &lt;a href="https://github.com/mp911de/spring-cloud-vault-config-samples/"&gt;Examples&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-vault"&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>What's new in Spring Data Lovelace?</title>
    <link rel="alternate" href="https://spring.io/blog/2018/09/27/what-s-new-in-spring-data-lovelace" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Oliver Gierke</name>
    </author>
    <id>tag:spring.io,2018-09-18:3398</id>
    <updated>2018-09-27T15:00:00Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;With Spring Data Lovelace just released in its generally available version last week, it is time to have a brief walk through the new features we have added.
The release train is pretty packed with features.
In this blog post, I cover the more general ones.
Advanced, store-specific news is covered in the following blog posts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://spring.io/blog/2018/09/17/introducing-spring-data-jdbc"&gt;Jens Schauder introducing Spring Data JDBC&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://spring.io/blog/2018/09/24/spring-data-jdbc-references-and-aggregates"&gt;Jens again on how to model aggregates with Spring Data JDBC&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://spring.io/blog/2018/09/27/what-s-new-in-spring-data-lovelace-for-mongodb"&gt;Christoph Strobl on MongoDB&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://spring.io/blog/2018/09/26/what-s-new-in-spring-data-lovelace-for-redis-and-apache-cassandra"&gt;Mark Paluch on Spring Data for Apache Cassandra &amp;amp; Redis&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Read up on those? Alright, then let&amp;#8217;s get started on the more general items.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="improved-object-mapping-for-immutable-types"&gt;&lt;a class="anchor" href="#improved-object-mapping-for-immutable-types"&gt;&lt;/a&gt;Improved Object Mapping for Immutable Types&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;With Spring Data Lovelace, we took the chance to revamp our object mapping facilities that are used by most of the NoSQL modules.
We have always supported immutable entities, except a tiny aspect: Values that needed to change during database interactions, such as an auto-generated identifier or an optimistic locking version property, have always been changed under the covers.
This has changed with the latest release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;To support those properties, we now need you to either provide a wither method (following the &lt;code&gt;with…(…)&lt;/code&gt; naming convention) or&amp;#8201;&amp;#8212;&amp;#8201;in the Kotlin world&amp;#8201;&amp;#8212;&amp;#8201;expose a dedicated &lt;code&gt;copy(…)&lt;/code&gt; method, taking all properties as arguments. The following example uses a &lt;code&gt;withId&lt;/code&gt; method:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;class Person {

  private final Long id;
  private final String firstname, lastname;

  static Person of(String firstname, String lastname) {
    return new Person(null, firstname, lastname);
  }

  private Person(Long id, String firstname, String lastname) {
    // Assign parameters to fields
  }

  Person withId(Long id) {
    return new Person(id, this.firstname, this.lastame);
  }

  // …
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;With Lombok, we can do the same thing, as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;@Value(staticConstructor = "of")
class Person {

  @Wither Long id;
  String firstname, lastname;

  // …
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The declared constructor is used when &lt;code&gt;Person&lt;/code&gt; instances are read from the database.
The wither method for the identifier property comes into play when persisting new entities to the store in the first place.
Be sure you actually use the result returned from the repository&amp;#8217;s &lt;code&gt;save(…)&lt;/code&gt; method, as this will now be a different instance than the one you handed to the method in the first place.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;We used the work on that aspect to improve the performance of the actual object conversion in some store implementations by avoiding a couple of unnecessary iterations over properties when an immutable type is used.
For more details on that, see the newly added &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/current/reference/html/#mapping.fundamentals"&gt;section of the reference documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="support-for-vavr-s-try-monad"&gt;&lt;a class="anchor" href="#support-for-vavr-s-try-monad"&gt;&lt;/a&gt;Support for Vavr&amp;#8217;s Try Monad&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;By default, Spring Data repositories propagate errors that occur during the execution of a query method as runtime exceptions.
Proponents of a more functional style of writing Java code usually use Vavr in their application.
We have had support for Vavr&amp;#8217;s collection types as repository return types for quite a while already.
Spring Data Lovelace now adds support for the &lt;code&gt;Try&lt;/code&gt; monad, so that errors occurring in the query method execution cause a &lt;code&gt;Failure&lt;/code&gt; instance to be returned instead of an exception being thrown.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;interface PersonRepository extends Repository&amp;lt;Person, Long&amp;gt; {

  Try&amp;lt;Option&amp;lt;Person&amp;gt;&amp;gt; findByLastnameContaining(String lastname);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;That method fails if more than one person can be found with a &lt;code&gt;lastname&lt;/code&gt; that matches the given criteria.
With &lt;code&gt;Try&lt;/code&gt; being used as return type, a client component might now recover from that exceptional case as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;repository.findByLastnameContaining("e")
  .recover(it -&amp;gt; Match(it).of(
    Case(instanceOf(IncorrectResultSizeDataAccessException.class), Optional.empty())
));&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;While this might look a little convoluted in this contrived, tiny example, it is a pretty powerful mechanism, to keep mapping over a potentially available result on code that might throw exceptions.
Note that, when using a transactional store in combination with this feature, you have to take care of managing transaction rollbacks yourself, as the exception is not actually being thrown any more and does not trigger transaction rollbacks for &lt;code&gt;@Transaction&lt;/code&gt; annotated methods.
Support for that is on its way.
Be sure to follow &lt;a href="https://jira.spring.io/browse/SPR-15806"&gt;this ticket&lt;/a&gt; in Spring Framework or even cast your vote on it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;To see the Vavr support in action, check out the &lt;a href="https://github.com/spring-projects/spring-data-examples/blob/e9405dfa049b8265834cb78c50a932a51307a87d/jpa/vavr/src/"&gt;example&lt;/a&gt; in our canonical Spring Data Examples repository.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="deferred-jpa-repository-initialization"&gt;&lt;a class="anchor" href="#deferred-jpa-repository-initialization"&gt;&lt;/a&gt;Deferred JPA Repository Initialization&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Starting up a Spring Data JPA application requires an &lt;code&gt;EntityManagerFactory&lt;/code&gt; to be bootstrapped.
This usually consumes quite a bit of the startup time of the application overall.
To tackle this problem, Spring Framework already introduced the ability to bootstrap that &lt;code&gt;EntityManagerFactory&lt;/code&gt; in a background thread and, thus, let other beans get initialized in parallel.
Unfortunately, Spring Data repositories usually have at least one transitive dependency on some kind of Spring bean.
Their initialization, in turn, interacts with the factory already, which&amp;#8201;&amp;#8212;&amp;#8201;without further steps&amp;#8201;&amp;#8212;&amp;#8201;caused the initialization of those other components to block.
This limited the effect of that new functionality significantly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;As of Spring Data Lovelace, you can now define the repositories to bootstrap in a lazy mode, which automatically declares all injection points of Spring Data repositories as being lazy.
This causes Spring Framework to create proxies and delay the actual repository initialization up until the very first interaction with them.
In other words, repositories clients and clients of those clients can, in turn, be created without having to wait for the &lt;code&gt;EntityManagerFactory&lt;/code&gt; to finish its bootstrap.
That means that a significantly higher amount of Spring bean initialization can be parallelized to the JPA bootstrap.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The delay of the initialization also causes any kind of verification to be delayed until (for example) the very first request that hits the code path that actually uses a repository.
If you want to still make sure that the repositories are fully initialized before the application starts taking requests, use the &lt;strong&gt;deferred&lt;/strong&gt; bootstrap mode.
This mode works in the same way as the lazy one, except that, when the container is done bootstrapping, it explicitly triggers the initialization of all repositories in the &lt;code&gt;ApplicationContext&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The easiest way to switch between those modes is by setting the Spring Boot properties &lt;code&gt;spring.jpa.repositories.bootstrap-mode&lt;/code&gt; to either &lt;code&gt;lazy&lt;/code&gt; or &lt;code&gt;deferred&lt;/code&gt;.
This also ensures that the lazy initialization of the &lt;code&gt;EntityManagerFactory&lt;/code&gt; is configured properly.
Also, be sure to check out the new section added to the &lt;a href="https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.bootstrap-mode"&gt;reference documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="an-example"&gt;&lt;a class="anchor" href="#an-example"&gt;&lt;/a&gt;An Example&lt;/h3&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;We have prepared &lt;a href="https://github.com/spring-projects/spring-data-examples/tree/master/jpa/deferred"&gt;an example&lt;/a&gt; to show the effect of that optimization in a quite extreme example consisting of 2,000 entities, 2,000 repositories and 2,000 beans that depend on the repositories.
Using the deferred mode cuts off about a third (~12 seconds) of the startup time.
The lazy one even takes away another third (~22 seconds better than the default).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="imageblock"&gt;
&lt;div class="content"&gt;
&lt;img src="https://github.com/olivergierke/blog-images/raw/53341f1a3c047e9ee426f475f8e184e2e82ccf3e/deferred-jpa.png" alt="deferred jpa"&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="controlling-http-method-exposure-in-spring-data-rest"&gt;&lt;a class="anchor" href="#controlling-http-method-exposure-in-spring-data-rest"&gt;&lt;/a&gt;Controlling HTTP method exposure in Spring Data REST&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;We finish with a look at a feature in Spring Data REST that had been requested for a while.
In Spring Data REST, the decision about which HTTP methods are supported for which resource type exposed is, by default driven by the declared CRUD methods.
However, there are certain cases in which the presence of a single repository method causes multiple resource-HTTP-method combinations to be enabled.
For example, the &lt;code&gt;save(…)&lt;/code&gt; method exposed on a repository causes &lt;code&gt;POST&lt;/code&gt; to be supported on the collection resources as well as &lt;code&gt;PUT&lt;/code&gt; for both update &lt;strong&gt;and&lt;/strong&gt; creation of the item resource.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Spring Data Lovelace has a new &lt;code&gt;ExposureConfiguration&lt;/code&gt; (obtainable from a &lt;code&gt;RepositoryRestConfiguration&lt;/code&gt;), which allows fine grained control over which methods are supposed to be exposed:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;ExposureConfiguration config = restConfiguration.getExposureConfiguration();

config.withItemExposure((metadata, httpMethods)
  -&amp;gt; httpMethods.disable(HttpMethod.PATCH));
config.forDomainType(User.class).disablePutForCreation();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;As you can see, the configuration options come in two flavors:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A global one (shown first) that allows control over collection, item, and association resource exposure by using a lambda over a &lt;code&gt;ResourceMapping&lt;/code&gt; and &lt;code&gt;ConfigurableHttpMethods&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A type-specific one as shown below.
Some setup details, such as disabling the (enabled by default) ability to create entities by using &lt;code&gt;PUT&lt;/code&gt; requests are supported with explicit configuration methods.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;You can find out more about that in the corresponding section of the &lt;a href="https://docs.spring.io/spring-data/rest/docs/current/reference/html/#customizing-sdr.http-methods"&gt;reference documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>What's new in Spring Data Lovelace for MongoDB?</title>
    <link rel="alternate" href="https://spring.io/blog/2018/09/27/what-s-new-in-spring-data-lovelace-for-mongodb" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Christoph Strobl</name>
    </author>
    <id>tag:spring.io,2018-09-21:3409</id>
    <updated>2018-09-27T14:45:40Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;The past year has seen a lot of enhancements brought to the NoSQL Store including a bunch of new features and extended capabilities. We collaborated closely with the driver team at MongoDB, so the release already ships with decent support for sessions, change streams, schema validation, and (of course) transactions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The most interesting new feature is probably MongoDB 4.0&amp;#8217;s support for &lt;a href="https://www.mongodb.com/transactions"&gt;Multi-Document Transactions&lt;/a&gt;. If you have followed this blog before, you have probably read our &lt;a href="https://spring.io/blog/2018/06/28/hands-on-mongodb-4-0-transactions-with-spring-data"&gt;Hands on Guide&lt;/a&gt; that explains both &lt;code&gt;ClientSessions&lt;/code&gt; (which are the main building block) and transactions themselves.
In short, SpringData provides you with everything you need to leverage &lt;a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/data-access.html#transaction"&gt;Spring managed transaction support&lt;/a&gt; in your project.
To use it, declare &lt;code&gt;MongoTransactionManager&lt;/code&gt; in your configuration, as the following example shows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;@Configuration
class Config extends AbstractMongoConfiguration {

  @Bean
  MongoTransactionManager transactionManager(MongoDbFactory dbFactory) {
    return new MongoTransactionManager(dbFactory);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Transactions operate on top of snapshots and, therefore, changes made during a transaction appear a little odd within the oplog.
Thankfully, &lt;a href="https://docs.mongodb.com/manual/changeStreams/"&gt;change streams&lt;/a&gt; have been introduced in MongoDB 3.6 to replace the current oplog tailing with a well supported solution that is capable of untangling entries during a transaction.
Change streams let you get notified whenever a certain event happens on the database or even the collection level.
It provides the means to filter events by using Aggregations but also lets you resume the stream at a given checkpoint or timestamp.
Consuming a change stream feels most natural when done with a reactive API, as the following example shows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;Flux changeStream = reactiveTemplate
  .changeStream(newAggregation(match(where("operationType").is("insert"))),
    Person.class, ChangeStreamOptions.empty(), "users");&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The preceding stream returns only new documents that are inserted into the &lt;code&gt;users&lt;/code&gt; collection and maps those to the &lt;code&gt;Person&lt;/code&gt; domain type.
To achieve the same by using a synchronous API creates a long running blocking task that needs to be delegated to a separate component, a &lt;code&gt;MessageListenerContainer&lt;/code&gt;, as the following example shows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;MessageListenerContainer container =
  new DefaultMessageListenerContainer(template);
container.start();

MessageListener&amp;lt;ChangeStreamDocument&amp;lt;Document&amp;gt;, Person&amp;gt; listener =
  System.out::println;

ChangeStreamRequest request = ChangeStreamRequest.builder()
  .collection("users")
  .filter(newAggregation(match(where("operationType").is("insert")))
  .publishTo(listener)
  .build();

container.register(request, Person.class);

// …

container.stop();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Having a &lt;code&gt;MessageListenerContainer&lt;/code&gt; in place opens up other possibilities.
Using infinite streams with a tailable cursor on a capped collection has been limited to the reactive API so far.
Now it is a matter of passing a &lt;code&gt;SubscriptionRequest&lt;/code&gt; to the container, as the following example shows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;MessageListener&amp;lt;Document, Person&amp;gt; listener = System.out::println;

TailableCursorRequest request = TailableCursorRequest.builder()
  .collection("users")
  .filter(query(where("active").eq(true)))
  .publishTo(listener)
  .build();

container.register(request, Person.class);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The preceding snippet listens to inserts on the &lt;code&gt;users&lt;/code&gt; collection and publishes &lt;code&gt;Messages&lt;/code&gt; on the console.
For quite a while, MongoDB has allowed validating documents that are added to a collection or updated within a collection by using a validator that follows the overall query syntax.
With its new version, MongoDB extended this validation by adding support for &lt;a href="https://docs.mongodb.com/manual/core/schema-validation/#json-schema"&gt;JSON Schema&lt;/a&gt;, which lets you define the document blueprint in more object oriented approach.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-json" data-lang="json"&gt;{
  "type": "object",
  "required": [ "lastname" ],
  "properties": {
    "lastname": {
      "type": "string"
    },
    "address": {
      "type": "object",
      "properties": {
        "postCode": { "type": "string", "minLength": 4, "maxLength": 5 }
      }
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The &lt;code&gt;MongoJsonSchema&lt;/code&gt; and its builder is the Spring Data API gateway to defining a schema for your collection. The following example shows how to use it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;MongoJsonSchema jsonSchema = MongoJsonSchema.builder()
  .required("lastname")
  .properties(
     string("lastname"),
     object("address")
       .properties(string("postCode").minLength(4).maxLength(5))
  ).build();

CollectionOptions options = CollectionOptions.empty().schema(jsonSchema);

template.createCollection(Person.class, options);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Still, MongoDB, being a schema-less store, lets fields have different types on a per-document level. You can also use the schema to query for documents that match the blueprint without having to force a validation onto the collection, as the following example shows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;template.query(Person.class)
  .matching(query(matchingDocumentStructure(jsonSchema))).all();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Another minor but noticeable enhancement to the MongoDB module comes in the form of distinct value queries that let you retrieve a distinct list of all values assigned to a single field.
As mentioned before, fields do not necessarily have to have the same data type. That is why, by default, &lt;code&gt;distinct&lt;/code&gt; returns an untyped &lt;code&gt;Collection&lt;/code&gt;. The following example shows how to use &lt;code&gt;distinct&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;List&amp;lt;Object&amp;gt; distinctValues = template.query(Person.class)
  .distinct("active")
  .all();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The active flag might be a mixture of maybe "y/n", "true/false" and "0/1" pairs represented as &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt;, and (maybe) &lt;code&gt;int32&lt;/code&gt; within the store itself.
However, in cases where you are certain about at least the property type, it may be useful to use the &lt;code&gt;as&lt;/code&gt; projection to obtain a strongly typed collection. The following example uses the &lt;code&gt;as&lt;/code&gt; projection:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;List&amp;lt;Boolean&amp;gt; distinctValues = template.query(Person.class)
  .distinct("active")
  .as(Boolean)
  .all();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Several other enhancements have found their way into the MongoDB module, but we do not have the space to address them here.
Make sure to check out the &lt;a href="https://docs.spring.io/spring-data/mongodb/docs/2.1.0.RELEASE/reference/html/#new-features.2-1-0"&gt;new features&lt;/a&gt; section in the reference documentation to learn more about reactive MapReduce, default sorting, &lt;code&gt;findAndReplace(…)&lt;/code&gt; methods, and new Aggregation operators and stages.&lt;/p&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Spring Security 5.1 goes GA</title>
    <link rel="alternate" href="https://spring.io/blog/2018/09/27/spring-security-5-1-goes-ga" />
    <category term="releases" label="Releases" />
    <author>
      <name>Joe Grandja</name>
    </author>
    <id>tag:spring.io,2018-09-22:3411</id>
    <updated>2018-09-27T13:07:16Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;On behalf of the community, it is my pleasure to announce the general availability of Spring Security 5.1.
This release closes off &lt;a href="https://github.com/spring-projects/spring-security/milestone/107?closed=1"&gt;50+ tickets&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Please check out the &lt;a href="https://docs.spring.io/spring-security/site/docs/5.1.0.RELEASE/reference/htmlsingle/#new"&gt;What’s New&lt;/a&gt; in Spring Security 5.1.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;As always, we look forward to hearing your &lt;a href="https://github.com/spring-projects/spring-security/issues"&gt;feedback&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-security/"&gt;Project Site&lt;/a&gt; |
&lt;a href="http://docs.spring.io/spring-security/site/docs/5.1.0.RELEASE/reference/htmlsingle/"&gt;Reference&lt;/a&gt;
| &lt;a href="http://stackoverflow.com/questions/tagged/spring-security"&gt;Help&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>The Reactive Revolution at SpringOne Platform 2018 (part 1/N)</title>
    <link rel="alternate" href="https://spring.io/blog/2018/09/27/the-reactive-revolution-at-springone-platform-2018-part-1-n" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2018-09-27:3418</id>
    <updated>2018-09-27T01:48:00Z</updated>
    <content type="html">&lt;p&gt;Hi Spring fans! What a crazy week in Spring it&amp;rsquo;s been! I&amp;rsquo;m at SpringOne Platform 2018 soaking up all the exciting community events, interacting with people from around the planet who love Pivotal and love Spring! I just got asked to take a selfie with a woman from Vietnam while five miles from the show - at a local mall where I happened to be for a community dinner! It&amp;rsquo;s wonderful that the Pivotal brings people of so many disparate cultures and places together.&lt;/p&gt;
&lt;p&gt;Today, Wednesday 26th, 2018, was a &lt;em&gt;doozie&lt;/em&gt;! There are so many wonderful things happening this week, of course, but today was a very special one for me. Today saw us take the wraps off of the amazing work Pivotal is doing on two fronts. I wanted only to briefly touch on these topics in this post. You&amp;rsquo;ll no doubt hear more about this from us in the weeks to come!&lt;/p&gt;&lt;h2&gt;&lt;a href="#reactive-sql-data-access-with-r2dbc" class="anchor" name="reactive-sql-data-access-with-r2dbc"&gt;&lt;/a&gt;Reactive SQL Data Access with R2DBC&lt;/h2&gt;
&lt;p&gt;First, we announced our work on trying to support a standard for reactive SQL data access with &lt;a href=""&gt;R2DBC&lt;/a&gt;. R2DBC is early days yet, but very exciting. Thus far when we talk about data access, I&amp;rsquo;ve been quick to remind people that they while they could use JDBC from within a reactive application, they&amp;rsquo;re taking the issue of scaling out that interaction as their own responsibility. It would be up to them to configure more threads to the &lt;code&gt;Scheduler&lt;/code&gt; assigned to the reactive stream in which any SQL data access was happening. This was necessary because JDBC is a fundamentally blocking and synchronous API. It doesn&amp;rsquo;t have the ability to perform IO and then call you back when there&amp;rsquo;s activity; the client thread is left waiting for the replies. R2DBC offers an alternative. It&amp;rsquo;s &lt;em&gt;not&lt;/em&gt; meant to be a wrapper around JDBC, but instead to support functional reactive data access built on natively reactive SQL database drivers. We have an SPI layer and an implementation supporting PostgreSQL. &lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at an example. In order to get this to work, I went to the &lt;a href="http://start.Spring.io"&gt;Spring Initializr&lt;/a&gt; and selected &lt;code&gt;Reactive Web&lt;/code&gt; and &lt;code&gt;Lombok&lt;/code&gt;. I made sure to choose a &lt;code&gt;SNAPSHOT&lt;/code&gt; version of Spring Boot. You don&amp;rsquo;t need SNAPSHOTs of Spring Boot itself, &lt;em&gt;per se&lt;/em&gt;, but you will want the Spring Initializr to add the Spring snapshot repositories to your build so that you can resolve the &lt;code&gt;r2dbc-postgresql&lt;/code&gt; dependency. Then, I (manually! the horror!) edited the Maven build, &lt;code&gt;pom.xml&lt;/code&gt;, and added a dependency on the &lt;code&gt;io.r2dbc:r2dbc-postgresql:1.0.0.BUILD-SNAPSHOT&lt;/code&gt; dependency to the build.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;package s1p.r2dbc;&#xD;
&#xD;
import lombok.AllArgsConstructor;&#xD;
import lombok.Data;&#xD;
import lombok.NoArgsConstructor;&#xD;
import lombok.extern.log4j.Log4j2;&#xD;
&#xD;
import io.r2dbc.postgresql.PostgresqlConnectionFactory;&#xD;
import io.r2dbc.postgresql.PostgresqlResult;&#xD;
&#xD;
import org.springframework.stereotype.Service;&#xD;
import reactor.core.publisher.Flux;&#xD;
&#xD;
import org.springframework.beans.factory.annotation.Value;&#xD;
import org.springframework.boot.SpringApplication;&#xD;
import org.springframework.boot.autoconfigure.SpringBootApplication;&#xD;
import org.springframework.context.annotation.Bean;&#xD;
&#xD;
import java.net.URI;&#xD;
&#xD;
@Log4j2&#xD;
@SpringBootApplication&#xD;
public class PostgresqlApplication {&#xD;
&#xD;
  public static void main(String args[]) {&#xD;
    SpringApplication.run(PostgresqlApplication.class, args);&#xD;
  }&#xD;
&#xD;
  @Bean&#xD;
  PostgresqlConnectionFactory connectionFactory(&#xD;
      @Value(&amp;quot;${spring.datasource.url}&amp;quot;) String url) {&#xD;
&#xD;
    URI uri = URI.create(url);&#xD;
    String host = uri.getHost();&#xD;
    String userInfo = uri.getUserInfo();&#xD;
    String user = userInfo, pw = &amp;quot;&amp;quot;;&#xD;
&#xD;
    if (userInfo.contains(&amp;quot;:&amp;quot;)) {&#xD;
      user = userInfo.split(&amp;quot;:&amp;quot;)[0];&#xD;
      pw = userInfo.split(&amp;quot;:&amp;quot;)[1];&#xD;
    }&#xD;
&#xD;
    String name = uri.getPath().substring(1);&#xD;
    PostgresqlConnectionConfiguration configuration = PostgresqlConnectionConfiguration&#xD;
        .builder() //&#xD;
        .database(name) //&#xD;
        .host(host) //&#xD;
        .username(user) //&#xD;
        .password(pw) //&#xD;
        .build();&#xD;
    return new PostgresqlConnectionFactory(configuration);&#xD;
  }&#xD;
}&#xD;
&#xD;
@Log4j2&#xD;
@Service&#xD;
class CustomerService {&#xD;
&#xD;
  private final ConnectionFactory connectionFactory;&#xD;
&#xD;
  CustomerService(PostgresqlConnectionFactory pgc) {&#xD;
    this.connectionFactory = pgc;&#xD;
  }&#xD;
&#xD;
  Flux&amp;lt;Result&amp;gt; delete(Long id) {&#xD;
    return Mono.from(this.connectionFactory.create())&#xD;
      .flatMapMany(connection -&amp;gt; connection&#xD;
        .createStatement(&amp;quot;DELETE FROM customers where id = $1&amp;quot;)&#xD;
        .bind(&amp;quot;$1&amp;quot;, id) //&#xD;
        .execute());&#xD;
  }&#xD;
&#xD;
  Flux&amp;lt;Result&amp;gt; create(Long id, String email) {&#xD;
    return Mono.from(this.connectionFactory.create())&#xD;
      .flatMapMany(connection -&amp;gt; connection&#xD;
        .createStatement(&amp;quot;INSERT INTO customers(id,email) VALUES($1, $2)&amp;quot;)&#xD;
        .bind(&amp;quot;$1&amp;quot;, id) //&#xD;
        .bind(&amp;quot;$2&amp;quot;, email) //&#xD;
        .add().execute());&#xD;
  }&#xD;
&#xD;
  Flux&amp;lt;Customer&amp;gt; all() {&#xD;
&#xD;
    return Mono&#xD;
      .from(this.connectionFactory&#xD;
        .create())&#xD;
      .flatMapMany(connection -&amp;gt; Flux.from(&#xD;
        connection.createStatement(&amp;quot;select * from customers&amp;quot;).execute())&#xD;
        .flatMap(result -&amp;gt; result.map((row, rowMetadata) -&amp;gt; new Customer(row.get(&amp;quot;id&amp;quot;, Long.class),&#xD;
          row.get(&amp;quot;email&amp;quot;, String.class)))));&#xD;
  }&#xD;
&#xD;
}&#xD;
&#xD;
@Data&#xD;
@AllArgsConstructor&#xD;
@NoArgsConstructor&#xD;
class Customer {&#xD;
&#xD;
  private Long id;&#xD;
&#xD;
  private String email;&#xD;
&#xD;
} &#xD;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Pretty cool, eh? The APIs are natively reactive and mean you can take advantage of the facilities provided for retries and composition afforded to you by those APIs. &lt;/p&gt;&lt;h2&gt;&lt;a href="#rsocket-the-reactive-wire-protocol" class="anchor" name="rsocket-the-reactive-wire-protocol"&gt;&lt;/a&gt;RSocket: the reactive wire protocol&lt;/h2&gt;
&lt;p&gt;We also debuted our support for RSocket, a protocol developed by - among others - folks from Netflix who have since moved to Facebook. RSocket is a wire protocol that surfaces the tenants of reactive processing as part of the protocol itself. Facebook have developed two RSocket clients: one in C++ and another in Java. The Java RSocket client builds upon the Reactor project! RSocket is a binary protocol, though, so in theory you could build clients in other languages, as well. &lt;/p&gt;
&lt;p&gt;RSocket is a general purpose data conveyance protocol. It supports a number of message exchange patterns or styles including, but not limited to, request-response, fire-and-forget, publish-subscribe and streaming. The sky&amp;rsquo;s the limit! This post couldn&amp;rsquo;t hope to thoroughly introduce all of the options, so let&amp;rsquo;s look at a simple streaming example that has two components, a producer and a consumer. In order to get this to work, I went to the Spring Initializr, selected &lt;code&gt;Lombok&lt;/code&gt; and I chose the latest (stable) version of Spring Boot. In the build file, &lt;code&gt;pom.xml&lt;/code&gt;, I added two dependencies: &lt;code&gt;io.rsocket:rsocket-transport-netty:0.11.5&lt;/code&gt; and &lt;code&gt;io.rsocket:rsocket-core:0.11.5&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The goal here is to demonstrate how very simple these APIs are, and how flexible. You can use them directly or, as for example Netifi have done, as the basis for a whole suite of infrastructure supporting even more advanced use cases. &lt;/p&gt;
&lt;p&gt;The crux of this simple sample is that the producer is going to emit a new record every second, forever! So long as the universe hasn&amp;rsquo;t experienced its heat death, this example should keep going! &lt;/p&gt;
&lt;p&gt;First, let&amp;rsquo;s look at a trivial producer example. I set this up so that it will listen for the &lt;code&gt;ApplicationReadyEvent&lt;/code&gt; and only then start serving requests. I want to keep the Java process up (and thus listening for requests) so, as a bit of a kludge, I use &lt;code&gt;System.in.read()&lt;/code&gt; to poll the console for input. Remember, this API is non-blocking and asynchronous! It won&amp;rsquo;t keep the main thread alive if we don&amp;rsquo;t help it. &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;package s1p.rsocket.producer;&#xD;
&#xD;
import io.rsocket.AbstractRSocket;&#xD;
import io.rsocket.Payload;&#xD;
import io.rsocket.RSocketFactory;&#xD;
import io.rsocket.SocketAcceptor;&#xD;
import io.rsocket.transport.netty.server.TcpServerTransport;&#xD;
import io.rsocket.util.DefaultPayload;&#xD;
import lombok.extern.log4j.Log4j2;&#xD;
import org.springframework.boot.SpringApplication;&#xD;
import org.springframework.boot.autoconfigure.SpringBootApplication;&#xD;
import org.springframework.boot.context.event.ApplicationReadyEvent;&#xD;
import org.springframework.context.ApplicationListener;&#xD;
import reactor.core.publisher.Flux;&#xD;
import reactor.core.publisher.Mono;&#xD;
&#xD;
import java.io.IOException;&#xD;
import java.time.Duration;&#xD;
import java.time.Instant;&#xD;
&#xD;
@SpringBootApplication&#xD;
@Log4j2&#xD;
public class ProducerApplication implements ApplicationListener&amp;lt;ApplicationReadyEvent&amp;gt; {&#xD;
&#xD;
  public static void main(String[] args) throws IOException {&#xD;
    SpringApplication.run(ProducerApplication.class, args);&#xD;
    System.in.read();&#xD;
  }&#xD;
&#xD;
  @Override&#xD;
  public void onApplicationEvent(ApplicationReadyEvent applicationReadyEvent) {&#xD;
    SocketAcceptor sa = (connectionSetupPayload, rSocket) -&amp;gt;&#xD;
      Mono.just(new AbstractRSocket() {&#xD;
&#xD;
        @Override&#xD;
        public Flux&amp;lt;Payload&amp;gt; requestStream(Payload payload) { // produce a result when asked...&#xD;
          return Flux&#xD;
            .interval(Duration.ofMillis(1000))  // ...every one second&#xD;
            .map(aLong -&amp;gt; DefaultPayload.create(&amp;quot;interval: &amp;quot; + aLong));&#xD;
        }&#xD;
      });&#xD;
&#xD;
    RSocketFactory&#xD;
      .receive()&#xD;
      .acceptor(sa)&#xD;
      .transport(TcpServerTransport.create(&amp;quot;localhost&amp;quot;, 7000))&#xD;
      .start()&#xD;
      .onTerminateDetach()&#xD;
      .subscribe(nettyContextCloseable -&amp;gt; log.info(&amp;quot;started the server @ &amp;quot; + Instant.now().toString()));&#xD;
  }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The consumer is just as straightforward. It initiates a request to the service, gets the reactive streams &lt;code&gt;Publisher&amp;lt;T&amp;gt;&lt;/code&gt; from the service and iterates through each record, unpacking the binary payload as a &lt;code&gt;String&lt;/code&gt;, and logging it as it arrives. Here too, I use &lt;code&gt;System.in.read()&lt;/code&gt; as a way to keep the thread running.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;package s1p.rsocket.consumer;&#xD;
&#xD;
import io.rsocket.Payload;&#xD;
import io.rsocket.RSocketFactory;&#xD;
import io.rsocket.transport.netty.client.TcpClientTransport;&#xD;
import io.rsocket.util.DefaultPayload;&#xD;
import lombok.extern.log4j.Log4j2;&#xD;
import org.springframework.boot.SpringApplication;&#xD;
import org.springframework.boot.autoconfigure.SpringBootApplication;&#xD;
import org.springframework.boot.context.event.ApplicationReadyEvent;&#xD;
import org.springframework.context.ApplicationListener;&#xD;
&#xD;
import java.io.IOException;&#xD;
&#xD;
@Log4j2&#xD;
@SpringBootApplication&#xD;
public class ConsumerApplication implements ApplicationListener&amp;lt;ApplicationReadyEvent&amp;gt; {&#xD;
&#xD;
  public static void main(String[] args) throws IOException {&#xD;
    SpringApplication.run(ConsumerApplication.class, args);&#xD;
    System.in.read();&#xD;
  }&#xD;
&#xD;
  @Override&#xD;
  public void onApplicationEvent(ApplicationReadyEvent evt) {&#xD;
    RSocketFactory&#xD;
      .connect()&#xD;
      .transport(TcpClientTransport.create(&amp;quot;localhost&amp;quot;, 7000))&#xD;
      .start()&#xD;
      .flatMapMany(socket -&amp;gt;&#xD;
        socket&#xD;
          .requestStream(DefaultPayload.create(&amp;quot;Hello&amp;quot;))&#xD;
          .map(Payload::getDataUtf8)&#xD;
          .doFinally(signal -&amp;gt; socket.dispose())&#xD;
      )&#xD;
      .subscribe(name -&amp;gt; log.info(&amp;quot;consuming &amp;quot; + name + &amp;quot;.&amp;quot;));&#xD;
  }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both producer and consumer connect to &lt;code&gt;localhost:7000&lt;/code&gt; and start interacting. RSocket, like HTTP, doesn&amp;rsquo;t really care what the payload of the message is. It&amp;rsquo;s binary data on the wire, after all. &lt;/p&gt;&lt;h2&gt;&lt;a href="#next-steps" class="anchor" name="next-steps"&gt;&lt;/a&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;There have been a ton of talks that expand on both of these topics recorded here at SpringOne Platform! They&amp;rsquo;ll be online soon enough. (Don&amp;rsquo;t you wish you were here, in the meantime?) Spring plays a strong role here because it is end-to-end reactive. Imagine it! You could build reactive microservices that communicate service-to-service using RSocket. Why not use &lt;code&gt;@Tailable&lt;/code&gt; reactive Spring Data MongoDB repository methods to do a sort of continuous query on data in your MongoDB data set and stream, over RSocket, those results as they arrive in your MongoDB store? You could do the reverse, as well. Your RSocket client could stream a lot of data to be written to MongoDB, using the new &lt;em&gt;reactive&lt;/em&gt; transaction support in the Spring Data MonogDB release in the just released Spring Data Lovelace! Why not use R2DBC and return large amounts of data in a streaming fashion over RSocket. RSocket is also optimal for the edge, too! You can conduct RSocket over, for example, websockets. Imagine that: RSocket-based services that can be consumed directly by HTML5 clients. Or, you could create reactive HTTP services using Spring WebFlux that in turn invoke RSocket based services which in turn invoke R2DBC. As they say, the skies are potentially unbounded and asynchronous! &lt;/p&gt;
&lt;p&gt;The &lt;a href="http://twitter.com/ProjectReactor"&gt;Reactor team&lt;/a&gt; and the Spring team&amp;rsquo;s &lt;a href="http://twitter.com/NebHale"&gt;Ben Hale&lt;/a&gt;, among others, have worked diligently on both of these projects over more than a year, so I know they&amp;rsquo;re very excited to share this news with you and to answer any questions you have as you take up proverbial arms in the reactive revolution!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Batch 4.1.0.RC1 is now available</title>
    <link rel="alternate" href="https://spring.io/blog/2018/09/26/spring-batch-4-1-0-rc1-is-now-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>Mahmoud Ben Hassine</name>
    </author>
    <id>tag:spring.io,2018-09-24:3415</id>
    <updated>2018-09-26T21:00:34Z</updated>
    <content type="html">&lt;p&gt;On behalf of the Spring Batch team, I’m pleased to announce that Spring Batch 4.1.0.RC1 is now available on Github and the Pivotal download repository.&lt;/p&gt;&lt;h1&gt;&lt;a href="#what-s-new" class="anchor" name="what-s-new"&gt;&lt;/a&gt;What’s new?&lt;/h1&gt;
&lt;p&gt;In this release, we worked mainly on making Spring Batch build and run correctly on Java 8, 9, 10 and 11! This release is based on &lt;a href="https://spring.io/blog/2018/09/21/spring-framework-5-1-goes-ga"&gt;Spring Framework 5.1 GA&lt;/a&gt; as well as the latest versions of Spring Integration, Spring AMQP and Spring Data. For a complete list of changes, please refer to the &lt;a href="https://jira.spring.io/secure/ReleaseNote.jspa?projectId=10090&amp;version=16996"&gt;change log&lt;/a&gt;.&lt;/p&gt;&lt;h1&gt;&lt;a href="#what-s-next" class="anchor" name="what-s-next"&gt;&lt;/a&gt;What’s next?&lt;/h1&gt;
&lt;p&gt;Our plan is to release Spring Batch 4.1 GA by the end of October right in time for Spring Boot 2.1 GA. The focus will be on making this release candidate as stable as possible so please help us by testing new features and submitting your feedback on &lt;a href="https://jira.spring.io/projects/BATCH/summary"&gt;JIRA&lt;/a&gt;, &lt;a href="https://stackoverflow.com/questions/tagged/spring-batch"&gt;StackOverflow&lt;/a&gt; or &lt;a href="https://gitter.im/spring-batch/Lobby"&gt;Gitter&lt;/a&gt;. You can consume Spring Batch 4.1.0.RC1 with &lt;a href="https://spring.io/blog/2018/09/25/spring-boot-2-1-m4-available-now"&gt;Spring Boot 2.1.0.M4&lt;/a&gt;.&lt;/p&gt;&lt;h1&gt;&lt;a href="#springone-platform-2018" class="anchor" name="springone-platform-2018"&gt;&lt;/a&gt;SpringOne Platform 2018&lt;/h1&gt;
&lt;p&gt;The Spring Batch team is present at &lt;a href="https://springoneplatform.io"&gt;SpringOne Platform&lt;/a&gt; conference. &lt;a href="https://www.twitter.com/michaelminella"&gt;&lt;code&gt;@michaelminella&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://www.twitter.com/_benas_"&gt;&lt;code&gt;@_benas_&lt;/code&gt;&lt;/a&gt; will be presenting a session on &lt;a href="https://springoneplatform.io/2018/sessions/high-performance-batch-processing"&gt;high performance batch processing&lt;/a&gt; on Thursday September 27, 2018. You are welcome to this session to see this latest 4.1.0.RC1 release in action!&lt;/p&gt;
&lt;p&gt;&lt;a href="https://spring.io/projects/spring-batch"&gt;Spring Batch Home&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-batch"&gt;Source on GitHub&lt;/a&gt; | &lt;a href="https://docs.spring.io/spring-batch/4.1.x/reference/html/index.html"&gt;Reference Documentation&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>What's new in Spring Data Lovelace for Redis and Apache Cassandra?</title>
    <link rel="alternate" href="https://spring.io/blog/2018/09/26/what-s-new-in-spring-data-lovelace-for-redis-and-apache-cassandra" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Mark Paluch</name>
    </author>
    <id>tag:spring.io,2018-09-21:3408</id>
    <updated>2018-09-26T12:28:00Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;This blog post explains the new and noteworthy in &lt;a href="https://github.com/spring-projects/spring-data-commons/wiki/Release-Train-Lovelace"&gt;Spring Data Lovelace&lt;/a&gt; for &lt;a href="https://spring.io/blog/2018/09/26/what-s-new-in-spring-data-lovelace-for-redis-and-apache-cassandra#cassandra"&gt;Apache Cassandra&lt;/a&gt; and &lt;a href="https://spring.io/blog/2018/09/26/what-s-new-in-spring-data-lovelace-for-redis-and-apache-cassandra#redis"&gt;Redis&lt;/a&gt;.
Make sure to also check out the blog post on &lt;a href="https://spring.io/blog/2018/09/27/what-s-new-in-spring-data-lovelace-for-mongodb"&gt;What&amp;#8217;s new in Spring Data Lovelace for MongoDB?&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;With Spring Data Lovelace just released in its generally available version last week, it&amp;#8217;s time to have a brief walk through the new feature&amp;#8217;s we have added.
The release train is pretty packed with features.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;In this blog post, I&amp;#8217;ll be covering &lt;a href="https://spring.io/blog/2018/09/26/what-s-new-in-spring-data-lovelace-for-redis-and-apache-cassandra#cassandra"&gt;Apache Cassandra&lt;/a&gt; and &lt;a href="https://spring.io/blog/2018/09/26/what-s-new-in-spring-data-lovelace-for-redis-and-apache-cassandra#redis"&gt;Redis&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id="cassandra" class="sect0"&gt;&lt;a class="anchor" href="#cassandra"&gt;&lt;/a&gt;Spring Data for Apache Cassandra&lt;/h1&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;With this release, we refined data access with Cassandra-specific types, introduced support for lifecycle events, improved the programming experience for both Java and Kotlin usage and included various other refinements. Let us take a look at how this release can help improve your data access to Cassandra.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="map-and-tuple-refinements"&gt;&lt;a class="anchor" href="#map-and-tuple-refinements"&gt;&lt;/a&gt;Map and Tuple Refinements&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Map and Tuple data types are specific types in Cassandra that allow storing multiple values within a single column. Previously, we supported both types in their raw form in mapped entities, which means that you could use only maps with primitive keys and values. For tuples, you could only use &lt;code&gt;TupleValue&lt;/code&gt;, the raw Cassandra driver type, without further mapping or even schema support.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;With this release, we added mapping and conversion support for Map- and Tuple-typed properties. Maps can now contain non-primitive keys and values, and the conversion layer applies potentially registered converters.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Consider the following types:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;@UserDefinedType
class Manufacturer {

  String name;

  // getters/setters omitted
}

@Table
class Supplier {

  Map&amp;lt;Manufacturer, List&amp;lt;String&amp;gt;&amp;gt; acceptedCurrencies;

  // getters/setters omitted
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;code&gt;Manufacturer&lt;/code&gt; is a mapped user-defined type that is used by the map as a key. Values are represented as &lt;code&gt;List&lt;/code&gt; of strings. We can now refactor the code to use a proper &lt;code&gt;Currency&lt;/code&gt; type (such as &lt;code&gt;java.util.Currency&lt;/code&gt;) within the list. To do so, we provide converters between &lt;code&gt;String&lt;/code&gt; and &lt;code&gt;Currency&lt;/code&gt; and register these through &lt;code&gt;CassandraCustomConversions&lt;/code&gt;. The following example shows how to do so:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;enum StringToCurrencyConverter implements Converter&amp;lt;String, Currency&amp;gt; {
  INSTANCE;

  @Override
  public Currency convert(String source) {
    return Currency.getInstance(source);
  }
}

enum CurrencyToStringConverter implements Converter&amp;lt;Currency, String&amp;gt; {

  INSTANCE;

  @Override
  public String convert(Currency source) {
    return source.getCurrencyCode();
  }
}

@Configuration
class MyCassandraConfiguration {

  public CassandraCustomConversions cassandraCustomConversions() {
    return new CassandraCustomConversions(
      Arrays.asList(StringToCurrencyConverter.INSTANCE, CurrencyToStringConverter.INSTANCE));
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;After registering the converters, we can go forward and use &lt;code&gt;Currency&lt;/code&gt; within the &lt;code&gt;Supplier&lt;/code&gt; type to work with value objects instead of primitives, as the following example shows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;@Table
class Supplier {

  Map&amp;lt;Manufacturer, List&amp;lt;Currency&amp;gt;&amp;gt; acceptedCurrencies;

  // getters/setters omitted
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Tuples were not really usable with previous versions of Spring Data for Apache Cassandra. Using tuples required direct &lt;code&gt;Row&lt;/code&gt; interaction and &lt;code&gt;TupleType&lt;/code&gt; retrieval to create appropriate tuple values. Therefore, we decided to provide mapped tuple types, as the following example shows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;@Table
class Supplier {

  List&amp;lt;Dependance&amp;gt; dependances;

  // getters/setters omitted
}

@Tuple
class Dependance {

  @Element(0) String address;
  @Element(1) String city;
  @Element(2) Currency currency;

  // getters/setters omitted
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Mapped tuples are annotated with &lt;code&gt;@Tuple&lt;/code&gt;, and the individual components of a tuple refer (by using &lt;code&gt;@Element(…)&lt;/code&gt;) to their ordinal index within the tuple. The converter inspects loaded tuples and maps these onto regular Java classes that are part of your domain model. You no longer need to interact with &lt;code&gt;TupleType&lt;/code&gt; and &lt;code&gt;TupleValue&lt;/code&gt; directly – although you still can – but you can represent tuple values in a type-safe approach. Mapped tuples benefit from the various mapping-features of the converter and can refer to types that have a custom converter registered.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Support for maps and tuples also includes schema generation to rapidly set up a schema by deriving the type from your domain model.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;See our &lt;a href="https://github.com/spring-projects/spring-data-examples/tree/be17e153049342e7bc7f3d63f93cc221da72dfab/cassandra/example/src/main/java/example/springdata/cassandra/convert"&gt;examples for mapped tuples&lt;/a&gt; for further details.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="lifecycle-events"&gt;&lt;a class="anchor" href="#lifecycle-events"&gt;&lt;/a&gt;Lifecycle Events&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The Cassandra mapping framework now includes several &lt;code&gt;org.springframework.context.ApplicationEvent&lt;/code&gt; events that your application can respond to by registering special beans in the &lt;code&gt;ApplicationContext&lt;/code&gt;. To intercept an object before it goes through the conversion process (which turns your domain object into a &lt;code&gt;Statement&lt;/code&gt;), you can register a subclass of &lt;code&gt;AbstractCassandraEventListener&lt;/code&gt; that overrides the &lt;code&gt;onBeforeSave&lt;/code&gt; method. When the event is dispatched, your listener is called and passed the domain object before it goes into the converter. The following example shows how to use &lt;code&gt;onBeforeSave&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;public class BeforeConvertListener extends AbstractCassandraEventListener&amp;lt;Person&amp;gt; {
  @Override
  public void onBeforeSave(BeforeSaveEvent&amp;lt;Person&amp;gt; event) {
    // does some auditing manipulation, set timestamps, whatever
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Declaring these beans in your Spring ApplicationContext causes them to be invoked whenever the event is dispatched.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The following callback methods are present in &lt;code&gt;AbstractCassandraEventListener&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;onBeforeSave&lt;/code&gt;: Called in &lt;code&gt;CassandraTemplate&lt;/code&gt; &lt;code&gt;save&lt;/code&gt; operations &lt;strong&gt;before&lt;/strong&gt; inserting or saving the row in the database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;onAfterSave&lt;/code&gt;: Called in &lt;code&gt;CassandraTemplate&lt;/code&gt; &lt;code&gt;save&lt;/code&gt; operations &lt;strong&gt;after&lt;/strong&gt; inserting or saving the row in the database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;onBeforeDelete&lt;/code&gt;: Called in &lt;code&gt;CassandraTemplate&lt;/code&gt; &lt;code&gt;delete&lt;/code&gt; operations &lt;strong&gt;before&lt;/strong&gt; deleting the row in the database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;onAfterDelete&lt;/code&gt;: Called in &lt;code&gt;CassandraTemplate&lt;/code&gt; &lt;code&gt;delete&lt;/code&gt; operation &lt;strong&gt;after&lt;/strong&gt; deleting the row in the database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;onAfterLoad&lt;/code&gt;: Called in &lt;code&gt;CassandraTemplate&lt;/code&gt; &lt;code&gt;select&lt;/code&gt; and &lt;code&gt;selectOne&lt;/code&gt; methods &lt;strong&gt;after&lt;/strong&gt; the row has been retrieved from the database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;onAfterConvert&lt;/code&gt;: Called in &lt;code&gt;CassandraTemplate&lt;/code&gt; &lt;code&gt;select&lt;/code&gt; and &lt;code&gt;selectOne&lt;/code&gt; methods &lt;strong&gt;after&lt;/strong&gt; the row that has been retrieved from the database was converted to a POJO.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Lifecycle events are only emitted for root level types. Complex types used as properties within an entity root are not subject to event publication.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;See our &lt;a href="https://github.com/spring-projects/spring-data-examples/blob/be17e153049342e7bc7f3d63f93cc221da72dfab/cassandra/example/src/test/java/example/springdata/cassandra/events/LifecycleEventsTests.java"&gt;examples for Lifecycle Events&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="kotlin-extensions"&gt;&lt;a class="anchor" href="#kotlin-extensions"&gt;&lt;/a&gt;Kotlin Extensions&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Spring Data exposes methods that accept a target type to either query for or to project results values onto. Kotlin represents classes with its own type (&lt;code&gt;KClass&lt;/code&gt;), which can be an obstacle when attempting to obtain a Java Class type.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Spring Data for Apache Cassandra ships with extensions that add overloads for methods that accept a type parameter by either using generics or accepting KClass directly, as the following example shows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;operations.getTableName&amp;lt;Person&amp;gt;()

operations.getTableName(Person::class)

operations.find&amp;lt;Person&amp;gt;().as&amp;lt;Contact&amp;gt;
  .matching(query(where("firstname").isEqualTo("luke"))).all();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;See our &lt;a href="https://github.com/spring-projects/spring-data-examples/tree/boot-next/cassandra/kotlin"&gt;Cassandra Kotlin usage&lt;/a&gt; examples for further details.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="fluent-template-api"&gt;&lt;a class="anchor" href="#fluent-template-api"&gt;&lt;/a&gt;Fluent Template API&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The &lt;code&gt;CassandraOperations&lt;/code&gt; interface is one of the central components when it comes to more low-level interaction with Apache Cassandra. It offers a wide range of methods that cover needs from batching and result streaming to CRUD operations. You can find multiple overloads for each method. Most of them cover optional or alternative parts of the API, such as query by CQL, &lt;code&gt;Statement&lt;/code&gt;, or query by &lt;code&gt;Query&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;code&gt;FluentCassandraOperations&lt;/code&gt; provides a more narrow interface for the common methods of &lt;code&gt;CassandraOperations&lt;/code&gt; and provides a more readable, fluent API. The entry points (&lt;code&gt;insert(…)&lt;/code&gt;, &lt;code&gt;query(…)&lt;/code&gt;, &lt;code&gt;update(…)&lt;/code&gt;, and others) follow a natural naming schema based on the operation to be run. Moving on from the entry point, the API is designed to offer only context-dependent methods that lead to a terminating method that invokes the actual &lt;code&gt;Cassandra&lt;/code&gt; counterpart.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Consider a query example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;List&amp;lt;Person&amp;gt; all = operations.query(Person.class)
  .inTable("people")
  .all();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This query queries the &lt;code&gt;people&lt;/code&gt; table for all rows and maps the result onto the &lt;code&gt;Person&lt;/code&gt; type. Omitting &lt;code&gt;inTable(…)&lt;/code&gt; derives the table name from the entity type.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The next example uses projections and a query:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;List&amp;lt;Contact&amp;gt; all = operations.query(Person.class)
  .as(Contact.class)
  .matching(query(where("firstname").is("luke")))
  .all();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This query uses the table onto which the &lt;code&gt;Person&lt;/code&gt; type is mapped and projects results (DTO or interface projection) on to &lt;code&gt;Contact&lt;/code&gt;. The query itself is mapped by using field names from the &lt;code&gt;Person&lt;/code&gt; type.
You can switch between retrieving a single entity and retrieving multiple objects as a &lt;code&gt;List&lt;/code&gt; or a &lt;code&gt;Stream&lt;/code&gt; through the terminating methods: &lt;code&gt;first()&lt;/code&gt;, &lt;code&gt;one()&lt;/code&gt;, &lt;code&gt;all()&lt;/code&gt;, or &lt;code&gt;stream()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The fluent API is type-safe, and intermediate objects are immutable. You can prepare base parts of your query and continue with a more specific execution, as the following example shows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;TerminatingSelect&amp;lt;Contact&amp;gt; select = operations.query(Person.class)
  .as(Contact.class)
  .matching(query(where("firstname").is("luke")))

Contact contact = select.first();
long count = select.count();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;See our &lt;a href="https://github.com/spring-projects/spring-data-examples/tree/be17e153049342e7bc7f3d63f93cc221da72dfab/cassandra/kotlin"&gt;Kotlin example&lt;/a&gt; for further details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Several other enhancements have found their way into the Spring Data for Apache Cassandra module so make sure to check out the &lt;a href="https://docs.spring.io/spring-data/cassandra/docs/2.1.0.RELEASE/reference/html/#new-features.2-1-0"&gt;new features&lt;/a&gt; section in the reference documentation to learn more about reactive slice queries and exists/count projections.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id="redis" class="sect0"&gt;&lt;a class="anchor" href="#redis"&gt;&lt;/a&gt;Spring Data Redis&lt;/h1&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This release of Spring Data Redis ships with improvements across various themes that did not fit into the 2.0 release. Most of them smooth out the rough edges around Redis cluster usage. The core themes are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Connection improvements&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Refinements for Redis Cluster usage&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Various improvements in the framework&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="connection-improvements"&gt;&lt;a class="anchor" href="#connection-improvements"&gt;&lt;/a&gt;Connection Improvements&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Redis supports various modes of operations: Standalone, Standalone with Replication, Redis Sentinel with or without Replication, Redis Cluster. We have covered Standalone, Redis Sentinel and Redis Cluster modes. The missing pieces so far have been reads from replicas. This release introduces support for Replica reads across the variety of Redis operation modes. The following example shows how to use this new feature:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;LettuceClientConfiguration clientConfiguration = LettuceClientConfiguration.builder()
  .readFrom(ReadFrom.NEAREST)
  .build();

RedisSentinelConfiguration endpoint = new RedisSentinelConfiguration()
  .master("my-master")
  .sentinel("sentinel-host1", 26379)
  .sentinel("sentinel-host2", 26379);

LettuceConnectionFactory factory = new LettuceConnectionFactory(endpoint, clientConfiguration);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Specifying &lt;code&gt;ReadFrom&lt;/code&gt; lets you select a particular node type when issuing read-only commands, such as &lt;code&gt;GET&lt;/code&gt; or &lt;code&gt;SMEMBERS&lt;/code&gt;. You can either use one of Lettuce&amp;#8217;s pre-defined settings or create a new &lt;code&gt;ReadFrom&lt;/code&gt; strategy. &lt;code&gt;ReadFrom&lt;/code&gt; is considered in all setups where replicas are available: Redis Sentinel, Redis Cluster, and static Master/Replica setups, such as AWS ElastiCache, which brings us to the next improvement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;You can use AWS ElastiCache or any other static Master/Replica setup (that is, using Redis with one or more dedicated replicas) with Spring Data Redis and Lettuce to read from replica nodes. In previous releases, you were able to use the master node only. Take a look at the following configuration code snippet:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;LettuceClientConfiguration clientConfiguration = LettuceClientConfiguration.builder().readFrom(ReadFrom.NEAREST).build();

RedisStaticMasterSlaveConfiguration endpoint = new RedisStaticMasterSlaveConfiguration("my-master-host", 6379)
  .node("my-replica-host1", 6379)
  .node("my-replica-host2", 6379);

LettuceConnectionFactory factory = new LettuceConnectionFactory(endpoint, clientConfiguration);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;In this cod, we configure &lt;code&gt;LettuceConnectionFactory&lt;/code&gt; to use multiple nodes without actually specifying the roles. Lettuce itself determines the role of the individual hosts and uses the nodes according to their roles.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The last refinement in this category is the use of local connections through Unix domain sockets. A Unix domain socket or IPC (inter-process communication) socket is a data communications endpoint for exchanging data between processes that run on the same host operating system. As with named pipes, Unix domain sockets support the transmission of a reliable stream of bytes that compares to TCP. Because Unix domain socket communication happens within the kernel only, communication bypasses networking and generally features an improved performance profile.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;To use Unix domain sockets, you need to use Lettuce and add native extensions for Netty (either &lt;code&gt;netty-transport-native-epoll&lt;/code&gt; when running on Linux or &lt;code&gt;netty-transport-native-kqueue&lt;/code&gt; when running on MacOS). The following example configures communication with Redis through a socket:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;RedisSocketConfiguration endpoint = new RedisSocketConfiguration("/var/run/redis");

LettuceConnectionFactory factory = new LettuceConnectionFactory(endpoint);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="redis-cluster-refinements"&gt;&lt;a class="anchor" href="#redis-cluster-refinements"&gt;&lt;/a&gt;Redis Cluster Refinements&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This release ships with refinements in connection handling for Redis Cluster connections that use the Lettuce driver. Previous versions did not share the underlying Lettuce connection to Redis Cluster, which manifested in performance degradations as new connections always established a new cluster connection. This behavior causes an impact when issuing multiple commands as, each command basically uses a new &lt;code&gt;RedisConnection&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;By default, native connection sharing is now enabled for Redis Cluster connections. Other usage patterns (such as Redis Standalone) have already been using connection sharing in previous versions. The following example shows how to create a &lt;code&gt;LettuceConnectionFactory&lt;/code&gt; with a shared native connection:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;RedisClusterConfiguration clusterConfiguration = new RedisClusterConfiguration(…);

LettuceConnectionFactory factory = new LettuceConnectionFactory(clusterConfiguration);
factory.setShareNativeConnection(true);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Some operations, such as blocking operations, require dedicated connections to not impact other processes that would operate on the same native connection. You can enable pooling for Redis Cluster connections to buffer connection creation if your application heavily relies on blocking Redis commands. Enabling pooling is a client-configuration aspect. With pooling enabled, &lt;code&gt;LettuceConnectionFactory&lt;/code&gt; applies pooling to the configured Redis usage scheme. You can use &lt;code&gt;LettucePoolingClientConfiguration&lt;/code&gt; as entry-point to enable pooling, as the following example shows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;LettucePoolingClientConfiguration clientConfiguration = LettucePoolingClientConfiguration.builder().poolConfig(…).build();
RedisClusterConfiguration clusterConfiguration = new RedisClusterConfiguration(…);

LettuceConnectionFactory factory = new LettuceConnectionFactory(clusterConfiguration, clientConfiguration);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;With the introduction of &lt;code&gt;ReadFrom&lt;/code&gt; settings and streamlined Cluster connection handling, we can now support Cluster-wide keyspace scanning by using the &lt;code&gt;SCAN&lt;/code&gt; command. Behind the scenes, the driver maintains a stateful cursor that lets you iterate over all master/replica nodes that hold keys in a Cluster. Using the connection&amp;#8217;s &lt;code&gt;scan(…)&lt;/code&gt; method gives you the same experience as if it was used on a Redis Standalone setup, as the following example shows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;Cursor&amp;lt;byte[]&amp;gt; scan = clusterConnection.keyCommands()
  .scan(ScanOptions.scanOptions().match("foo*").build());
scan.forEachRemaining(key -&amp;gt; …);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Keyspace scanning also provides a reactive variant for all Redis operation modes. Calling &lt;code&gt;scan(…)&lt;/code&gt; on the reactive Redis Template API returns a &lt;code&gt;Flux&lt;/code&gt; of keys. The resulting &lt;code&gt;Flux&lt;/code&gt; is backpressure-aware and translates demand into &lt;code&gt;SCAN&lt;/code&gt; invocations if there is sufficient demand to scan the whole keyspace. It stops scanning if the demand is satisfied. The following example constructs such a &lt;code&gt;Flux&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;Flux&amp;lt;String&amp;gt; scan = redisTemplate.scan(ScanOptions.scanOptions().match("something*").build());&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="redis-repository-improvements"&gt;&lt;a class="anchor" href="#redis-repository-improvements"&gt;&lt;/a&gt;Redis Repository Improvements&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This release ships with Query by Example support for Redis repositories. Query by Example is a user-friendly querying technique with a simple interface. It allows dynamic query creation and does not require you to write queries that contain field names. The nature of Query by Example does not require a query language, as the actual query derives from the &lt;code&gt;Example&lt;/code&gt; object. You can now define an &lt;code&gt;Example&lt;/code&gt; to query for indexed values that are stored in Redis hashes. Redis repositories can implement the &lt;code&gt;QueryByExampleExecutor&lt;/code&gt; fragment to inherit Query by Example methods. Take a look at the following snippet:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;interface PersonRepository extends CrudRepository&amp;lt;Person, String&amp;gt;, QueryByExampleExecutor&amp;lt;Person&amp;gt; {
}

PersonRepository repository = …;

Person eddard = new Person("eddard", "stark");
Person tyrion = new Person("tyrion", "lannister");
Person robb = new Person("robb", "stark");
Person jon = new Person("jon", "snow");
Person arya = new Person("arya", "stark");

repository.saveAll(Arrays.asList(eddard, tyrion, robb, jon, arya));

List&amp;lt;Person&amp;gt; result = repository.findAll(Example.of(new Person(null, "stark")));&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This code inserts a bunch of &lt;code&gt;Person&lt;/code&gt; objects. The &lt;code&gt;Example&lt;/code&gt; object defines a probe, with only the last name set. The Query engine creates a query that includes only non-null fields (by default) querying for objects whose &lt;code&gt;lastname&lt;/code&gt; is &lt;code&gt;stark&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;See the &lt;a href="https://github.com/spring-projects/spring-data-examples/blob/be17e153049342e7bc7f3d63f93cc221da72dfab/redis/repositories/src/test/java/example/springdata/redis/repositories/PersonRepositoryTests.java#L156"&gt;Query-by-Example sample&lt;/a&gt; for further details.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Redis repositories now support type aliasing that you can use by annotating your domain classes with &lt;code&gt;@TypeAlias&lt;/code&gt;. By default, type hints in Redis use the fully-qualified class name. You can apply aliasing to customize type names and to reduce Redis memory usage.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The following example persists an instance of a &lt;code&gt;Person&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;package com.acme;

@TypeAlias("person")
class Person {
  // …
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This code causes the type hint (&lt;code&gt;person&lt;/code&gt;) to be used instead of &lt;code&gt;com.acme.Person&lt;/code&gt;. The corresponding commands that are used to store the entity in Redis are as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;HMSET "person:19315449-cda2-4f5c-b696-9cb8018fa1f9" "_class" "person" "id" "19315449-cda2-4f5c-b696-9cb8018fa1f9"&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Several other enhancements have found their way into the Redis module so make sure to check out the &lt;a href="https://docs.spring.io/spring-data/redis/docs/2.1.0.RELEASE/reference/html/#new-in-2.1.0"&gt;new features&lt;/a&gt; section in the reference documentation to learn more about keyspace scanning, reactive Pub/Sub, and new commands.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring (SpringOne Platform 2018 edition) - September 25th, 2018</title>
    <link rel="alternate" href="https://spring.io/blog/2018/09/26/this-week-in-spring-springone-platform-2018-edition-september-25th-2018" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2018-09-26:3417</id>
    <updated>2018-09-26T03:09:00Z</updated>
    <content type="html">&lt;p&gt;It&amp;rsquo;s been such a crazy SpringOne Platform 2018 and we literally just started! I don&amp;rsquo;t even know where to begin! The show represents the convergence of the best and the brightest in the ecosystem. It&amp;rsquo;s absolutely amazing all the people who want and love to be here. &lt;/p&gt;
&lt;p&gt;From our friends in the ecosystem, we see people from all organizations. IBM, Amazon Web Services, Microsoft &lt;em&gt;and&lt;/em&gt; Google are &lt;em&gt;all&lt;/em&gt; here hoping to make their platform the most compelling place to run Pivotal Cloud Foundry and Spring-based workloads. It&amp;rsquo;s great to see my friends from all these organizations! Friends like my friends Erin Schnabel, Emma Tucker, Billy Korando and Pratik Patel from IBM&amp;hellip;&lt;/p&gt;
&lt;img src="https://pbs.twimg.com/media/Dn-VvuqUwAANaZt.jpg" width = "500" alt = "IBM devrel at Atomist party"/&gt;
&lt;p&gt;&amp;hellip;and my friend Ray Tsang from Google and Bruno Borges from Microsoft.. &lt;/p&gt;
&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Hanging with &lt;a href="https://twitter.com/googlecloud?ref_src=twsrc%5Etfw"&gt;@googlecloud&lt;/a&gt; ‘a &lt;a href="https://twitter.com/saturnism?ref_src=twsrc%5Etfw"&gt;@saturnism&lt;/a&gt; and &lt;a href="https://twitter.com/Azure?ref_src=twsrc%5Etfw"&gt;@Azure&lt;/a&gt; ‘a &lt;a href="https://twitter.com/brunoborges?ref_src=twsrc%5Etfw"&gt;@brunoborges&lt;/a&gt; &lt;a href="https://twitter.com/s1p?ref_src=twsrc%5Etfw"&gt;@s1p&lt;/a&gt; — where’s &lt;a href="https://twitter.com/arungupta?ref_src=twsrc%5Etfw"&gt;@arungupta&lt;/a&gt; ? &lt;a href="https://t.co/UMfquZPudG"&gt;pic.twitter.com/UMfquZPudG&lt;/a&gt;&lt;/p&gt;&amp;mdash; Josh Long (???, ???) (@starbuxman) &lt;a href="https://twitter.com/starbuxman/status/1044411203697745920?ref_src=twsrc%5Etfw"&gt;September 25, 2018&lt;/a&gt;&lt;/blockquote&gt;&lt;br/&gt;&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s nice when you can reunit with old colleagues who are now ecosystem partners and friends - it was amazing to see former VMWare and Pivotal alum Mark Chmarny (left) representing Google&amp;rsquo;s KNative efforts today!&lt;/p&gt;
&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;This isn’t quite what I think most of us involved in the &lt;a href="https://twitter.com/s1p?ref_src=twsrc%5Etfw"&gt;@s1p&lt;/a&gt; keynote were expecting when they said there was a ‘green room’! &lt;br&gt;&lt;br&gt;LTR the &lt;a href="https://twitter.com/KnativeProject?ref_src=twsrc%5Etfw"&gt;@KnativeProject&lt;/a&gt; natives: &lt;a href="https://twitter.com/Google?ref_src=twsrc%5Etfw"&gt;@google&lt;/a&gt; ‘s &lt;a href="https://twitter.com/mchmarny?ref_src=twsrc%5Etfw"&gt;@mchmarny&lt;/a&gt; and &lt;a href="https://twitter.com/pivotal?ref_src=twsrc%5Etfw"&gt;@pivotal&lt;/a&gt; ‘s &lt;a href="https://twitter.com/m_f_?ref_src=twsrc%5Etfw"&gt;@m_f_&lt;/a&gt; &lt;a href="https://t.co/pMk9vQcRdI"&gt;pic.twitter.com/pMk9vQcRdI&lt;/a&gt;&lt;/p&gt;&amp;mdash; Josh Long (???, ???) (@starbuxman) &lt;a href="https://twitter.com/starbuxman/status/1044750037203472389?ref_src=twsrc%5Etfw"&gt;September 26, 2018&lt;/a&gt;&lt;/blockquote&gt;&lt;br/&gt;&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;It was also great to see former SpringSource colleagues and friends Rod Johnson (creator of Spring) and Christian Dupuis representing Atomist, the new continuous delivery sensation that&amp;rsquo;s sweeping the nation!&lt;/p&gt;
&lt;img src="https://pbs.twimg.com/media/Dn-wYipX0AAl2-S.jpg" width ="500" alt = "Atomist Party" /&gt;
&lt;p&gt;I had fun MC&amp;rsquo;ing this morning&amp;rsquo;s keynote with Pivotal legend Dormain Drewitz! &lt;/p&gt;
&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Opening &lt;a href="https://twitter.com/s1p?ref_src=twsrc%5Etfw"&gt;@s1p&lt;/a&gt; &lt;a href="https://t.co/SHv1r7L2aX"&gt;pic.twitter.com/SHv1r7L2aX&lt;/a&gt;&lt;/p&gt;&amp;mdash; Christophe F. (@_christophe_f) &lt;a href="https://twitter.com/_christophe_f/status/1044573490949574656?ref_src=twsrc%5Etfw"&gt;September 25, 2018&lt;/a&gt;&lt;/blockquote&gt;&lt;br/&gt;&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;It was crazy fun sharing the stage with some of the best in the business, including the Spring team&amp;rsquo;s own legends, Spring co-founder Juergen Hoeller and the good Dr. David Syer.&lt;/p&gt;
&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Life tip: find yourself some friends who like you enough to take a selfie with you while 3000+ ppl are in the room watching and waiting and countless thousands more are watching the live stream! &lt;a href="https://twitter.com/hashtag/springOne?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#springOne&lt;/a&gt; &lt;a href="https://twitter.com/s1p?ref_src=twsrc%5Etfw"&gt;@s1p&lt;/a&gt;&lt;br&gt;&lt;br&gt;I love my &lt;a href="https://twitter.com/springcentral?ref_src=twsrc%5Etfw"&gt;@springcentral&lt;/a&gt; fam: LTR dr. &lt;a href="https://twitter.com/david_syer?ref_src=twsrc%5Etfw"&gt;@david_syer&lt;/a&gt; and &lt;a href="https://twitter.com/springjuergen?ref_src=twsrc%5Etfw"&gt;@springjuergen&lt;/a&gt; &lt;a href="https://t.co/11Vxkb3Lzt"&gt;pic.twitter.com/11Vxkb3Lzt&lt;/a&gt;&lt;/p&gt;&amp;mdash; Josh Long (???, ???) (@starbuxman) &lt;a href="https://twitter.com/starbuxman/status/1044751898098782208?ref_src=twsrc%5Etfw"&gt;September 26, 2018&lt;/a&gt;&lt;/blockquote&gt;&lt;br/&gt;&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;Speaking of the good Dr. Syer, I love this pearl of wisdom (from among thousands) from his keynote this morning:&lt;/p&gt;
&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;.&lt;a href="https://twitter.com/david_syer?ref_src=twsrc%5Etfw"&gt;@david_syer&lt;/a&gt; on abstractions at &lt;a href="https://twitter.com/hashtag/SpringOne?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#SpringOne&lt;/a&gt;: &lt;a href="https://t.co/6WGhyZ4Aur"&gt;pic.twitter.com/6WGhyZ4Aur&lt;/a&gt;&lt;/p&gt;&amp;mdash; Pivotal (@pivotal) &lt;a href="https://twitter.com/pivotal/status/1044587088694398977?ref_src=twsrc%5Etfw"&gt;September 25, 2018&lt;/a&gt;&lt;/blockquote&gt;&lt;br/&gt;&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;I am so grateful that my buddy Matt Raible and I managed to finish a crazy 75+ printed pages of blog content just in time for the big show! Cheers buddy! We did it! &lt;/p&gt;
&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;It’s &lt;a href="https://twitter.com/mraible?ref_src=twsrc%5Etfw"&gt;@mraible&lt;/a&gt; and I fresh off publishing like 75 pages of blog content in the last two weeks for the &lt;a href="https://twitter.com/oktadev?ref_src=twsrc%5Etfw"&gt;@oktadev&lt;/a&gt; blog. We introduce all things &lt;a href="https://twitter.com/ProjectReactor?ref_src=twsrc%5Etfw"&gt;@ProjectReactor&lt;/a&gt; &lt;a href="https://twitter.com/springboot?ref_src=twsrc%5Etfw"&gt;@springboot&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/Webflux?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#Webflux&lt;/a&gt; &lt;a href="https://twitter.com/reactjs?ref_src=twsrc%5Etfw"&gt;@reactjs&lt;/a&gt; and more &lt;br&gt;&lt;br&gt;I love working with that guy. We get it good stuff done and have fun the entire way &lt;a href="https://t.co/O3EpWe3l2h"&gt;pic.twitter.com/O3EpWe3l2h&lt;/a&gt;&lt;/p&gt;&amp;mdash; Josh Long (???, ???) (@starbuxman) &lt;a href="https://twitter.com/starbuxman/status/1044750601794531328?ref_src=twsrc%5Etfw"&gt;September 26, 2018&lt;/a&gt;&lt;/blockquote&gt;&lt;br/&gt;&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;At SpringOne Platform, anything is possible! The Spring team is geographically dispersed, so it&amp;rsquo;s great to be able to catch selfies with a plurality of any given team all in the same venue! Here, I get selfies with three members of the Spring Security team&lt;/p&gt;
&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Look at my security peeps Josh Cummings, &lt;a href="https://twitter.com/joe_grandja?ref_src=twsrc%5Etfw"&gt;@joe_grandja&lt;/a&gt; and &lt;a href="https://twitter.com/rob_winch?ref_src=twsrc%5Etfw"&gt;@rob_winch&lt;/a&gt; &lt;a href="https://twitter.com/s1p?ref_src=twsrc%5Etfw"&gt;@s1p&lt;/a&gt; &lt;a href="https://twitter.com/hashtag/springOne?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#springOne&lt;/a&gt; &lt;a href="https://t.co/NjAgQTI0iF"&gt;pic.twitter.com/NjAgQTI0iF&lt;/a&gt;&lt;/p&gt;&amp;mdash; Josh Long (???, ???) (@starbuxman) &lt;a href="https://twitter.com/starbuxman/status/1044749015634649088?ref_src=twsrc%5Etfw"&gt;September 26, 2018&lt;/a&gt;&lt;/blockquote&gt;&lt;br/&gt;&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;It wouldn&amp;rsquo;t be a world-class event if, in addition to seeing old friends, we couldn&amp;rsquo;t make new ones. &lt;/p&gt;
&lt;p&gt;Neha Narkhede, co-founder and CTO Confluentinc, and co-creator of Apache Kafka, absolutely &lt;em&gt;killed it&lt;/em&gt; this morning in her keynote address at the conference. What a legend! What an amazing speaker and an amazing technologist! &lt;/p&gt;
&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;It’s the amazing &lt;a href="https://twitter.com/nehanarkhede?ref_src=twsrc%5Etfw"&gt;@nehanarkhede&lt;/a&gt; &lt;a href="https://twitter.com/s1p?ref_src=twsrc%5Etfw"&gt;@s1p&lt;/a&gt; &lt;a href="https://t.co/5beGisYeq7"&gt;pic.twitter.com/5beGisYeq7&lt;/a&gt;&lt;/p&gt;&amp;mdash; Josh Long (???, ???) (@starbuxman) &lt;a href="https://twitter.com/starbuxman/status/1044596776240656384?ref_src=twsrc%5Etfw"&gt;September 25, 2018&lt;/a&gt;&lt;/blockquote&gt;&lt;br/&gt;&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;It means &lt;em&gt;everything&lt;/em&gt; to us to see our customers thriving. It was amazing to see DICKS Sporting Goods take the stage today to share their digital journey:&lt;/p&gt;
&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Amazing story of digital transformation of &lt;a href="https://twitter.com/DICKS?ref_src=twsrc%5Etfw"&gt;@DICKS&lt;/a&gt; at &lt;a href="https://twitter.com/hashtag/SpringOne?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#SpringOne&lt;/a&gt; &lt;a href="https://t.co/LygDMpBqnd"&gt;pic.twitter.com/LygDMpBqnd&lt;/a&gt;&lt;/p&gt;&amp;mdash; Yatin Khadilkar (@tatyaRao) &lt;a href="https://twitter.com/tatyaRao/status/1044586281982783494?ref_src=twsrc%5Etfw"&gt;September 25, 2018&lt;/a&gt;&lt;/blockquote&gt;&lt;br/&gt;&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;I had the privilege of introducing DICKS Sporting Goods so I thought I&amp;rsquo;d dress the part. I even went to a store in south San Francisco this weekend and got my attire just for their big debut!&lt;/p&gt;
&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Can&amp;#39;t miss &lt;a href="https://twitter.com/starbuxman?ref_src=twsrc%5Etfw"&gt;@starbuxman&lt;/a&gt; at &lt;a href="https://twitter.com/hashtag/SpringOne?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#SpringOne&lt;/a&gt; &#x1f923; &lt;a href="https://t.co/HyyBDW3V9h"&gt;pic.twitter.com/HyyBDW3V9h&lt;/a&gt;&lt;/p&gt;&amp;mdash; Christophe F. (@_christophe_f) &lt;a href="https://twitter.com/_christophe_f/status/1044586057767866368?ref_src=twsrc%5Etfw"&gt;September 25, 2018&lt;/a&gt;&lt;/blockquote&gt;&lt;br/&gt;&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;A huge part of the value of SpringOne Platform, for those of us at Pivotal as well as the larger ecosystem, is just in getting the chance to see the legends in our ecosystem that changed the world. I&amp;rsquo;m a big James Watters fan. He&amp;rsquo;s a big reason why, as a company, we all get out and work as hard as we can for our customers. He&amp;rsquo;s shown us, always leading by example, time and time again, that if we focus on the customer and their desired outcomes, good things result. Rock on James! #GOAT&lt;/p&gt;
&lt;p&gt;&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Hey it’s &lt;a href="https://twitter.com/wattersjames?ref_src=twsrc%5Etfw"&gt;@wattersjames&lt;/a&gt; how cool is that &lt;a href="https://twitter.com/hashtag/SpringOne?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#SpringOne&lt;/a&gt; &lt;a href="https://t.co/yDzufzeeXL"&gt;pic.twitter.com/yDzufzeeXL&lt;/a&gt;&lt;/p&gt;&amp;mdash; Josh Long (???, ???) (@starbuxman) &lt;a href="https://twitter.com/starbuxman/status/1044434456227061761?ref_src=twsrc%5Etfw"&gt;September 25, 2018&lt;/a&gt;&lt;/blockquote&gt;&lt;br/&gt;&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;For every photo or moment I&amp;rsquo;ve shared here are a thousand other ones I haven&amp;rsquo;t shared. It&amp;rsquo;s been an INSANE 24h since the show started in full swing and we&amp;rsquo;ve got miles to go before we sleep! &lt;/p&gt;
&lt;p&gt;So, without further ado, let&amp;rsquo;s get to this week&amp;rsquo;s amazing, release-packed roundup! &lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2018/09/25/spring-cloud-function-2-0-and-azure-functions"&gt;Spring Cloud Function 2.0 and Azure Functions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Good news everybody! &lt;a href="https://spring.io/blog/2018/09/25/spring-tools-4-ga-released"&gt;Spring Tool Suite 4 is here&lt;/a&gt;! I want to personally congratulation Spring Tool Suite lead Martin Lippert on this &lt;em&gt;incredible&lt;/em&gt; journey! STS 4 is a complete reworking of the engine behind the plugins supporting our Eclipse distribution. That engine represents a radical reprioritization of goals: the tools give you validation now based on runtime behavior instead of false positive yielded by trying to second-guess Spring at design time. The result is that using Java is fast and productive during development - no red squigglies with which to contend! - and any validation and navigation information is informed by the actual runtime behavior of the application. It&amp;rsquo;s just more accurate. Additionally, the engine itself has been extracted out into language servers which run independent of Eclipse and are supported in Microsoft Visual Studio Code and Atom. I&amp;rsquo;m super impressed with this release! This has been a long and well-worth it journey.&lt;/li&gt;
  &lt;li&gt;Spring Boot team legend Madhura Bhave has just &lt;a href="https://spring.io/blog/2018/09/25/spring-boot-2-1-m4-available-now"&gt;announced Spring Boot 2.1.M4&lt;/a&gt;! The new Spring Boot 2.1.0.M4 release ships with a ton of things including preliminary support for Spring Data JDBC, including a &lt;code&gt;@DataJdbcTest&lt;/code&gt; annotation. Check it out!&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2018/09/24/hands-on-with-spring-vault-2-1"&gt;Hands on with Spring Vault 2.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2018/09/24/spring-integration-amqp-and-kafka-release-candidates-available"&gt;Spring Integration, AMQP and Kafka Release Candidates Available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2018/09/24/spring-session-bom-bean-rc1-released"&gt;Spring Session BOM Bean-RC1 Released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2018/09/24/spring-data-jdbc-references-and-aggregates"&gt;Spring Data JDBC, References, and Aggregates&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2018/09/22/spring-boot-for-apache-geode-pivotal-gemfire-1-0-0-m3-released"&gt;Spring Boot for Apache Geode &amp;amp; Pivotal GemFire 1.0.0.M3 Released!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2018/09/21/spring-data-lovelace-ga-released"&gt;Spring Data Lovelace GA released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2018/09/21/spring-framework-5-1-goes-ga"&gt;Spring Framework 5.1 goes GA&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://content.pivotal.io/blog/meet-the-new-aws-service-broker-for-pcf-now-an-open-beta-heres-why-its-the-easiest-way-to-add-18-aws-services-to-your-cloud-native-apps?mkt_tok=eyJpIjoiWkRKak1ETTJPVEE0T0ROaiIsInQiOiJkYnpQaGdRc2IwRDExZTFMNnZKTGU2TXBpais4Z2hpaDA2UlBMSmxhQnpNMTZoMDJFTVgzT1BDKzJMYUphRkREdElnM2NqdkRmazRXYTIyTjQzTGV0RmdqMmY1OWJtMjVpenJIMVRzUFN4dkt2N2lZcWcxVUJEQllnblBMNVRUdSJ9"&gt;Meet the New AWS Service Broker for PCF, Now an Open Beta. Here&amp;rsquo;s Why It&amp;rsquo;s the Easiest Way to Add 18 AWS Services to Your Cloud Native Apps.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2018/09/20/spring-tool-suite-3-9-6-released"&gt;Spring Tool Suite 3.9.6 released&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2018/09/19/spring-web-services-3-0-4-2-4-3-released"&gt;Spring Web Services 3.0.4 / 2.4.3 released!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://spring.io/blog/2018/09/19/announcing-spring-cloud-function-2-0-0-m2"&gt;Announcing Spring Cloud Function - 2.0.0.M2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring creator Rod Johnson&amp;rsquo;s got a nice post on how &lt;a href="https://the-composition.com/modern-delivery-for-modern-java-give-yaml-the-boot-9fdcc4d83123"&gt;Atomist helps liberate modern Spring developers from the scourge of too much &lt;code&gt;.YAML&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;IBM have some very interesting new posts on building &lt;a href="https://console.bluemix.net/docs/java-spring/index.html#getting-started-tutorial"&gt;Spring applications that are destined for IBM Cloud&lt;/a&gt; and &lt;a href="https://developer.ibm.com/components/spring/"&gt;using Spring with IBM Cloud and IBM software&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I love the new Spring Tool Suite release so much I put together a quick primer that shows how to develop Java-based Spring Boot-based applications that get deployed to production in the cloud on Cloud Foundry, all from &lt;a href="https://www.youtube.com/watch?v=0ryrlJfSgfc"&gt;within the fantastically streamlined and productive Spring Tool Suite 4&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I love that buildpacks have been finally extracted out into a separate thing that&amp;rsquo;s now standard across platforms. &lt;a href="https://buildpacks.io/"&gt;Read on to learn more!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Vlad Mihalcea has a nice post on &lt;a href="https://vladmihalcea.com/spring-read-only-transaction-hibernate-optimization/"&gt;the Spring read-only transaction optimization&lt;br/&gt;in Hibernate&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Just in time for SpringOne Platform, &lt;a href="https://projectriff.io/blog/announcing-riff-0-1-3/"&gt;check out riff v0.1.3&lt;/a&gt;. Riff is the function-as-a-service sensation that&amp;rsquo;s sweeping the nation!&lt;/li&gt;
  &lt;li&gt;My buddy Matt Raible and I have been burning the midnight oil &lt;a href="https://developer.okta.com/blog/2018/09/25/spring-webflux-websockets-react"&gt;to get this &lt;em&gt;massive&lt;/em&gt; blog series&lt;/a&gt; - three parts spanning 70+ printed pages in all! - out in time for the epic SpringOne Platform event. It is &lt;em&gt;so&lt;/em&gt; worth a read.&lt;/li&gt;
  &lt;li&gt;Java 11 is here! The best part about is how mundane it all is. If you&amp;rsquo;re using the excellent &lt;a href="http://twitter.com/sdkman_"&gt;SDKMAN&lt;/a&gt;, then all you need to do is say: &lt;code&gt;sdk install java 11.ea.28-open&lt;/code&gt; and then head on over to the &lt;a href="http://start.spring.io/"&gt;Spring Initializr&lt;/a&gt; and build a new project using Java 11. It&amp;rsquo;ll just work. InfoQ have a nice &lt;a href="https://www.infoq.com/news/2018/09/java11-released"&gt;post with some details here&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I love this post by Mario&amp;rsquo;s own &lt;a href="http://twitter.com/MarioGray"&gt;Mario Gray&lt;/a&gt; on testing reactive &lt;a href="https://www.sudoinit5.com/post/spring-boot-testing-producer/"&gt;cloud Spring-based applications&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The SpringUni blog have &lt;a href="https://springuni.com/bootiful-gcp-spring-cloud-stream-with-google-cloud-pub-sub/"&gt;a nice post on using Spring Cloud GCP with Google Cloud&lt;/a&gt; that expands upon a post in my recent 8-part miniseries. It&amp;rsquo;s worth a read!&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://twitter.com/springcentral/status/1043189646677536768"&gt;Reactor Californium-RELEASE has shipped this week &#x1f6a2;&#x1f680;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://groups.google.com/forum/#!topic/rabbitmq-users/LMnYh5RXD0w"&gt;RabbitMQ 3.7.8 is out!&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;As if this week weren&amp;rsquo;t epic enough, there&amp;rsquo;s a new &lt;a href="https://groups.google.com/forum/#!topic/lettuce-redis-client-users/v5Q2qQntzzU"&gt;release of the Redis Lettuce driver&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;In light of the new Java 11 release, it feels appropriate to look &lt;a href="https://www.youtube.com/watch?v=eX7VnkcXMdM"&gt;at the long and fascinating history of Java thus far.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;This is a nice article that looks at &lt;a href="http://claudioed.tech/2018/03/07/continuous-query-with-spring-data-reactive-mongodb/"&gt;using MongoDB&amp;rsquo;s tailable queries to support&lt;/a&gt; continuous queries, a feature you might be familiar with if you&amp;rsquo;ve ever used a distributed data grid like Coherence or Apache Geode&lt;/li&gt;
  &lt;li&gt;You know that you can stream the mainstage action at SpringOne Platform 2018, don&amp;rsquo;t ya? Cuz.. &lt;a href="http://springoneplatform.io/"&gt;you can&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;You surely know by now that you can fork the Spring Initializr - here&amp;rsquo;s an example of what at least one group has &lt;a href="https://gitter.im/spring-io/initializr?at=5ba23b08f4bd1056ac866fb2"&gt;done with their fork&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud Function 2.0 and Azure Functions</title>
    <link rel="alternate" href="https://spring.io/blog/2018/09/25/spring-cloud-function-2-0-and-azure-functions" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Dave Syer</name>
    </author>
    <id>tag:spring.io,2018-09-25:3416</id>
    <updated>2018-09-25T15:33:00Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="https://github.com/spring-cloud/spring-cloud-function"&gt;Spring Cloud
Function&lt;/a&gt; has had support for Microsoft
&lt;a href="https://azure.microsoft.com/en-gb/services/functions"&gt;Azure Functions&lt;/a&gt;
since version 1.0, but in the latest 2.0 releases (still in milestone
phase) we decided to change the programming model a bit. This article
describes what the changes mean for users, and provides a bit of
background behind the shift. We in the Spring team had a lot of fun
working on this and collaborating with the folks at Microsoft to get
the best blend of the two technologies for our users.&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id="azure-functions-for-java" class="sect0"&gt;&lt;a class="anchor" href="#azure-functions-for-java"&gt;&lt;/a&gt;Azure Functions for Java&lt;/h1&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Microsoft has had Java support in Azure Functions for a while, and it
enables developers to easily write and deploy Java code that connects
in a serverless way to a wide range of platform services (events,
databases, storage, HTTP gateways, etc.) in Azure. It comes with an
annotation-based programming model that puts the function
implementations in Java methods. So you write a method and annotation
it with &lt;code&gt;@FunctionName&lt;/code&gt;, and it becomes an Azure Function. There is a
rich set of tools based on a Maven plugin (currently) that drives the
Azure command line and can be used to build a function, run and debug
it locally and deploy it to the cloud. There is a
&lt;a href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-create-first-java-maven"&gt;Quickstart
Guide&lt;/a&gt; on the Azure website which will help you get all the
pre-requisites installed and working, and there is more detailed
documentation about how Azure Functions works in the
&lt;a href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-reference-java"&gt;Developer&amp;#8217;s
Guide&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The annotations also tie the function method parameters and return
types to the services used at deployment time. For example, if you
want to bind to an HTTP gateway at deployment time you use
&lt;code&gt;@HttpTrigger&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;@FunctionName("uppercase")
public Bar execute(
    @HttpTrigger(name = "req", methods = { HttpMethod.GET, HttpMethod.POST },
        authLevel = AuthorizationLevel.ANONYMOUS) Foo foo,
    ExecutionContext context) {
  return new Bar(foo.getValue());
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;In this example we accept an incoming HTTP POST request and Azure
binds its body to a POJO of type &lt;code&gt;Foo&lt;/code&gt;. We transform the &lt;code&gt;Foo&lt;/code&gt; into a
&lt;code&gt;Bar&lt;/code&gt; and it comes back to the caller in the HTTP response.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;HTTP triggers are in the top 5 most popular integrations in Azure
Functions, but even more popular are the event-based and storage or
database-based triggers. The complete list can be found in the
&lt;a href="https://docs.microsoft.com/en-us/azure/azure-functions/functions-triggers-bindings"&gt;Triggers
and Bindings&lt;/a&gt; documentation - there is a table where you can click on
a specific binding or trigger and it will take you to reference page
where there are code samples in all languages, including Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Here&amp;#8217;s another example using the Azure Event Hub as an input and
Cosmos DB as an output. This example is
&lt;a href="https://github.com/dsyer/azure-docs"&gt;in github&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;@FunctionName("uppercase")
public Bar execute(
  @EventHubTrigger(name = "data", eventHubName = "events",
        connection = "TRANSACTIONS_EVENT_HUB_CONNECTION_STRING")
    Foo data,
    @CosmosDBOutput(name = "document", databaseName = "inventory",
        collectionName = "messages",
        connectionStringSetting = "PRODUCT_ITEMS_DOCUMENTDB_CONNECTION_STRING",
        createIfNotExists = true)
    OutputBinding&amp;lt;Bar&amp;gt; document,
    final ExecutionContext context) {
  return document.setValue(new Bar(foo.getValue()));
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="admonitionblock note"&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class="icon"&gt;
&lt;div class="title"&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class="content"&gt;
If the incoming JSON cannot be converted to the function input
type (&lt;code&gt;Foo&lt;/code&gt; in this case) you will see Azure fail with a confusing &lt;code&gt;no
such method&lt;/code&gt; error. If you see that you might be able to change the
&lt;code&gt;@FunctionName&lt;/code&gt; method to a &lt;code&gt;String&lt;/code&gt; input and eyeball the data to
make sure it is bindable to the desired input type.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The annotations carry connection credential information through an
indirection to environment variables that are configured in the
function deployment. The configuration for all that happens in the
build &lt;code&gt;pom.xml&lt;/code&gt; through the Azure Functions Maven plugin. For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-xml" data-lang="xml"&gt;&amp;lt;plugin&amp;gt;
  &amp;lt;groupId&amp;gt;com.microsoft.azure&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;azure-functions-maven-plugin&amp;lt;/artifactId&amp;gt;
  &amp;lt;configuration&amp;gt;
    &amp;lt;resourceGroup&amp;gt;${functionResourceGroup}&amp;lt;/resourceGroup&amp;gt;
    &amp;lt;appName&amp;gt;${functionAppName}&amp;lt;/appName&amp;gt;
    &amp;lt;region&amp;gt;${functionAppRegion}&amp;lt;/region&amp;gt;
    &amp;lt;appSettings&amp;gt;
            &amp;lt;property&amp;gt;
              &amp;lt;name&amp;gt;FUNCTIONS_EXTENSION_VERSION&amp;lt;/name&amp;gt;
              &amp;lt;value&amp;gt;beta&amp;lt;/value&amp;gt;
            &amp;lt;/property&amp;gt;
            &amp;lt;property&amp;gt;
              &amp;lt;name&amp;gt;TRANSACTIONS_EVENT_HUB_CONNECTION_STRING&amp;lt;/name&amp;gt;
            &amp;lt;value&amp;gt;${TRANSACTIONS_EVENT_HUB_CONNECTION_STRING}&amp;lt;/value&amp;gt;
            &amp;lt;/property&amp;gt;
            &amp;lt;property&amp;gt;
              &amp;lt;name&amp;gt;PRODUCT_ITEMS_DOCUMENTDB_CONNECTION_STRING&amp;lt;/name&amp;gt;
              &amp;lt;value&amp;gt;${PRODUCT_ITEMS_DOCUMENTDB_CONNECTION_STRING}&amp;lt;/value&amp;gt;
            &amp;lt;/property&amp;gt;
            &amp;lt;property&amp;gt;
              &amp;lt;name&amp;gt;MSDEPLOY_RENAME_LOCKED_FILES&amp;lt;/name&amp;gt;
              &amp;lt;value&amp;gt;1&amp;lt;/value&amp;gt;
            &amp;lt;/property&amp;gt;
    &amp;lt;/appSettings&amp;gt;
  &amp;lt;/configuration&amp;gt;
  &amp;lt;executions&amp;gt;
    &amp;lt;execution&amp;gt;
            &amp;lt;id&amp;gt;package-functions&amp;lt;/id&amp;gt;
            &amp;lt;goals&amp;gt;
              &amp;lt;goal&amp;gt;package&amp;lt;/goal&amp;gt;
            &amp;lt;/goals&amp;gt;
    &amp;lt;/execution&amp;gt;
  &amp;lt;/executions&amp;gt;
&amp;lt;/plugin&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;In this case the environment variable names link the plugin
configuration to the function binding declaration. For instance the
&lt;code&gt;@EventHubTrigger&lt;/code&gt; has a &lt;code&gt;connection&lt;/code&gt; attribute that will be
popeulated at runtime from the
&lt;code&gt;TRANSACTIONS_EVENT_HUB_CONNECTION_STRING&lt;/code&gt; environment variable. The
plugin configures it remotely using a local environment variable with
the same name (notice the &lt;code&gt;${}&lt;/code&gt; placeholders), which the developer or
CI process is responsible for setting up at runtime.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Your own personal connection strings are secrets and can be found in
the &lt;a href="https://portal.azure.com"&gt;Azure Dashboard&lt;/a&gt; - when you click on the
relevant resource there is usually a &lt;code&gt;Connection Strings&lt;/code&gt; link (or
similar) that you can copy and paste to your local process (e.g. in a
script that you run locally but do not check into source
control). E.g. you might use a &lt;code&gt;setup-env.sh&lt;/code&gt; script like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code&gt;export PRODUCT_ITEMS_DOCUMENTDB_CONNECTION_STRING="AccountEndpoint=https://..."
export TRANSACTIONS_EVENT_HUB_CONNECTION_STRING="Endpoint=sb://..."&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;and source it once at the beginning of a terminal session.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;There are some other plugin declarations in the &lt;code&gt;pom.xml&lt;/code&gt; of the
sample. They are all important but basically boilerplate - you should
be able to copy them and re-use the same configuration in all Azure
Function Applications.&lt;/p&gt;
&lt;/div&gt;
&lt;h1 id="spring-cloud-function" class="sect0"&gt;&lt;a class="anchor" href="#spring-cloud-function"&gt;&lt;/a&gt;Spring Cloud Function&lt;/h1&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Spring Cloud Function aims to support similar serverless use cases
when the application developer declares Spring beans of type
&lt;code&gt;java.util.Function&lt;/code&gt;. The advantages of using Spring Cloud Function on
Azure, as opposed to vanilla Java functions, are that the actual
business logic code is (in principle) portable to other platforms, and
it is a familiar programming model for existing Spring users. Also,
all the usual benefits of Spring apply: dependency injection and
comprehensive integration with many other Java libraries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The equivalent of both the examples above would be a single &lt;code&gt;@Bean&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;@Bean
public Function&amp;lt;Foo, Bar&amp;gt; uppercase() {
  return foo -&amp;gt; new Bar(foo.getValue().toUpperCase());
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;In version 1.0 of Spring Cloud Function, the user had to map the
Microsoft annotations manually to a JSON deployment descriptor, and
wrap it up manually into an archive with the right layout for the
platform. The process was brittle (but independent of the Azure Java
programming model).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;In version 2.0 this would still work, but we have chosen to support
the use of the Azure annotations a bit more explicitly. So now we have
a base class that application developers can extend and decorate with
the Azure annotations. The example above would be exactly the same
&lt;code&gt;@Bean&lt;/code&gt; and one of the &lt;code&gt;execute&lt;/code&gt; methods above would be inserted into
the subclass of the Spring Cloud handler. Example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;public class UppercaseHandler extends AzureSpringBootRequestHandler&amp;lt;Foo, Bar&amp;gt; {
  @FunctionName("uppercase")
    @HttpTrigger(name = "req", methods = { HttpMethod.GET,
        HttpMethod.POST }, authLevel = AuthorizationLevel.ANONYMOUS) Foo foo,
    ExecutionContext context) {
  return super.handle(foo, context);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Notice that the base class &lt;code&gt;AzureSpringBootRequestHandler&lt;/code&gt; is generic
with type parameters for input and output. You have to match the input
type to the incoming event data, which will be presented in JSON and
converted using Jackson by Azure before Spring has anything to
do. There are 2 utility methods in the base class, one (&lt;code&gt;handle&lt;/code&gt;)
which returns the response object, and one (&lt;code&gt;handleOutput&lt;/code&gt;) which
accepts an &lt;code&gt;OutputBinding&lt;/code&gt; and binds it to the output from the user
&lt;code&gt;Function&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonitionblock note"&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class="icon"&gt;
&lt;div class="title"&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class="content"&gt;
The base class is pure boilerplate, and serves only as
an external representation of the binding of your Spring functions
to the serverless platform services. The Azure bindings would be ignored
if you were running in a different platform, or locally via the
Spring Cloud Function web adapter, for instance. It might be possible
in the future to replace it with an interface declaration - the
Azure platform doesn&amp;#8217;t permit this currently, but it&amp;#8217;s something we
are looking at with the Microsoft team.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;There are various configuration options that drive the runtime
behaviour of the Azure Function. The most important (and only
mandatory) one is the &lt;code&gt;MAIN_CLASS&lt;/code&gt;, which is the main
&lt;code&gt;@SpringBootApplication&lt;/code&gt; class that carries the declaration of the
&lt;code&gt;Function&lt;/code&gt; (or &lt;code&gt;Functions&lt;/code&gt;). You can specify this as an environment
variable, or as the &lt;code&gt;Main-Class&lt;/code&gt; entry in the application jar
manifest. As long as your app has a main class with precisely one
function, there is no need to do anything else. In the sample app we
use the manifest to define the main class:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-xml" data-lang="xml"&gt;&amp;lt;plugin&amp;gt;
  &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;maven-jar-plugin&amp;lt;/artifactId&amp;gt;
  &amp;lt;configuration&amp;gt;
    &amp;lt;archive&amp;gt;
      &amp;lt;manifest&amp;gt;
        &amp;lt;mainClass&amp;gt;example.FunctionApplication&amp;lt;/mainClass&amp;gt;
      &amp;lt;/manifest&amp;gt;
    &amp;lt;/archive&amp;gt;
  &amp;lt;/configuration&amp;gt;
&amp;lt;/plugin&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;If your app has multiple &lt;code&gt;Function&lt;/code&gt; beans, they can be mapped to the
Azure function though the &lt;code&gt;@FunctionName&lt;/code&gt; annotation - the bean name
(or more precisely the name i nthe &lt;code&gt;FunctionCatalog&lt;/code&gt;) matches the
function name. In this way you can create an Azure Function
Application, which is a single deployment artifact for a group of
functions. If you prefer, you can also use an arbitrary
&lt;code&gt;@FunctionName&lt;/code&gt; and configure the Spring Cloud Function name through
an environment variable &lt;code&gt;FUNCTION_NAME&lt;/code&gt; or a &lt;code&gt;function.name&lt;/code&gt; in your
&lt;code&gt;application.properties&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;There is another simple sample of how to set up a Spring Cloud
Function as an Azure Function in
&lt;a href="https://github.com/spring-cloud/spring-cloud-function/blob/master/spring-cloud-function-samples/function-sample-azure/README.adoc"&gt;the
project repo&lt;/a&gt; - this one is an HTTP trigger from an Azure perspective,
but the Spring Cloud Function parts are very similar.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="admonitionblock note"&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class="icon"&gt;
&lt;div class="title"&gt;Note&lt;/div&gt;
&lt;/td&gt;
&lt;td class="content"&gt;
If you are at &lt;a href="https://springoneplatform.io"&gt;Spring One Platform&lt;/a&gt; this week, come along to a &lt;a href="https://springoneplatform.io/2018/sessions/running-serverless-applications-using-spring-and-microsoft-azure"&gt;presentation on Spring and Azure Functions&lt;/a&gt; by Jeff Hollan (Microsoft) and Oleg Zhurakousky (Pivotal).
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Spring Tools 4 GA released</title>
    <link rel="alternate" href="https://spring.io/blog/2018/09/25/spring-tools-4-ga-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Martin Lippert</name>
    </author>
    <id>tag:spring.io,2018-09-20:3404</id>
    <updated>2018-09-25T12:18:00Z</updated>
    <content type="html">&lt;p&gt;&lt;img src="https://github.com/spring-projects/sts4/wiki/images/sts4-big.gif" alt="spring tools 4" /&gt;&lt;/p&gt;
&lt;p&gt;After a decade of rolling out updates and improvements to the famous Spring Tool Suite and the Spring IDE components for Eclipse, a new era of Spring tooling starts today and we welcome you to the all-new &lt;a href="https://spring.io/tools"&gt;Spring Tools 4&lt;/a&gt;. After an intensive period of public betas, we are happy to announce the first official release today.&lt;/p&gt;
&lt;p&gt;Spring Tools 4 is a completely new set of tools for working with Spring projects in your favorite IDEs and editors. They are re-built from scratch with the goal in mind to provide the best support for implementing enterprise-grade applications based on Spring and Spring Boot across development environments and lightweight editors. They provide a unique editor-centric experience for working with Spring projects, ranging from smart and Spring-aware content-assist to a unique new way of connecting your source code with and enriching it with detailed information and insights from your running Spring Boot applications. This puts your source code editor side-by-side with your running boot applications.&lt;/p&gt;&lt;h2&gt;&lt;a href="#spring-aware" class="anchor" name="spring-aware"&gt;&lt;/a&gt;Spring Aware&lt;/h2&gt;
&lt;p&gt;The all-new Spring Tools 4 analyze your projects on the fly, understand the Spring constructs inside, and provide easy and super quick navigation to all your Spring elements. Finding a specific request mapping, an exact bean definition, or a newly created function was never as easy as with the new Spring Tools 4.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/spring-projects/sts4/wiki/images/screenshot-navigation.png" alt="smart code completion" /&gt;&lt;/p&gt;&lt;h2&gt;&lt;a href="#information-from-live-running-apps" class="anchor" name="information-from-live-running-apps"&gt;&lt;/a&gt;Information from live-running apps&lt;/h2&gt;
&lt;p&gt;The all-new Spring Tools 4 introduces a new concept of overlaying your source code with detailed information from live-running Spring Boot apps. As soon as you run your boot app on your machine, additional information from this app will show up directly in your source code editor. The most powerful part here are the detailed wiring reports for your beans. You can see exactly which bean (from which source) got injected into your @Autowired-annotated dependency (for example), and where your bean got injected in your application. This provides a unique insight into the running application directly in your source code. You don’t have to collect that data yourself and find the right lines of code manually. The tooling does that for you automatically. And going one step further, you can get that information from remote Spring Boot apps too. This allows you to see bean wirings of cloud-deployed Spring applications directly in your source code editor.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/spring-projects/sts4/wiki/images/screenshot-live-hovers.png" alt="live hover screenshot" /&gt;&lt;/p&gt;&lt;h2&gt;&lt;a href="#ide-agnostic" class="anchor" name="ide-agnostic"&gt;&lt;/a&gt;IDE agnostic&lt;/h2&gt;
&lt;p&gt;We know that Spring developers love their IDEs and code editors. And we want them to continue to use the tools that they love. Therefore we implemented most parts of the Spring Tools 4 in an IDE-agnostic way. You can use them in:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Eclipse (&lt;a href="https://www.eclipse.org/downloads"&gt;https://www.eclipse.org/downloads&lt;/a&gt; or the STS4 distribution from &lt;a href="https://spring.io/tools"&gt;https://spring.io/tools&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Visual Studio Code (&lt;a href="https://code.visualstudio.com"&gt;https://code.visualstudio.com&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Atom IDE (&lt;a href="https://ide.atom.io"&gt;https://ide.atom.io&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And that is just the beginning. We expect more environments to join this party in the future.&lt;/p&gt;&lt;h2&gt;&lt;a href="#re-built-from-scratch" class="anchor" name="re-built-from-scratch"&gt;&lt;/a&gt;Re-built from scratch&lt;/h2&gt;
&lt;p&gt;To realize these all-new Spring Tools 4, we decided to re-write most of the Spring tooling from scratch - with these goals in mind from the beginning:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Let’s be IDE agnostic - let every developer continue to use the environments they love.&lt;/li&gt;
  &lt;li&gt;Build for performance right from the start - we hate to wait for our IDE or editor to finish before we can continue coding. Therefore the Spring Tools 4 are designed to never block the user plus deliver results quickly.&lt;/li&gt;
  &lt;li&gt;Build for modern Spring technologies - the tools focus on Spring Boot and annotation-driven Spring app development.&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;a href="#continuous-updates" class="anchor" name="continuous-updates"&gt;&lt;/a&gt;Continuous Updates&lt;/h2&gt;
&lt;p&gt;Moving forward, the Spring Tools 4 will receive continuous updates with bug fixes as well as new and improved features. Those updates will appear as updates automatically in your installation across all environments. The Eclipse-based distribution will also be updated continuously, even across Eclipse platform versions, so you will always be on the latest and greatest.&lt;/p&gt;&lt;h2&gt;&lt;a href="#download" class="anchor" name="download"&gt;&lt;/a&gt;Download&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Download the release from here: &lt;a href="https://spring.io/tools"&gt;https://spring.io/tools&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Installation instructions: &lt;a href="https://github.com/spring-projects/sts4/wiki/Installation"&gt;https://github.com/spring-projects/sts4/wiki/Installation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;To learn more, take a look at the user guide here: &lt;a href="https://github.com/spring-projects/sts4/wiki/User-Guide"&gt;https://github.com/spring-projects/sts4/wiki/User-Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2&gt;&lt;a href="#watch-spring-tools-4-in-action" class="anchor" name="watch-spring-tools-4-in-action"&gt;&lt;/a&gt;Watch Spring Tools 4 in Action&lt;/h2&gt;
&lt;p&gt;Josh Long recorded a new and comprehensive &amp;ldquo;Getting Started with Spring Boot and Spring Tools 4&amp;rdquo; video, showing Spring Tools 4 for Eclipse in action. Take a look:&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/0ryrlJfSgfc" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;&lt;h2&gt;&lt;a href="#faq" class="anchor" name="faq"&gt;&lt;/a&gt;FAQ&lt;/h2&gt;&lt;h3&gt;&lt;a href="#what-will-happen-to-the-old-sts-3-9-x-tooling" class="anchor" name="what-will-happen-to-the-old-sts-3-9-x-tooling"&gt;&lt;/a&gt;What will happen to the old STS 3.9.x tooling?&lt;/h3&gt;
&lt;p&gt;We will continue to ship updates for STS 3.9.x as a full distribution until mid of 2019 and will update the distribution to the upcoming Eclipse releases (2018-09, 2018-12, and beyond). In case you still need important parts of the old tooling in Eclipse that haven’t been supported in Spring Tools 4 for Eclipse, you will be able to install those parts as add-on features into the Spring Tools 4 Eclipse distribution and those parts will continue to receive maintenance updates until mid of 2019. After mid of 2019, the old STS 3.9.x tooling will receive no maintenance updates anymore.&lt;/p&gt;&lt;h3&gt;&lt;a href="#are-the-spring-tools-4-ready-for-boot-2-1-and-spring-framework-5-1" class="anchor" name="are-the-spring-tools-4-ready-for-boot-2-1-and-spring-framework-5-1"&gt;&lt;/a&gt;Are the Spring Tools 4 ready for Boot 2.1 and Spring Framework 5.1?&lt;/h3&gt;
&lt;p&gt;Yes, the Spring Tools 4 are ready for usage with various Spring Boot versions (including 1.5.x, 2.0.x and 2.1.x) as well as the latest Spring Framework versions (including 4.x and 5.x).&lt;/p&gt;&lt;h3&gt;&lt;a href="#do-the-spring-tools-4-include-java-language-support" class="anchor" name="do-the-spring-tools-4-include-java-language-support"&gt;&lt;/a&gt;Do the Spring Tools 4 include Java language support?&lt;/h3&gt;
&lt;p&gt;The ready-to-use Spring Tools 4 distribution on top of Eclipse includes the standard Java language tooling of Eclipse out-of-the-box. For Visual Studio Code, you should install the Java Extension Pack, which is a combination of the regular Java language tooling (provided from RedHat and Eclipse) and the launching, testing, and debugging support for Java for Visual Studio Code (from Microsoft). For Atom, there is also a Java extension around (that is based on the same code as the Java support for Visual Studio Code).&lt;/p&gt;&lt;h3&gt;&lt;a href="#do-the-spring-tools-4-support-jdk9-jdk10-jdk11" class="anchor" name="do-the-spring-tools-4-support-jdk9-jdk10-jdk11"&gt;&lt;/a&gt;Do the Spring Tools 4 support JDK9, JDK10, JDK11?&lt;/h3&gt;
&lt;p&gt;Yes. You can use JDK 8/9/10/11 to run your Spring Tools 4. Language support for Java within your projects however is limited to JDK 8/9/10. Full language support for JDK11 will arrive with a future update soon.&lt;/p&gt;&lt;h3&gt;&lt;a href="#do-the-spring-tools-4-support-lombok" class="anchor" name="do-the-spring-tools-4-support-lombok"&gt;&lt;/a&gt;Do the Spring Tools 4 support Lombok?&lt;/h3&gt;
&lt;p&gt;Yes, you can use Lombok in your projects when using the Spring Tools 4 in the various environments.&lt;/p&gt;&lt;h3&gt;&lt;a href="#can-i-install-and-use-spring-tools-4-in-intellij-idea" class="anchor" name="can-i-install-and-use-spring-tools-4-in-intellij-idea"&gt;&lt;/a&gt;Can I install and use Spring Tools 4 in IntelliJ IDEA?&lt;/h3&gt;
&lt;p&gt;No. We implemented a prototype to integrate the Spring Tools 4 with IntelliJ IDEA, but the third-party support for the language server protocol for IntelliJ isn’t mature, stable, and feature-rich enough to implement a meaningful version of the Spring Tools 4 for IntelliJ yet. However, there is awesome support for Spring available out-of-the-box in the IntelliJ Ultimate Edition that you can use instead if you prefer IntelliJ.&lt;/p&gt;&lt;h3&gt;&lt;a href="#which-other-ides-and-editors-will-be-supported-in-the-future" class="anchor" name="which-other-ides-and-editors-will-be-supported-in-the-future"&gt;&lt;/a&gt;Which other IDEs and editors will be supported in the future?&lt;/h3&gt;
&lt;p&gt;We don’t have exact plans yet, but we constantly monitoring the language server community for new and emerging clients and environments that might be good candidates for the Spring Tools 4. Eclipse Theia is one of the projects we are taking into account at the moment, for example.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Boot 2.1 M4 available now</title>
    <link rel="alternate" href="https://spring.io/blog/2018/09/25/spring-boot-2-1-m4-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>Madhura Bhave</name>
    </author>
    <id>tag:spring.io,2018-09-24:3414</id>
    <updated>2018-09-25T01:38:00Z</updated>
    <content type="html">&lt;p&gt;On behalf of the team and everyone that contributed, I am happy to announce that the fourth milestone of Spring Boot 2.1 has been released and is available from &lt;a href="http://repo.spring.io/milestone/"&gt;our milestone repository&lt;/a&gt;. This release closes over &lt;a href="https://github.com/spring-projects/spring-boot/releases/tag/v2.1.0.M4"&gt;40 issues and pull requests&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This milestone ships with the latest &lt;a href="https://spring.io/blog/2018/09/21/spring-framework-5-1-goes-ga"&gt;Spring Framework 5.1&lt;/a&gt; which went GA last week.&lt;/p&gt;
&lt;p&gt;Along with the Spring Framework update, this release also includes a bunch of other &lt;a href="https://github.com/spring-projects/spring-boot/issues?q=is%3Aissue+milestone%3A2.1.0.M4+is%3Aclosed+label%3A%22type%3A+dependency-upgrade%22"&gt;dependency version updates&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For a complete list of changes and upgrade instructions, please see the &lt;a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.1.0-M4-Release-Notes"&gt;Spring Boot 2.1 Release Notes&lt;/a&gt; on the wiki and the &lt;a href="http://docs.spring.io/spring-boot/docs/2.1.0.M4/reference/htmlsingle/"&gt;updated reference documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to get started with 2.1 and try out the new features, you can bootstrap a new project on &lt;a href="https://start.spring.io"&gt;https://start.spring.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We hope to release a release candidate mid-October and the 2.1 GA towards the end of October.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-boot/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-boot/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-boot/docs/2.1.0.M4/reference/htmlsingle"&gt;Documentation&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-boot"&gt;Stack Overflow&lt;/a&gt; | &lt;a href="https://gitter.im/spring-projects/spring-boot"&gt;Gitter&lt;/a&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Hands on with Spring Vault 2.1</title>
    <link rel="alternate" href="https://spring.io/blog/2018/09/24/hands-on-with-spring-vault-2-1" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Mark Paluch</name>
    </author>
    <id>tag:spring.io,2018-09-18:3397</id>
    <updated>2018-09-24T21:27:03Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;Spring Vault 2.1 is already in sight. I would like to use this post to take a deeper look at the changes and features that are in the upcoming release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The team has been working on a whole bunch of new features:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Extending infrastructure-based authentication to support Google Cloud IAM and Azure Managed Service Identity&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Integrating Vault&amp;#8217;s versioned Key-Value backend&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wrapping API support&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Java 11 compatibility&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Spring Vault supports HashiCorp Vault versions 0.5 up to 0.11.
You can find the Spring Vault and Spring Cloud Vault &lt;a href="https://github.com/mp911de/spring-cloud-vault-config-samples"&gt;examples repository on GitHub&lt;/a&gt;. Now, let&amp;#8217;s dive into the Spring Vault 2.1 features!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="google-cloud-authentication"&gt;&lt;a class="anchor" href="#google-cloud-authentication"&gt;&lt;/a&gt;Google Cloud Authentication&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;With version 0.8.1, Vault introduced authentication support for Google Cloud. GCP authentication uses GCP&amp;#8217;s IAM service to use one of the following authentication workflows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;IAM Login using service account credentials to generate a signed token&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GCE Login using GCP&amp;#8217;s metadata service to retrieve a signed token&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Spring Vault supports both methods. While using IAM authentication requires credentials to be set up (either through the environment or by using a credentials file), GCE authentication uses the platform as an identity provider, so GCE authentication has fewer requirements regarding the initial setup.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="iam-login"&gt;&lt;a class="anchor" href="#iam-login"&gt;&lt;/a&gt;IAM Login&lt;/h3&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;IAM authentication uses Google&amp;#8217;s IAM service to generate a signed token by using the signature from Google&amp;#8217;s credentials. The signed token is passed on to Vault to verify the token. This authentication method requires credentials to be either provided through the &lt;code&gt;GOOGLE_APPLICATION_CREDENTIALS&lt;/code&gt; environment variable or configured through &lt;code&gt;GcpIamAuthenticationOptions&lt;/code&gt;. &lt;code&gt;GcpIamAuthentication&lt;/code&gt; uses Google&amp;#8217;s service API SDK (&lt;code&gt;google-api-services-iam&lt;/code&gt;) to interact with IAM. A client configuration could look like the following code sample:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;@Configuration
class VaultConfiguration extends AbstractVaultConfiguration {

  @Override
  public ClientAuthentication clientAuthentication() {

    try {

      GcpIamAuthenticationOptions options = GcpIamAuthenticationOptions.builder()
        .role("my-role")
        .credential(GoogleCredential.getApplicationDefault())
        .build();
      return new GcpIamAuthentication(options, restOperations());

    } catch (IOException e) {
      throw new IllegalStateException(e);
    }
  }

  // …
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;By default, the IAM authentication method derives project ID and service account Id from the credential. You can also configure specific values if you want to authenticate on behalf of a specific service account.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;For more information, see the &lt;a href="https://docs.spring.io/spring-vault/docs/2.1.0.RC1/reference/html/#vault.authentication.gcpiam"&gt;reference documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="gce-login"&gt;&lt;a class="anchor" href="#gce-login"&gt;&lt;/a&gt;GCE Login&lt;/h3&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The GCE (Google Compute Engine) authentication workflow is suitable for VM instances. It uses the metadata service (compute metadata) to obtain a signed token. The signed identity is passed on to Vault to verify the VM instance. A client configuration could look like the following code sample:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;@Configuration
class VaultConfiguration extends AbstractVaultConfiguration {

  @Override
  public ClientAuthentication clientAuthentication() {

    GcpComputeAuthenticationOptions options = GcpComputeAuthenticationOptions
        .builder().path("my-role").build();

    return new GcpComputeAuthentication(options, restOperations());
  }

  // …
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;For more information, see the &lt;a href="https://docs.spring.io/spring-vault/docs/2.1.0.RC1/reference/html/#vault.authentication.gcpgce"&gt;reference documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="azure-authentication"&gt;&lt;a class="anchor" href="#azure-authentication"&gt;&lt;/a&gt;Azure Authentication&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;With version 0.10.0, Vault introduced authentication support for Azure. Applications running on Azure virtual machines can authenticate against Vault by using &lt;a href="https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview"&gt;managed service identities&lt;/a&gt;. A managed service identity (MSI) can be activated for a virtual machine that does not require provisioning of upfront credentials.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Spring Vault obtains MSI credentials from the Azure Instance Metadata Service (IMDS). Vault requires additional details (subscriptionId, resource group name, VM name) to perform the authentication. By default, these values are also obtained from IMDS and passed on to Vault, along with the identity token.
A possible client configuration could look like the following code sample:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;@Configuration
class VaultConfiguration extends AbstractVaultConfiguration {

  @Override
  public ClientAuthentication clientAuthentication() {

    AzureMsiAuthenticationOptions options = AzureMsiAuthenticationOptions.builder()
        .role("my-role").build();
    return new AzureMsiAuthentication(options, restOperations());
  }

  // …
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;For more information, see the &lt;a href="https://docs.spring.io/spring-vault/docs/2.1.0.RC1/reference/html/#vault.authentication.azuremsi"&gt;reference documentation&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="key-value-api"&gt;&lt;a class="anchor" href="#key-value-api"&gt;&lt;/a&gt;Key-Value API&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Vault introduced with version 0.10 a versioned variant of its Key-Value backend (which was also known as the generic secret backend a few versions ago). This change introduces another backend type with a similar external API regarding its operations (list, get, put, delete) but a different API implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;To unify versioned and non-versioned API access, we introduced a common API with &lt;code&gt;VaultKeyValueOperations&lt;/code&gt;. &lt;code&gt;VaultKeyValueOperations&lt;/code&gt; exposes common functionality that you can use in a version-agnostic style if you do not want to interact with versioning metadata. The following example shows how you might use it:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;VaultOperations vaultOperations = …
VaultKeyValueOperations operations = vaultOperations.opsForKeyValue("secret", KeyValueBackend.unversioned());

Map&amp;lt;String, Object&amp;gt; secret = new HashMap&amp;lt;&amp;gt;();
secret.put("key", "value");
secret.put("ttl", "5");

operations.put("key", secret);

operations.put("key", new Person(…));

VaultResponseSupport&amp;lt;Person&amp;gt; person = operations.get("key", Person.class);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The variant shown above ignores versioning specifics even if they are provided by the targeted secret backend. You can obtain a versioned Key-Value API to interact with versions.
&lt;code&gt;VaultVersionedKeyValueOperations&lt;/code&gt; exposes version-specific operations such as retrieval of a specific secret version or compare-and-set. Take a look at the following example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;VaultOperations vaultOperations = …
VaultVersionedKeyValueOperations operations = vaultOperations.opsForVersionedKeyValue("versioned");

Map&amp;lt;String, Object&amp;gt; secret = new HashMap&amp;lt;&amp;gt;();
secret.put("key", "value");
secret.put("ttl", "5");

Metadata metadata = operations.put("key", secret);

Versioned&amp;lt;Map&amp;lt;String, Object&amp;gt;&amp;gt; versioned = operations.get("key", Version.from(42));

Map&amp;lt;String, Object&amp;gt; update = new HashMap&amp;lt;&amp;gt;();
update.put("key", "new-key");
update.put("ttl", "5");

Versioned&amp;lt;Map&amp;lt;String, Object&amp;gt;&amp;gt; compareAndSet = Versioned.create(secret, versioned.getVersion());

operations.put("key", compareAndSet);

operations.delete("key", Version.from(42));&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Requests and responses to versioned secrets wrap their content along with versioning metadata in a &lt;code&gt;Versioned&lt;/code&gt; object to attach a versioning context.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="wrapping-api-support"&gt;&lt;a class="anchor" href="#wrapping-api-support"&gt;&lt;/a&gt;Wrapping API Support&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;A core concept in Vault is to wrap responses and return a token to obtain the actual response body. Response wrapping is now supported by a dedicated API with &lt;code&gt;VaultWrappingOperations&lt;/code&gt;. Wrapping support allows lookup of wrapped responses. You can read these and rewrap the content. &lt;code&gt;VaultWrappingOperations&lt;/code&gt; does not support response wrapping of Spring Vault API calls. You can use &lt;code&gt;RestTemplate&lt;/code&gt; through &lt;code&gt;VaultOperations.doWithSession(…)&lt;/code&gt; directly if you need to create wrapped responses.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The following example provides an overview of &lt;code&gt;VaultWrappingOperations&lt;/code&gt; use:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-java" data-lang="java"&gt;VaultOperations vaultOperations = …
VaultWrappingOperations operations = vaultOperations.opsForWrapping();

VaultToken wrappingToken = VaultToken.of(…);

// Metadata encapsulated TTL and Creation Time
WrappedMetadata lookup = operations.lookup(wrappingToken);

// Read the response as generic Map
VaultResponse response = operations.read(wrappingToken);

// Read the response applying a type hint.
VaultResponseSupport&amp;lt;SocialSecurityNumber&amp;gt; response = operations.read(
        wrappingToken, SocialSecurityNumber.class);

// You can also wrap user-supplied data and get a token in return
Map&amp;lt;String, String&amp;gt; map = Collections.singletonMap("key", "value");
WrappedMetadata metadata = wrappingOperations.wrap(map, Duration.ofSeconds(100));&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="java-11-compatibility"&gt;&lt;a class="anchor" href="#java-11-compatibility"&gt;&lt;/a&gt;Java 11 Compatibility&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Spring Vault fully supports Java 11 as its next long-term support release. In fact, we strongly recommend that you upgrade your Spring Vault version to the 2.1 release (in combination with Spring Framework 5.1) if you are developing for JDK 11, as it will give you a warning-free experience of Spring&amp;#8217;s libraries. All HTTP client integrations have JDK 11 support.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="outlook"&gt;&lt;a class="anchor" href="#outlook"&gt;&lt;/a&gt;Outlook&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;We are working towards the next Spring Vault 2.2 release to ship with annotation-based configuration for the versioned Vault key-value backend. We keep observing the Vault project and continue to work to provide integrations for features that make sense from an application perspective. Cheers, and stay tuned!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Spring Integration, AMQP and Kafka Release Candidates Available</title>
    <link rel="alternate" href="https://spring.io/blog/2018/09/24/spring-integration-amqp-and-kafka-release-candidates-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>Artem Bilan</name>
    </author>
    <id>tag:spring.io,2018-09-24:3412</id>
    <updated>2018-09-24T17:48:55Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;On behalf of Spring Integration team I&amp;#8217;m pleased to announce Release Candidates for the Spring Messaging projects. Each is based on the recently released &lt;a href="https://spring.io/blog/2018/09/21/spring-framework-5-1-goes-ga"&gt;Spring Framework 5.1 GA&lt;/a&gt;,  has upgraded dependencies and will be part of the upcoming &lt;a href="https://github.com/spring-projects/spring-boot/milestone/122"&gt;Spring Boot 2.1 M4&lt;/a&gt; - just in time for &lt;a href="https://springoneplatform.io/"&gt;Spring One Platform&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The artifacts for these projects are available in the &lt;a href="http://repo.spring.io/milestone/"&gt;Spring Milestone&lt;/a&gt; repository.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Please, refer to the &lt;code&gt;What&amp;#8217;s New&lt;/code&gt; chapter in each Reference Manual for more information about new features and notable changers for each project mentioned below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="spring-amqp"&gt;&lt;a class="anchor" href="#spring-amqp"&gt;&lt;/a&gt;Spring AMQP&lt;/h3&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="https://github.com/spring-projects/spring-amqp/releases/tag/v2.1.0.RC1"&gt;2.1.0.RC1&lt;/a&gt; release notes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-amqp/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-amqp"&gt;GitHub&lt;/a&gt; | &lt;a href="https://jira.spring.io/browse/AMQP"&gt;JIRA&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-amqp/docs/2.1.0.RC1/reference/html"&gt;Documentation&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-amqp"&gt;Stack Overflow&lt;/a&gt; | &lt;a href="https://gitter.im/spring-projects/spring-amqp"&gt;Gitter&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="spring-for-apache-kafka"&gt;&lt;a class="anchor" href="#spring-for-apache-kafka"&gt;&lt;/a&gt;Spring for Apache Kafka&lt;/h3&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="https://github.com/spring-projects/spring-kafka/releases/tag/v2.2.0.RC1"&gt;2.2.0.RC1&lt;/a&gt; Release notes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-kafka/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-kafka"&gt;GitHub&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-kafka/issues"&gt;Issues&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-kafka/docs/2.2.0.RC1/reference/html/"&gt;Documentation&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-kafka"&gt;Stack Overflow&lt;/a&gt; | &lt;a href="https://gitter.im/spring-projects/spring-kafka"&gt;Gitter&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="spring-integration"&gt;&lt;a class="anchor" href="#spring-integration"&gt;&lt;/a&gt;Spring Integration&lt;/h3&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="https://github.com/spring-projects/spring-integration/releases/tag/v5.1.0.RC1"&gt;5.1.0.RC1&lt;/a&gt; release notes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;There are several features I would like to mention here since they are not documented yet (we are going to do that during GA release):&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Java DSL &lt;code&gt;fluxTransform()&lt;/code&gt; operator&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;To hand off the message processing to Reactive Streams, the Java DSL for Spring Integration introduced an intermediate &lt;code&gt;fluxTransform()&lt;/code&gt;, e.g.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-javal" data-lang="javal"&gt;IntegrationFlow integrationFlow = f -&amp;gt; f
    .split()
    .&amp;lt;String, String&amp;gt;fluxTransform(flux -&amp;gt; flux
                                .map(Message::getPayload
                                .map(String::toUpperCase))
    .aggregate();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;This operator accepts an argument in form of &lt;code&gt;Function&amp;lt;? super Flux&amp;lt;Message&amp;lt;I&amp;gt;&amp;gt;, ? extends Publisher&amp;lt;O&amp;gt;&amp;gt;&lt;/code&gt;. The Framework injects &lt;code&gt;FluxMessageChannel&lt;/code&gt; s before and after calling this function. The it builds a &lt;code&gt;Flux&lt;/code&gt; to store a request message to the subscriber context, calls &lt;code&gt;Flux.transform()&lt;/code&gt; with the provided function and copies headers from the request message if the result from the function is not a &lt;code&gt;Message&amp;lt;?&amp;gt;&lt;/code&gt; already.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Reactive Polling&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Another new feature is a &lt;strong&gt;Reactive polling&lt;/strong&gt; for the &lt;code&gt;SourcePollingChannelAdapter&lt;/code&gt;. If the output channel is an instance of &lt;code&gt;FluxMessageChannel&lt;/code&gt;, the Framework transform all the polling options to the &lt;code&gt;Flux.generate()&lt;/code&gt; based on the result of the &lt;code&gt;trigger.nextExecutionTime(triggerContext)&lt;/code&gt; and a combination with the &lt;code&gt;Mono.delay(duration)&lt;/code&gt; to achieve a polling feature reactive manner.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Other Java DSL changes&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Also we added several other convenient operators to Java DSL, like &lt;code&gt;nullChannel()&lt;/code&gt; and &lt;code&gt;logAndReply()&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;And finally the Java DSL has been improved for an improved Kotlin experience without breaking changes for regular Java configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="http://projects.spring.io/spring-integration/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-integration"&gt;GitHub&lt;/a&gt; | &lt;a href="https://jira.spring.io/browse/INT"&gt;JIRA&lt;/a&gt; | &lt;a href="http://docs.spring.io/spring-integration/docs/5.1.0.RC1/reference/html"&gt;Documentation&lt;/a&gt; | &lt;a href="http://stackoverflow.com/questions/tagged/spring-integration"&gt;Stack Overflow&lt;/a&gt; | &lt;a href="https://gitter.im/spring-projects/spring-integration"&gt;Gitter&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="spring-integration-extension-for-spring-for-apache-kafka"&gt;&lt;a class="anchor" href="#spring-integration-extension-for-spring-for-apache-kafka"&gt;&lt;/a&gt;Spring Integration extension for Spring for Apache Kafka&lt;/h3&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="https://github.com/spring-projects/spring-integration-kafka/releases/tag/v3.1.0.RC1"&gt;3.1.0.RC1&lt;/a&gt;  Release notes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Based on the above mentioned  Spring for Apache Kafka &lt;code&gt;2.2.0.RC1&lt;/code&gt; and Spring Integration &lt;code&gt;5.1.0.RC1&lt;/code&gt;, provides some compatibility fixes (especially with Kotlin) and some minor features, like an &lt;code&gt;onPartitionsAssignedSeekCallback&lt;/code&gt; for the &lt;code&gt;KafkaInboundGateway&lt;/code&gt; and &lt;code&gt;KafkaMessageDrivenChannelAdapter&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;See Spring for Apache Kafka &lt;a href="http://docs.spring.io/spring-kafka/docs/2.2.0.RC1/reference/html"&gt;Reference Manual&lt;/a&gt; for more information about this extension.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="feedback-welcome"&gt;&lt;a class="anchor" href="#feedback-welcome"&gt;&lt;/a&gt;Feedback Welcome!&lt;/h3&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Please, try all these new bits and come back to us with any feedback via any available channel. We will appreciate the help before we are going to GAs in mid October just in time for Spring Boot &lt;code&gt;2.1 GA&lt;/code&gt;!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Thank you everyone who contributed to all these project any possible way!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect2"&gt;
&lt;h3 id="springone-platform-2018"&gt;&lt;a class="anchor" href="#springone-platform-2018"&gt;&lt;/a&gt;SpringOne Platform 2018&lt;/h3&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Right now we are heading to start an epic event in Spring and Pivotal world - &lt;a href="https://springoneplatform.io/"&gt;Spring One Platform&lt;/a&gt;! Gary Russell is going to talk about &lt;a href="https://springoneplatform.io/2018/sessions/walking-up-the-spring-for-apache-kafka-stack"&gt; Spring for Apache Kafka&lt;/a&gt; together with Viktor Gamov from Confluent and I will talk about &lt;a href="https://springoneplatform.io/2018/sessions/global-event-streams-made-simple-with-spring-cloud-stream-cloud-pub-sub"&gt;Spring Cloud Stream Binder for Google Cloud Pub/Sub&lt;/a&gt; together with Kir Titievsky from Google Cloud Platform. Please, join us if you are here or watch video later!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
  <entry>
    <title>Spring Session BOM Bean-RC1 Released</title>
    <link rel="alternate" href="https://spring.io/blog/2018/09/24/spring-session-bom-bean-rc1-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Rob Winch</name>
    </author>
    <id>tag:spring.io,2018-09-24:3413</id>
    <updated>2018-09-24T17:33:42Z</updated>
    <content type="html">&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;em&gt;This post was authored by &lt;a href="https://github.com/vpavic"&gt;Vedran Pavi?&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;On behalf of the community, I&amp;#8217;m pleased to announce the release of Spring Session BOM &lt;code&gt;Bean-RC1&lt;/code&gt;. This release is based on Spring Session &lt;code&gt;2.1.0.RC1&lt;/code&gt; which resolves a total of &lt;a href="https://github.com/spring-projects/spring-session/milestone/42?closed=1"&gt;13 issues&lt;/a&gt;. Please read on for the highlights of the release.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="support-for-java-11"&gt;&lt;a class="anchor" href="#support-for-java-11"&gt;&lt;/a&gt;Support for Java 11&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Spring Session now supports Java 11, while the required version of course stays at Java 8. Our CI pipeline has been enhanced so that the project is now continuously verified against Java 8, 10 and 11.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="dependency-upgrades"&gt;&lt;a class="anchor" href="#dependency-upgrades"&gt;&lt;/a&gt;Dependency Upgrades&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Spring Session &lt;code&gt;2.1.0.RC1&lt;/code&gt; builds on the following latest and greatest releases of key dependencies:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Spring Framework &lt;code&gt;5.1.0.RELEASE&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring Data &lt;code&gt;Lovelace-RELEASE&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring Security &lt;code&gt;5.1.0.RELEASE&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Project Reactor &lt;code&gt;Californium-RELEASE&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Hazelcast &lt;code&gt;3.10.5&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="other"&gt;&lt;a class="anchor" href="#other"&gt;&lt;/a&gt;Other&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;The release also provide a few bug fixes and performance improvements, most notably:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="ulist"&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Improved &lt;code&gt;JdbcOperationsSessionRepository&lt;/code&gt; performance by deserializing attributes lazily: &lt;a href="https://github.com/spring-projects/spring-session/pull/1133"&gt;#1133&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improved &lt;code&gt;HazelcastSessionRepository#save&lt;/code&gt; performance by leveraging Hazelcast&amp;#8217;s &lt;code&gt;Offloadable&lt;/code&gt;: &lt;a href="https://github.com/spring-projects/spring-session/issues/1204"&gt;#1204&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixed &lt;code&gt;RedisOperationsSessionRepository&lt;/code&gt; incorrect &lt;code&gt;HttpSessionEvent&lt;/code&gt; handling when using multiple databases within the same Redis instance: &lt;a href="https://github.com/spring-projects/spring-session/issues/1128"&gt;#1128&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sect1"&gt;
&lt;h2 id="feedback-please"&gt;&lt;a class="anchor" href="#feedback-please"&gt;&lt;/a&gt;Feedback Please&lt;/h2&gt;
&lt;div class="sectionbody"&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;With the release of its first release candidate, the Spring Session &lt;code&gt;Bean&lt;/code&gt; is now considered mostly feature-complete, and we turn to you, our community, to provide us with feedback before releasing a stable &lt;code&gt;Bean-RELEASE&lt;/code&gt;. This is expected in mid-October, shortly before Spring Boot &lt;code&gt;2.1.0.RC1&lt;/code&gt; is released.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;You can give Spring Session &lt;code&gt;Bean-RC1&lt;/code&gt; a spin by configuring your dependency management as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;With Maven:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-xml" data-lang="xml"&gt;&amp;lt;dependencyManagement&amp;gt;
	&amp;lt;dependencies&amp;gt;
		&amp;lt;dependency&amp;gt;
			&amp;lt;groupId&amp;gt;org.springframework.session&amp;lt;/groupId&amp;gt;
			&amp;lt;artifactId&amp;gt;spring-session-bom&amp;lt;/artifactId&amp;gt;
			&amp;lt;version&amp;gt;Bean-RC1&amp;lt;/version&amp;gt;
			&amp;lt;type&amp;gt;pom&amp;lt;/type&amp;gt;
			&amp;lt;scope&amp;gt;import&amp;lt;/scope&amp;gt;
		&amp;lt;/dependency&amp;gt;
	&amp;lt;/dependencies&amp;gt;
&amp;lt;/dependencyManagement&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;With Gradle:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-gradle" data-lang="gradle"&gt;plugins {
	id 'io.spring.dependency-management' version '1.0.6.RELEASE'
}

dependencyManagement {
	imports {
		mavenBom 'org.springframework.session:spring-session-bom:Bean-RC1'
	}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;Spring Boot early adopters will be happy to learn that the upcoming &lt;code&gt;2.1.0.M4&lt;/code&gt; will pick up Spring Session &lt;code&gt;Bean-RC1&lt;/code&gt;, while Spring Boot &lt;code&gt;2.0.x&lt;/code&gt; users can simply update &lt;code&gt;spring-session-bom.version&lt;/code&gt; property as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;With Maven:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-xml" data-lang="xml"&gt;&amp;lt;properties&amp;gt;
	&amp;lt;sspring-session-bom.version&amp;gt;Bean-RC1&amp;lt;/spring-session-bom.version&amp;gt;
&amp;lt;/properties&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;With Gradle:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="listingblock"&gt;
&lt;div class="content"&gt;
&lt;pre class="prettyprint highlight"&gt;&lt;code class="language-gradle" data-lang="gradle"&gt;ext['spring-session-bom.version'] = 'Bean-RC1'&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="paragraph"&gt;
&lt;p&gt;&lt;a href="https://projects.spring.io/spring-session/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://docs.spring.io/spring-session/docs/2.1.0.RC1/reference/html5/"&gt;Documentation&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-session/issues"&gt;Issues&lt;/a&gt; | &lt;a href="https://gitter.im/spring-projects/spring-session"&gt;Gitter&lt;/a&gt; | &lt;a href="https://stackoverflow.com/questions/tagged/spring-session"&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>
  </entry>
</feed>
